//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniSqlParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniSqlParserParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IMiniSqlParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.stmts_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmts_root([NotNull] MiniSqlParserParser.Stmts_rootContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.stmts_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmts_root([NotNull] MiniSqlParserParser.Stmts_rootContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.stmt_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmt_root([NotNull] MiniSqlParserParser.Stmt_rootContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.stmt_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmt_root([NotNull] MiniSqlParserParser.Stmt_rootContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.query_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuery_root([NotNull] MiniSqlParserParser.Query_rootContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.query_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuery_root([NotNull] MiniSqlParserParser.Query_rootContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.predicate_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredicate_root([NotNull] MiniSqlParserParser.Predicate_rootContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.predicate_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredicate_root([NotNull] MiniSqlParserParser.Predicate_rootContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.expr_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_root([NotNull] MiniSqlParserParser.Expr_rootContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.expr_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_root([NotNull] MiniSqlParserParser.Expr_rootContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.placeholder_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPlaceholder_root([NotNull] MiniSqlParserParser.Placeholder_rootContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.placeholder_root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPlaceholder_root([NotNull] MiniSqlParserParser.Placeholder_rootContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.stmts"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmts([NotNull] MiniSqlParserParser.StmtsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.stmts"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmts([NotNull] MiniSqlParserParser.StmtsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.scols"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScols([NotNull] MiniSqlParserParser.ScolsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.scols"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScols([NotNull] MiniSqlParserParser.ScolsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.error"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterError([NotNull] MiniSqlParserParser.ErrorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.error"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitError([NotNull] MiniSqlParserParser.ErrorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmt([NotNull] MiniSqlParserParser.StmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmt([NotNull] MiniSqlParserParser.StmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.stmt_sub"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmt_sub([NotNull] MiniSqlParserParser.Stmt_subContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.stmt_sub"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmt_sub([NotNull] MiniSqlParserParser.Stmt_subContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.select_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelect_stmt([NotNull] MiniSqlParserParser.Select_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.select_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelect_stmt([NotNull] MiniSqlParserParser.Select_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.update_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUpdate_stmt([NotNull] MiniSqlParserParser.Update_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.update_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUpdate_stmt([NotNull] MiniSqlParserParser.Update_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.insert_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInsert_stmt([NotNull] MiniSqlParserParser.Insert_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.insert_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInsert_stmt([NotNull] MiniSqlParserParser.Insert_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.replace_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReplace_stmt([NotNull] MiniSqlParserParser.Replace_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.replace_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReplace_stmt([NotNull] MiniSqlParserParser.Replace_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.delete_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDelete_stmt([NotNull] MiniSqlParserParser.Delete_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.delete_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDelete_stmt([NotNull] MiniSqlParserParser.Delete_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.merge_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMerge_stmt([NotNull] MiniSqlParserParser.Merge_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.merge_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMerge_stmt([NotNull] MiniSqlParserParser.Merge_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.merge_update_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMerge_update_clause([NotNull] MiniSqlParserParser.Merge_update_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.merge_update_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMerge_update_clause([NotNull] MiniSqlParserParser.Merge_update_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.merge_insert_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMerge_insert_clause([NotNull] MiniSqlParserParser.Merge_insert_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.merge_insert_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMerge_insert_clause([NotNull] MiniSqlParserParser.Merge_insert_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.call_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall_stmt([NotNull] MiniSqlParserParser.Call_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.call_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall_stmt([NotNull] MiniSqlParserParser.Call_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.truncate_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTruncate_stmt([NotNull] MiniSqlParserParser.Truncate_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.truncate_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTruncate_stmt([NotNull] MiniSqlParserParser.Truncate_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.if_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_stmt([NotNull] MiniSqlParserParser.If_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.if_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_stmt([NotNull] MiniSqlParserParser.If_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.sqlite_pragma_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSqlite_pragma_stmt([NotNull] MiniSqlParserParser.Sqlite_pragma_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.sqlite_pragma_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSqlite_pragma_stmt([NotNull] MiniSqlParserParser.Sqlite_pragma_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.null_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNull_stmt([NotNull] MiniSqlParserParser.Null_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.null_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNull_stmt([NotNull] MiniSqlParserParser.Null_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.with_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_clause([NotNull] MiniSqlParserParser.With_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.with_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_clause([NotNull] MiniSqlParserParser.With_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.with_definition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWith_definition([NotNull] MiniSqlParserParser.With_definitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.with_definition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWith_definition([NotNull] MiniSqlParserParser.With_definitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuery([NotNull] MiniSqlParserParser.QueryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuery([NotNull] MiniSqlParserParser.QueryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueQueryClause([NotNull] MiniSqlParserParser.ValueQueryClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueQueryClause([NotNull] MiniSqlParserParser.ValueQueryClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CompoundQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompoundQueryClause([NotNull] MiniSqlParserParser.CompoundQueryClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CompoundQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompoundQueryClause([NotNull] MiniSqlParserParser.CompoundQueryClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BracketedQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBracketedQueryClause([NotNull] MiniSqlParserParser.BracketedQueryClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BracketedQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBracketedQueryClause([NotNull] MiniSqlParserParser.BracketedQueryClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SingleQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleQueryClause([NotNull] MiniSqlParserParser.SingleQueryClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SingleQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleQueryClause([NotNull] MiniSqlParserParser.SingleQueryClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.aliased_query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAliased_query([NotNull] MiniSqlParserParser.Aliased_queryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.aliased_query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAliased_query([NotNull] MiniSqlParserParser.Aliased_queryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.result_columns"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResult_columns([NotNull] MiniSqlParserParser.Result_columnsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.result_columns"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResult_columns([NotNull] MiniSqlParserParser.Result_columnsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.result_column"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResult_column([NotNull] MiniSqlParserParser.Result_columnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.result_column"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResult_column([NotNull] MiniSqlParserParser.Result_columnContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.assignments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignments([NotNull] MiniSqlParserParser.AssignmentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.assignments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignments([NotNull] MiniSqlParserParser.AssignmentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.column_names"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumn_names([NotNull] MiniSqlParserParser.Column_namesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.column_names"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumn_names([NotNull] MiniSqlParserParser.Column_namesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.unqualified_column_names"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnqualified_column_names([NotNull] MiniSqlParserParser.Unqualified_column_namesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.unqualified_column_names"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnqualified_column_names([NotNull] MiniSqlParserParser.Unqualified_column_namesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.values_clauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValues_clauses([NotNull] MiniSqlParserParser.Values_clausesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.values_clauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValues_clauses([NotNull] MiniSqlParserParser.Values_clausesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.value_columns"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue_columns([NotNull] MiniSqlParserParser.Value_columnsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.value_columns"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue_columns([NotNull] MiniSqlParserParser.Value_columnsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.value_column"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue_column([NotNull] MiniSqlParserParser.Value_columnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.value_column"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue_column([NotNull] MiniSqlParserParser.Value_columnContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.exprs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprs([NotNull] MiniSqlParserParser.ExprsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.exprs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprs([NotNull] MiniSqlParserParser.ExprsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>JoinSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJoinSource([NotNull] MiniSqlParserParser.JoinSourceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>JoinSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJoinSource([NotNull] MiniSqlParserParser.JoinSourceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TableSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTableSource([NotNull] MiniSqlParserParser.TableSourceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TableSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTableSource([NotNull] MiniSqlParserParser.TableSourceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SubQuerySource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubQuerySource([NotNull] MiniSqlParserParser.SubQuerySourceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SubQuerySource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubQuerySource([NotNull] MiniSqlParserParser.SubQuerySourceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BracketedSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBracketedSource([NotNull] MiniSqlParserParser.BracketedSourceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BracketedSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBracketedSource([NotNull] MiniSqlParserParser.BracketedSourceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CommaJoinSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCommaJoinSource([NotNull] MiniSqlParserParser.CommaJoinSourceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CommaJoinSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCommaJoinSource([NotNull] MiniSqlParserParser.CommaJoinSourceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.join_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJoin_constraint([NotNull] MiniSqlParserParser.Join_constraintContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.join_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJoin_constraint([NotNull] MiniSqlParserParser.Join_constraintContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.join_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJoin_operator([NotNull] MiniSqlParserParser.Join_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.join_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJoin_operator([NotNull] MiniSqlParserParser.Join_operatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.groupBy_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGroupBy_clause([NotNull] MiniSqlParserParser.GroupBy_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.groupBy_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGroupBy_clause([NotNull] MiniSqlParserParser.GroupBy_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.orderBy_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrderBy_clause([NotNull] MiniSqlParserParser.OrderBy_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.orderBy_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrderBy_clause([NotNull] MiniSqlParserParser.OrderBy_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.ordering_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrdering_term([NotNull] MiniSqlParserParser.Ordering_termContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.ordering_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrdering_term([NotNull] MiniSqlParserParser.Ordering_termContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.partitionBy_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPartitionBy_clause([NotNull] MiniSqlParserParser.PartitionBy_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.partitionBy_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPartitionBy_clause([NotNull] MiniSqlParserParser.PartitionBy_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.partitioning_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPartitioning_term([NotNull] MiniSqlParserParser.Partitioning_termContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.partitioning_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPartitioning_term([NotNull] MiniSqlParserParser.Partitioning_termContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.declare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclare([NotNull] MiniSqlParserParser.DeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.declare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclare([NotNull] MiniSqlParserParser.DeclareContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.params"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParams([NotNull] MiniSqlParserParser.ParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.params"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParams([NotNull] MiniSqlParserParser.ParamsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam([NotNull] MiniSqlParserParser.ParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam([NotNull] MiniSqlParserParser.ParamContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.out_param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOut_param([NotNull] MiniSqlParserParser.Out_paramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.out_param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOut_param([NotNull] MiniSqlParserParser.Out_paramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.limit_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLimit_clause([NotNull] MiniSqlParserParser.Limit_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.limit_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLimit_clause([NotNull] MiniSqlParserParser.Limit_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.for_update_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_update_clause([NotNull] MiniSqlParserParser.For_update_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.for_update_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_update_clause([NotNull] MiniSqlParserParser.For_update_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.for_update_of_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_update_of_clause([NotNull] MiniSqlParserParser.For_update_of_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.for_update_of_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_update_of_clause([NotNull] MiniSqlParserParser.For_update_of_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsPredicate([NotNull] MiniSqlParserParser.IsPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsPredicate([NotNull] MiniSqlParserParser.IsPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BetweenPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBetweenPredicate([NotNull] MiniSqlParserParser.BetweenPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BetweenPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBetweenPredicate([NotNull] MiniSqlParserParser.BetweenPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExistsPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExistsPredicate([NotNull] MiniSqlParserParser.ExistsPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExistsPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExistsPredicate([NotNull] MiniSqlParserParser.ExistsPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SubQueryPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubQueryPredicate([NotNull] MiniSqlParserParser.SubQueryPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SubQueryPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubQueryPredicate([NotNull] MiniSqlParserParser.SubQueryPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AndPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndPredicate([NotNull] MiniSqlParserParser.AndPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AndPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndPredicate([NotNull] MiniSqlParserParser.AndPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LikePredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLikePredicate([NotNull] MiniSqlParserParser.LikePredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LikePredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLikePredicate([NotNull] MiniSqlParserParser.LikePredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInPredicate([NotNull] MiniSqlParserParser.InPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInPredicate([NotNull] MiniSqlParserParser.InPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotPredicate([NotNull] MiniSqlParserParser.NotPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotPredicate([NotNull] MiniSqlParserParser.NotPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OrPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrPredicate([NotNull] MiniSqlParserParser.OrPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrPredicate([NotNull] MiniSqlParserParser.OrPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BracketedPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBracketedPredicate([NotNull] MiniSqlParserParser.BracketedPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BracketedPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBracketedPredicate([NotNull] MiniSqlParserParser.BracketedPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryOpPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryOpPredicate([NotNull] MiniSqlParserParser.BinaryOpPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryOpPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryOpPredicate([NotNull] MiniSqlParserParser.BinaryOpPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PhPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPhPredicate([NotNull] MiniSqlParserParser.PhPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PhPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPhPredicate([NotNull] MiniSqlParserParser.PhPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNullPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsNullPredicate([NotNull] MiniSqlParserParser.IsNullPredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNullPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsNullPredicate([NotNull] MiniSqlParserParser.IsNullPredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CollatePredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollatePredicate([NotNull] MiniSqlParserParser.CollatePredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CollatePredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollatePredicate([NotNull] MiniSqlParserParser.CollatePredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExtractFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExtractFuncExpr([NotNull] MiniSqlParserParser.ExtractFuncExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExtractFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExtractFuncExpr([NotNull] MiniSqlParserParser.ExtractFuncExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Case1Expr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCase1Expr([NotNull] MiniSqlParserParser.Case1ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Case1Expr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCase1Expr([NotNull] MiniSqlParserParser.Case1ExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ColumnExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumnExpr([NotNull] MiniSqlParserParser.ColumnExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ColumnExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumnExpr([NotNull] MiniSqlParserParser.ColumnExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SubQueryExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubQueryExpr([NotNull] MiniSqlParserParser.SubQueryExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SubQueryExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubQueryExpr([NotNull] MiniSqlParserParser.SubQueryExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WindowFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWindowFuncExpr([NotNull] MiniSqlParserParser.WindowFuncExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WindowFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWindowFuncExpr([NotNull] MiniSqlParserParser.WindowFuncExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BracketedExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBracketedExpr([NotNull] MiniSqlParserParser.BracketedExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BracketedExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBracketedExpr([NotNull] MiniSqlParserParser.BracketedExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GenericFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericFuncExpr([NotNull] MiniSqlParserParser.GenericFuncExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GenericFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericFuncExpr([NotNull] MiniSqlParserParser.GenericFuncExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PostgreSqlCastExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostgreSqlCastExpr([NotNull] MiniSqlParserParser.PostgreSqlCastExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PostgreSqlCastExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostgreSqlCastExpr([NotNull] MiniSqlParserParser.PostgreSqlCastExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SignedNumberExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSignedNumberExpr([NotNull] MiniSqlParserParser.SignedNumberExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SignedNumberExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSignedNumberExpr([NotNull] MiniSqlParserParser.SignedNumberExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PhExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPhExpr([NotNull] MiniSqlParserParser.PhExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PhExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPhExpr([NotNull] MiniSqlParserParser.PhExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AggregateFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAggregateFuncExpr([NotNull] MiniSqlParserParser.AggregateFuncExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AggregateFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAggregateFuncExpr([NotNull] MiniSqlParserParser.AggregateFuncExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Case2Expr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCase2Expr([NotNull] MiniSqlParserParser.Case2ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Case2Expr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCase2Expr([NotNull] MiniSqlParserParser.Case2ExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitwiseNotExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitwiseNotExpr([NotNull] MiniSqlParserParser.BitwiseNotExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitwiseNotExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitwiseNotExpr([NotNull] MiniSqlParserParser.BitwiseNotExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SubstrFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubstrFuncExpr([NotNull] MiniSqlParserParser.SubstrFuncExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SubstrFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubstrFuncExpr([NotNull] MiniSqlParserParser.SubstrFuncExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CastExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCastExpr([NotNull] MiniSqlParserParser.CastExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CastExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCastExpr([NotNull] MiniSqlParserParser.CastExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpr([NotNull] MiniSqlParserParser.LiteralExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpr([NotNull] MiniSqlParserParser.LiteralExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryOpExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryOpExpr([NotNull] MiniSqlParserParser.BinaryOpExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryOpExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryOpExpr([NotNull] MiniSqlParserParser.BinaryOpExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.substring_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubstring_function([NotNull] MiniSqlParserParser.Substring_functionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.substring_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubstring_function([NotNull] MiniSqlParserParser.Substring_functionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.extract_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExtract_function([NotNull] MiniSqlParserParser.Extract_functionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.extract_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExtract_function([NotNull] MiniSqlParserParser.Extract_functionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.aggregate_function1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAggregate_function1([NotNull] MiniSqlParserParser.Aggregate_function1Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.aggregate_function1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAggregate_function1([NotNull] MiniSqlParserParser.Aggregate_function1Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.aggregate_function2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAggregate_function2([NotNull] MiniSqlParserParser.Aggregate_function2Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.aggregate_function2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAggregate_function2([NotNull] MiniSqlParserParser.Aggregate_function2Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.window_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWindow_function([NotNull] MiniSqlParserParser.Window_functionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.window_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWindow_function([NotNull] MiniSqlParserParser.Window_functionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.generic_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGeneric_function([NotNull] MiniSqlParserParser.Generic_functionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.generic_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGeneric_function([NotNull] MiniSqlParserParser.Generic_functionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.qualified_schema_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualified_schema_name([NotNull] MiniSqlParserParser.Qualified_schema_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.qualified_schema_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualified_schema_name([NotNull] MiniSqlParserParser.Qualified_schema_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.function_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_name([NotNull] MiniSqlParserParser.Function_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.function_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_name([NotNull] MiniSqlParserParser.Function_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.index_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndex_name([NotNull] MiniSqlParserParser.Index_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.index_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndex_name([NotNull] MiniSqlParserParser.Index_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.table_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTable_name([NotNull] MiniSqlParserParser.Table_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.table_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTable_name([NotNull] MiniSqlParserParser.Table_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.column_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumn_name([NotNull] MiniSqlParserParser.Column_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.column_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumn_name([NotNull] MiniSqlParserParser.Column_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.unqualified_column_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnqualified_column_name([NotNull] MiniSqlParserParser.Unqualified_column_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.unqualified_column_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnqualified_column_name([NotNull] MiniSqlParserParser.Unqualified_column_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.aliased_table_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAliased_table_name([NotNull] MiniSqlParserParser.Aliased_table_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.aliased_table_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAliased_table_name([NotNull] MiniSqlParserParser.Aliased_table_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.hinted_table_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHinted_table_name([NotNull] MiniSqlParserParser.Hinted_table_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.hinted_table_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHinted_table_name([NotNull] MiniSqlParserParser.Hinted_table_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.hinted_aliased_table_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHinted_aliased_table_name([NotNull] MiniSqlParserParser.Hinted_aliased_table_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.hinted_aliased_table_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHinted_aliased_table_name([NotNull] MiniSqlParserParser.Hinted_aliased_table_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.table_hint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTable_hint([NotNull] MiniSqlParserParser.Table_hintContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.table_hint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTable_hint([NotNull] MiniSqlParserParser.Table_hintContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.type_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_name([NotNull] MiniSqlParserParser.Type_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.type_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_name([NotNull] MiniSqlParserParser.Type_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.collation_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollation_name([NotNull] MiniSqlParserParser.Collation_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.collation_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollation_name([NotNull] MiniSqlParserParser.Collation_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.table_alias"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTable_alias([NotNull] MiniSqlParserParser.Table_aliasContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.table_alias"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTable_alias([NotNull] MiniSqlParserParser.Table_aliasContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.column_alias"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumn_alias([NotNull] MiniSqlParserParser.Column_aliasContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.column_alias"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumn_alias([NotNull] MiniSqlParserParser.Column_aliasContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] MiniSqlParserParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] MiniSqlParserParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.identifiable_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifiable_keyword([NotNull] MiniSqlParserParser.Identifiable_keywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.identifiable_keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifiable_keyword([NotNull] MiniSqlParserParser.Identifiable_keywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.literal_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral_value([NotNull] MiniSqlParserParser.Literal_valueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.literal_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral_value([NotNull] MiniSqlParserParser.Literal_valueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.datetimeField"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDatetimeField([NotNull] MiniSqlParserParser.DatetimeFieldContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.datetimeField"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDatetimeField([NotNull] MiniSqlParserParser.DatetimeFieldContext context);
}
