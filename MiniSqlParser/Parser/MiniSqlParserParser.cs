//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniSqlParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class MiniSqlParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, SCOL=2, DOT=3, LPAR=4, RPAR=5, COMMA=6, ASSIGN=7, STAR=8, PLUS=9, 
		MINUS=10, TILDE=11, PIPE2=12, DIV=13, MOD=14, LT2=15, GT2=16, AMP=17, 
		PIPE=18, LT=19, LT_EQ=20, GT=21, GT_EQ=22, EQ=23, NOT_EQ1=24, NOT_EQ2=25, 
		OUTER_JOIN=26, ARROW=27, ARROW2=28, S_GT=29, S_GT2=30, S_MINUS=31, AT_GT=32, 
		AT_LT=33, QRY_PIPE=34, QRY_AMP=35, UINTEGER_LITERAL=36, UNUMERIC_LITERAL=37, 
		DATE_LITERAL=38, TIME_LITERAL=39, TIMESTAMP_LITERAL=40, INTERVAL_LITERAL=41, 
		STRING_LITERAL=42, BLOB_LITERAL=43, K_ABORT=44, K_ALL=45, K_AND=46, K_ANY=47, 
		K_AS=48, K_ASC=49, K_AVG=50, K_BEGIN=51, K_BETWEEN=52, K_BY=53, K_CALL=54, 
		K_CASE=55, K_CAST=56, K_COLLATE=57, K_CONFLICT=58, K_CONSTRAINT=59, K_CORR=60, 
		K_COUNT=61, K_COUNT_BIG=62, K_CROSS=63, K_CURRENT_DATE=64, K_CURRENT_TIME=65, 
		K_CURRENT_TIMESTAMP=66, K_DATE=67, K_DAY=68, K_DECLARE=69, K_DEFAULT=70, 
		K_DELETE=71, K_DESC=72, K_DISTINCT=73, K_DO=74, K_ELSE=75, K_ELSIF=76, 
		K_END=77, K_ESCAPE=78, K_EXCEPT=79, K_EXEC=80, K_EXECUTE=81, K_EXISTS=82, 
		K_EXTRACT=83, K_FAIL=84, K_FETCH=85, K_FIRST=86, K_FOR=87, K_FROM=88, 
		K_FULL=89, K_GLOB=90, K_GROUP=91, K_GROUP_CONCAT=92, K_HAVING=93, K_HOUR=94, 
		K_IF=95, K_IGNORE=96, K_ILIKE=97, K_IN=98, K_INDEXED=99, K_INNER=100, 
		K_INSERT=101, K_INTERSECT=102, K_INTERVAL=103, K_INTO=104, K_IS=105, K_JOIN=106, 
		K_LAST=107, K_LEFT=108, K_LIKE=109, K_LIMIT=110, K_LOCKED=111, K_MATCH=112, 
		K_MATCHED=113, K_MAX=114, K_MEDIAN=115, K_MERGE=116, K_MIN=117, K_MINUS=118, 
		K_MINUTE=119, K_MONTH=120, K_NATURAL=121, K_NEXT=122, K_NOLOCK=123, K_NOT=124, 
		K_NOTHING=125, K_NOWAIT=126, K_NULL=127, K_NULLS=128, K_OF=129, K_OFFSET=130, 
		K_ON=131, K_ONLY=132, K_OR=133, K_ORDER=134, K_OUTER=135, K_OUTPUT=136, 
		K_OVER=137, K_PRAGMA=138, K_PARTITION=139, K_READCOMMITTED=140, K_RECURSIVE=141, 
		K_REGEXP=142, K_REPEATABLEREAD=143, K_REPLACE=144, K_PERCENT=145, K_RIGHT=146, 
		K_ROLLBACK=147, K_ROW=148, K_ROWS=149, K_SECOND=150, K_SELECT=151, K_SERIALIZABLE=152, 
		K_SET=153, K_SIMILAR=154, K_SKIP=155, K_SOME=156, K_SUM=157, K_STDEVP=158, 
		K_STDDEV=159, K_STDDEV_POP=160, K_STDEV=161, K_SUBSTR=162, K_SUBSTRING=163, 
		K_TABLE=164, K_TABLE_INFO=165, K_THEN=166, K_TIES=167, K_TIME=168, K_TIMESTAMP=169, 
		K_TO=170, K_TOP=171, K_TOTAL=172, K_TRUNCATE=173, K_UNION=174, K_UPDATE=175, 
		K_USING=176, K_VALUES=177, K_VAR=178, K_VARIANCE=179, K_VARP=180, K_VAR_POP=181, 
		K_WAIT=182, K_WHEN=183, K_WHERE=184, K_WITH=185, K_YEAR=186, PLACEHOLDER1=187, 
		PLACEHOLDER2=188, IDENTIFIER=189, INVALID_IDENTIFIER=190, SINGLE_LINE_COMMENT=191, 
		PH_ASSIGN_COMMENT=192, AUTO_WHERE_COMMENT=193, TABLE_ALIAS_COMMENT=194, 
		MULTILINE_COMMENT=195, SPACES=196, UNEXPECTED_CHAR=197;
	public const int
		RULE_stmts_root = 0, RULE_stmt_root = 1, RULE_query_root = 2, RULE_predicate_root = 3, 
		RULE_expr_root = 4, RULE_placeholder_root = 5, RULE_stmts = 6, RULE_scols = 7, 
		RULE_error = 8, RULE_stmt = 9, RULE_stmt_sub = 10, RULE_select_stmt = 11, 
		RULE_update_stmt = 12, RULE_insert_stmt = 13, RULE_replace_stmt = 14, 
		RULE_delete_stmt = 15, RULE_merge_stmt = 16, RULE_merge_update_clause = 17, 
		RULE_merge_insert_clause = 18, RULE_call_stmt = 19, RULE_truncate_stmt = 20, 
		RULE_if_stmt = 21, RULE_sqlite_pragma_stmt = 22, RULE_null_stmt = 23, 
		RULE_with_clause = 24, RULE_with_definition = 25, RULE_query = 26, RULE_query_clause = 27, 
		RULE_aliased_query = 28, RULE_result_columns = 29, RULE_result_column = 30, 
		RULE_assignments = 31, RULE_column_names = 32, RULE_unqualified_column_names = 33, 
		RULE_values_clauses = 34, RULE_value_columns = 35, RULE_value_column = 36, 
		RULE_exprs = 37, RULE_argument = 38, RULE_arguments = 39, RULE_join_clause = 40, 
		RULE_join_constraint = 41, RULE_join_operator = 42, RULE_groupBy_clause = 43, 
		RULE_orderBy_clause = 44, RULE_ordering_term = 45, RULE_partitionBy_clause = 46, 
		RULE_partitioning_term = 47, RULE_declare = 48, RULE_params = 49, RULE_param = 50, 
		RULE_out_param = 51, RULE_limit_clause = 52, RULE_for_update_clause = 53, 
		RULE_for_update_of_clause = 54, RULE_predicate = 55, RULE_expr = 56, RULE_substring_function = 57, 
		RULE_extract_function = 58, RULE_aggregate_function1 = 59, RULE_aggregate_function2 = 60, 
		RULE_window_function = 61, RULE_generic_function = 62, RULE_qualified_schema_name = 63, 
		RULE_function_name = 64, RULE_index_name = 65, RULE_table_name = 66, RULE_column_name = 67, 
		RULE_unqualified_column_name = 68, RULE_aliased_table_name = 69, RULE_hinted_table_name = 70, 
		RULE_hinted_aliased_table_name = 71, RULE_table_hint = 72, RULE_type_name = 73, 
		RULE_collation_name = 74, RULE_constraint_name = 75, RULE_table_alias = 76, 
		RULE_column_alias = 77, RULE_identifier = 78, RULE_identifiable_keyword = 79, 
		RULE_literal_value = 80, RULE_datetimeField = 81;
	public static readonly string[] ruleNames = {
		"stmts_root", "stmt_root", "query_root", "predicate_root", "expr_root", 
		"placeholder_root", "stmts", "scols", "error", "stmt", "stmt_sub", "select_stmt", 
		"update_stmt", "insert_stmt", "replace_stmt", "delete_stmt", "merge_stmt", 
		"merge_update_clause", "merge_insert_clause", "call_stmt", "truncate_stmt", 
		"if_stmt", "sqlite_pragma_stmt", "null_stmt", "with_clause", "with_definition", 
		"query", "query_clause", "aliased_query", "result_columns", "result_column", 
		"assignments", "column_names", "unqualified_column_names", "values_clauses", 
		"value_columns", "value_column", "exprs", "argument", "arguments", "join_clause", 
		"join_constraint", "join_operator", "groupBy_clause", "orderBy_clause", 
		"ordering_term", "partitionBy_clause", "partitioning_term", "declare", 
		"params", "param", "out_param", "limit_clause", "for_update_clause", "for_update_of_clause", 
		"predicate", "expr", "substring_function", "extract_function", "aggregate_function1", 
		"aggregate_function2", "window_function", "generic_function", "qualified_schema_name", 
		"function_name", "index_name", "table_name", "column_name", "unqualified_column_name", 
		"aliased_table_name", "hinted_table_name", "hinted_aliased_table_name", 
		"table_hint", "type_name", "collation_name", "constraint_name", "table_alias", 
		"column_alias", "identifier", "identifiable_keyword", "literal_value", 
		"datetimeField"
	};

	private static readonly string[] _LiteralNames = {
		null, "'::'", "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", 
		"'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", 
		"'<='", "'>'", "'>='", "'=='", "'!='", "'<>'", "'(+)'", "'->'", "'->>'", 
		"'#>'", "'#>>'", "'#-'", "'@>'", "'<@'", "'?|'", "'?&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "SCOL", "DOT", "LPAR", "RPAR", "COMMA", "ASSIGN", "STAR", 
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "OUTER_JOIN", 
		"ARROW", "ARROW2", "S_GT", "S_GT2", "S_MINUS", "AT_GT", "AT_LT", "QRY_PIPE", 
		"QRY_AMP", "UINTEGER_LITERAL", "UNUMERIC_LITERAL", "DATE_LITERAL", "TIME_LITERAL", 
		"TIMESTAMP_LITERAL", "INTERVAL_LITERAL", "STRING_LITERAL", "BLOB_LITERAL", 
		"K_ABORT", "K_ALL", "K_AND", "K_ANY", "K_AS", "K_ASC", "K_AVG", "K_BEGIN", 
		"K_BETWEEN", "K_BY", "K_CALL", "K_CASE", "K_CAST", "K_COLLATE", "K_CONFLICT", 
		"K_CONSTRAINT", "K_CORR", "K_COUNT", "K_COUNT_BIG", "K_CROSS", "K_CURRENT_DATE", 
		"K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATE", "K_DAY", "K_DECLARE", 
		"K_DEFAULT", "K_DELETE", "K_DESC", "K_DISTINCT", "K_DO", "K_ELSE", "K_ELSIF", 
		"K_END", "K_ESCAPE", "K_EXCEPT", "K_EXEC", "K_EXECUTE", "K_EXISTS", "K_EXTRACT", 
		"K_FAIL", "K_FETCH", "K_FIRST", "K_FOR", "K_FROM", "K_FULL", "K_GLOB", 
		"K_GROUP", "K_GROUP_CONCAT", "K_HAVING", "K_HOUR", "K_IF", "K_IGNORE", 
		"K_ILIKE", "K_IN", "K_INDEXED", "K_INNER", "K_INSERT", "K_INTERSECT", 
		"K_INTERVAL", "K_INTO", "K_IS", "K_JOIN", "K_LAST", "K_LEFT", "K_LIKE", 
		"K_LIMIT", "K_LOCKED", "K_MATCH", "K_MATCHED", "K_MAX", "K_MEDIAN", "K_MERGE", 
		"K_MIN", "K_MINUS", "K_MINUTE", "K_MONTH", "K_NATURAL", "K_NEXT", "K_NOLOCK", 
		"K_NOT", "K_NOTHING", "K_NOWAIT", "K_NULL", "K_NULLS", "K_OF", "K_OFFSET", 
		"K_ON", "K_ONLY", "K_OR", "K_ORDER", "K_OUTER", "K_OUTPUT", "K_OVER", 
		"K_PRAGMA", "K_PARTITION", "K_READCOMMITTED", "K_RECURSIVE", "K_REGEXP", 
		"K_REPEATABLEREAD", "K_REPLACE", "K_PERCENT", "K_RIGHT", "K_ROLLBACK", 
		"K_ROW", "K_ROWS", "K_SECOND", "K_SELECT", "K_SERIALIZABLE", "K_SET", 
		"K_SIMILAR", "K_SKIP", "K_SOME", "K_SUM", "K_STDEVP", "K_STDDEV", "K_STDDEV_POP", 
		"K_STDEV", "K_SUBSTR", "K_SUBSTRING", "K_TABLE", "K_TABLE_INFO", "K_THEN", 
		"K_TIES", "K_TIME", "K_TIMESTAMP", "K_TO", "K_TOP", "K_TOTAL", "K_TRUNCATE", 
		"K_UNION", "K_UPDATE", "K_USING", "K_VALUES", "K_VAR", "K_VARIANCE", "K_VARP", 
		"K_VAR_POP", "K_WAIT", "K_WHEN", "K_WHERE", "K_WITH", "K_YEAR", "PLACEHOLDER1", 
		"PLACEHOLDER2", "IDENTIFIER", "INVALID_IDENTIFIER", "SINGLE_LINE_COMMENT", 
		"PH_ASSIGN_COMMENT", "AUTO_WHERE_COMMENT", "TABLE_ALIAS_COMMENT", "MULTILINE_COMMENT", 
		"SPACES", "UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniSqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MiniSqlParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	  public bool IsOracle{ get; set; }
	  public bool IsMySql { get; set; }
	  public bool IsSQLite{ get; set; }
	  public bool IsMsSql { get; set; }
	  public bool IsPostgreSql{ get; set; }
	  public bool IsPervasive { get; set; }

		public MiniSqlParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniSqlParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Stmts_rootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		public Stmts_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterStmts_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitStmts_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts_root(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmts_rootContext stmts_root() {
		Stmts_rootContext _localctx = new Stmts_rootContext(Context, State);
		EnterRule(_localctx, 0, RULE_stmts_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			stmts();
			State = 165;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_rootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		public Stmt_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterStmt_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitStmt_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_root(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_rootContext stmt_root() {
		Stmt_rootContext _localctx = new Stmt_rootContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmt_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			stmt();
			State = 168;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_rootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		public Query_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_root(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_rootContext query_root() {
		Query_rootContext _localctx = new Query_rootContext(Context, State);
		EnterRule(_localctx, 4, RULE_query_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			query();
			State = 171;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predicate_rootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		public Predicate_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate_root(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predicate_rootContext predicate_root() {
		Predicate_rootContext _localctx = new Predicate_rootContext(Context, State);
		EnterRule(_localctx, 6, RULE_predicate_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			predicate(0);
			State = 174;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_rootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		public Expr_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterExpr_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitExpr_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_root(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_rootContext expr_root() {
		Expr_rootContext _localctx = new Expr_rootContext(Context, State);
		EnterRule(_localctx, 8, RULE_expr_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			expr(0);
			State = 177;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Placeholder_rootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_columnContext value_column() {
			return GetRuleContext<Value_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Placeholder_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholder_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPlaceholder_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPlaceholder_root(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceholder_root(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Placeholder_rootContext placeholder_root() {
		Placeholder_rootContext _localctx = new Placeholder_rootContext(Context, State);
		EnterRule(_localctx, 10, RULE_placeholder_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 179;
				value_column();
				}
				break;
			case 2:
				{
				State = 180;
				predicate(0);
				}
				break;
			}
			State = 183;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public ScolsContext c1;
		public ScolsContext _scols;
		public IList<ScolsContext> _c2 = new List<ScolsContext>();
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScolsContext[] scols() {
			return GetRuleContexts<ScolsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScolsContext scols(int i) {
			return GetRuleContext<ScolsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(MiniSqlParserParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(MiniSqlParserParser.SCOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_subContext[] stmt_sub() {
			return GetRuleContexts<Stmt_subContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_subContext stmt_sub(int i) {
			return GetRuleContext<Stmt_subContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorContext error() {
			return GetRuleContext<ErrorContext>(0);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 12, RULE_stmts);
		int _la;
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185;
				stmt();
				State = 186;
				_localctx.c1 = scols();
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SCOL) {
					{
					{
					State = 187;
					Match(SCOL);
					State = 188;
					stmt_sub();
					State = 189;
					_localctx._scols = scols();
					_localctx._c2.Add(_localctx._scols);
					}
					}
					State = 195;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				error();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScolsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(MiniSqlParserParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(MiniSqlParserParser.SCOL, i);
		}
		public ScolsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scols; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterScols(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitScols(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScols(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScolsContext scols() {
		ScolsContext _localctx = new ScolsContext(Context, State);
		EnterRule(_localctx, 14, RULE_scols);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 199;
					Match(SCOL);
					}
					} 
				}
				State = 204;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public IToken _UNEXPECTED_CHAR;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNEXPECTED_CHAR() { return GetToken(MiniSqlParserParser.UNEXPECTED_CHAR, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(Context, State);
		EnterRule(_localctx, 16, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			_localctx._UNEXPECTED_CHAR = Match(UNEXPECTED_CHAR);
			 
			     throw new RecognitionException("UNEXPECTED_CHAR=" + (_localctx._UNEXPECTED_CHAR!=null?_localctx._UNEXPECTED_CHAR.Text:null)
			                                    ,this, this.InputStream, _localctx); 
			   
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_subContext stmt_sub() {
			return GetRuleContext<Stmt_subContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Null_stmtContext null_stmt() {
			return GetRuleContext<Null_stmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_stmt);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				stmt_sub();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				null_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_subContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Replace_stmtContext replace_stmt() {
			return GetRuleContext<Replace_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_stmtContext merge_stmt() {
			return GetRuleContext<Merge_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_stmtContext call_stmt() {
			return GetRuleContext<Call_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Truncate_stmtContext truncate_stmt() {
			return GetRuleContext<Truncate_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sqlite_pragma_stmtContext sqlite_pragma_stmt() {
			return GetRuleContext<Sqlite_pragma_stmtContext>(0);
		}
		public Stmt_subContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_sub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterStmt_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitStmt_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_sub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_subContext stmt_sub() {
		Stmt_subContext _localctx = new Stmt_subContext(Context, State);
		EnterRule(_localctx, 20, RULE_stmt_sub);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				select_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				update_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214;
				insert_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 215;
				if (!(IsMySql || IsSQLite)) throw new FailedPredicateException(this, "IsMySql || IsSQLite");
				State = 216;
				replace_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 217;
				delete_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 218;
				if (!(IsOracle || IsMsSql)) throw new FailedPredicateException(this, "IsOracle || IsMsSql");
				State = 219;
				merge_stmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 220;
				if (!(IsOracle || IsMySql || IsMsSql || IsPervasive)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsMsSql || IsPervasive");
				State = 221;
				call_stmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 222;
				if (!(IsOracle || IsMySql || IsMsSql || IsPostgreSql)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsMsSql || IsPostgreSql");
				State = 223;
				truncate_stmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 224;
				if_stmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 225;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 226;
				sqlite_pragma_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_update_clauseContext for_update_clause() {
			return GetRuleContext<For_update_clauseContext>(0);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 229;
				with_clause();
				}
			}

			State = 232;
			query();
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 233;
				for_update_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_UPDATE() { return GetToken(MiniSqlParserParser.K_UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SET() { return GetToken(MiniSqlParserParser.K_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hinted_table_nameContext hinted_table_name() {
			return GetRuleContext<Hinted_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_table_nameContext[] aliased_table_name() {
			return GetRuleContexts<Aliased_table_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_table_nameContext aliased_table_name(int i) {
			return GetRuleContext<Aliased_table_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OR() { return GetToken(MiniSqlParserParser.K_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ROLLBACK() { return GetToken(MiniSqlParserParser.K_ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ABORT() { return GetToken(MiniSqlParserParser.K_ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_REPLACE() { return GetToken(MiniSqlParserParser.K_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FAIL() { return GetToken(MiniSqlParserParser.K_FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IGNORE() { return GetToken(MiniSqlParserParser.K_IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FROM() { return GetToken(MiniSqlParserParser.K_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WHERE() { return GetToken(MiniSqlParserParser.K_WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 236;
				with_clause();
				}
			}

			State = 239;
			Match(K_UPDATE);
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 240;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 241;
				Match(K_OR);
				State = 242;
				Match(K_ROLLBACK);
				}
				break;
			case 2:
				{
				State = 243;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 244;
				Match(K_OR);
				State = 245;
				Match(K_ABORT);
				}
				break;
			case 3:
				{
				State = 246;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 247;
				Match(K_OR);
				State = 248;
				Match(K_REPLACE);
				}
				break;
			case 4:
				{
				State = 249;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 250;
				Match(K_OR);
				State = 251;
				Match(K_FAIL);
				}
				break;
			case 5:
				{
				State = 252;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 253;
				Match(K_OR);
				State = 254;
				Match(K_IGNORE);
				}
				break;
			}
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 257;
				if (!(IsSQLite || IsMsSql)) throw new FailedPredicateException(this, "IsSQLite || IsMsSql");
				State = 258;
				hinted_table_name();
				}
				break;
			case 2:
				{
				State = 259;
				if (!(IsOracle || IsMySql || IsPostgreSql || IsPervasive)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsPostgreSql || IsPervasive");
				State = 260;
				aliased_table_name();
				}
				break;
			}
			State = 263;
			Match(K_SET);
			State = 264;
			assignments();
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 265;
				if (!(IsMsSql || IsPostgreSql)) throw new FailedPredicateException(this, "IsMsSql || IsPostgreSql");
				State = 266;
				Match(K_FROM);
				State = 267;
				aliased_table_name();
				}
				break;
			}
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 270;
				Match(K_WHERE);
				State = 271;
				predicate(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		public Unqualified_column_namesContext col1;
		public Unqualified_column_namesContext col2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_INSERT() { return GetToken(MiniSqlParserParser.K_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OR() { return GetToken(MiniSqlParserParser.K_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_REPLACE() { return GetToken(MiniSqlParserParser.K_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_INTO() { return GetToken(MiniSqlParserParser.K_INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ROLLBACK() { return GetToken(MiniSqlParserParser.K_ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ABORT() { return GetToken(MiniSqlParserParser.K_ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FAIL() { return GetToken(MiniSqlParserParser.K_FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IGNORE() { return GetToken(MiniSqlParserParser.K_IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_table_nameContext aliased_table_name() {
			return GetRuleContext<Aliased_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VALUES() { return GetToken(MiniSqlParserParser.K_VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_clausesContext values_clauses() {
			return GetRuleContext<Values_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ON() { return GetToken(MiniSqlParserParser.K_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DO() { return GetToken(MiniSqlParserParser.K_DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unqualified_column_namesContext[] unqualified_column_names() {
			return GetRuleContexts<Unqualified_column_namesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unqualified_column_namesContext unqualified_column_names(int i) {
			return GetRuleContext<Unqualified_column_namesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CONFLICT() { return GetToken(MiniSqlParserParser.K_CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CONSTRAINT() { return GetToken(MiniSqlParserParser.K_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_UPDATE() { return GetToken(MiniSqlParserParser.K_UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SET() { return GetToken(MiniSqlParserParser.K_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOTHING() { return GetToken(MiniSqlParserParser.K_NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WHERE() { return GetToken(MiniSqlParserParser.K_WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_insert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 274;
				with_clause();
				}
				break;
			}
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 277;
				Match(K_INSERT);
				State = 279;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 278;
					Match(K_INTO);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 281;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 282;
				Match(K_INSERT);
				State = 283;
				Match(K_OR);
				State = 284;
				Match(K_REPLACE);
				State = 285;
				Match(K_INTO);
				}
				break;
			case 3:
				{
				State = 286;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 287;
				Match(K_INSERT);
				State = 288;
				Match(K_OR);
				State = 289;
				Match(K_ROLLBACK);
				State = 290;
				Match(K_INTO);
				}
				break;
			case 4:
				{
				State = 291;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 292;
				Match(K_INSERT);
				State = 293;
				Match(K_OR);
				State = 294;
				Match(K_ABORT);
				State = 295;
				Match(K_INTO);
				}
				break;
			case 5:
				{
				State = 296;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 297;
				Match(K_INSERT);
				State = 298;
				Match(K_OR);
				State = 299;
				Match(K_FAIL);
				State = 300;
				Match(K_INTO);
				}
				break;
			case 6:
				{
				State = 301;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 302;
				Match(K_INSERT);
				State = 303;
				Match(K_OR);
				State = 304;
				Match(K_IGNORE);
				State = 305;
				Match(K_INTO);
				}
				break;
			}
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 308;
				table_name();
				}
				break;
			case 2:
				{
				State = 309;
				if (!(IsPostgreSql)) throw new FailedPredicateException(this, "IsPostgreSql");
				State = 310;
				aliased_table_name();
				}
				break;
			}
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 313;
				_localctx.col1 = unqualified_column_names();
				}
				break;
			}
			State = 319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 316;
				Match(K_VALUES);
				State = 317;
				values_clauses();
				}
				break;
			case 2:
				{
				State = 318;
				query();
				}
				break;
			}
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 321;
				if (!(IsPostgreSql)) throw new FailedPredicateException(this, "IsPostgreSql");
				State = 322;
				Match(K_ON);
				State = 327;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_CONFLICT:
					{
					State = 323;
					Match(K_CONFLICT);
					State = 324;
					_localctx.col2 = unqualified_column_names();
					}
					break;
				case K_CONSTRAINT:
					{
					State = 325;
					Match(K_CONSTRAINT);
					State = 326;
					constraint_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 329;
				Match(K_DO);
				State = 338;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_UPDATE:
					{
					State = 330;
					Match(K_UPDATE);
					State = 331;
					Match(K_SET);
					State = 332;
					assignments();
					State = 335;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_WHERE) {
						{
						State = 333;
						Match(K_WHERE);
						State = 334;
						predicate(0);
						}
					}

					}
					break;
				case K_NOTHING:
					{
					State = 337;
					Match(K_NOTHING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replace_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_REPLACE() { return GetToken(MiniSqlParserParser.K_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VALUES() { return GetToken(MiniSqlParserParser.K_VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_clausesContext values_clauses() {
			return GetRuleContext<Values_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_INTO() { return GetToken(MiniSqlParserParser.K_INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unqualified_column_namesContext unqualified_column_names() {
			return GetRuleContext<Unqualified_column_namesContext>(0);
		}
		public Replace_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replace_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterReplace_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitReplace_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplace_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Replace_stmtContext replace_stmt() {
		Replace_stmtContext _localctx = new Replace_stmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_replace_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 342;
				with_clause();
				}
			}

			State = 345;
			Match(K_REPLACE);
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_INTO) {
				{
				State = 346;
				Match(K_INTO);
				}
			}

			State = 349;
			table_name();
			State = 351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 350;
				unqualified_column_names();
				}
				break;
			}
			State = 356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 353;
				Match(K_VALUES);
				State = 354;
				values_clauses();
				}
				break;
			case 2:
				{
				State = 355;
				query();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		public IToken f1;
		public IToken f2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DELETE() { return GetToken(MiniSqlParserParser.K_DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Hinted_table_nameContext hinted_table_name() {
			return GetRuleContext<Hinted_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_table_nameContext[] aliased_table_name() {
			return GetRuleContexts<Aliased_table_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_table_nameContext aliased_table_name(int i) {
			return GetRuleContext<Aliased_table_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WHERE() { return GetToken(MiniSqlParserParser.K_WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_FROM() { return GetTokens(MiniSqlParserParser.K_FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FROM(int i) {
			return GetToken(MiniSqlParserParser.K_FROM, i);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 358;
				with_clause();
				}
			}

			State = 361;
			Match(K_DELETE);
			State = 363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 362;
				_localctx.f1 = Match(K_FROM);
				}
				break;
			}
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 365;
				if (!(IsMySql  || IsSQLite     || IsMsSql)) throw new FailedPredicateException(this, "IsMySql  || IsSQLite     || IsMsSql");
				State = 366;
				hinted_table_name();
				}
				break;
			case 2:
				{
				State = 367;
				if (!(IsOracle || IsPostgreSql || IsPervasive)) throw new FailedPredicateException(this, "IsOracle || IsPostgreSql || IsPervasive");
				State = 368;
				aliased_table_name();
				}
				break;
			}
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 371;
				if (!(IsMsSql)) throw new FailedPredicateException(this, "IsMsSql");
				State = 372;
				_localctx.f2 = Match(K_FROM);
				State = 373;
				aliased_table_name();
				}
				break;
			}
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 376;
				Match(K_WHERE);
				State = 377;
				predicate(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_stmtContext : ParserRuleContext {
		public PredicateContext p;
		public Merge_update_clauseContext primary;
		public Merge_insert_clauseContext secondary;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MERGE() { return GetToken(MiniSqlParserParser.K_MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_table_nameContext[] aliased_table_name() {
			return GetRuleContexts<Aliased_table_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_table_nameContext aliased_table_name(int i) {
			return GetRuleContext<Aliased_table_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_USING() { return GetToken(MiniSqlParserParser.K_USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ON() { return GetToken(MiniSqlParserParser.K_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_queryContext aliased_query() {
			return GetRuleContext<Aliased_queryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_INTO() { return GetToken(MiniSqlParserParser.K_INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Merge_update_clauseContext merge_update_clause() {
			return GetRuleContext<Merge_update_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_insert_clauseContext merge_insert_clause() {
			return GetRuleContext<Merge_insert_clauseContext>(0);
		}
		public Merge_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_stmtContext merge_stmt() {
		Merge_stmtContext _localctx = new Merge_stmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_merge_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 380;
				with_clause();
				}
			}

			State = 383;
			Match(K_MERGE);
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_INTO) {
				{
				State = 384;
				Match(K_INTO);
				}
			}

			State = 387;
			aliased_table_name();
			State = 388;
			Match(K_USING);
			State = 391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_ABORT:
			case K_ANY:
			case K_ASC:
			case K_AVG:
			case K_BEGIN:
			case K_CAST:
			case K_COLLATE:
			case K_CONFLICT:
			case K_CONSTRAINT:
			case K_CORR:
			case K_COUNT:
			case K_COUNT_BIG:
			case K_CROSS:
			case K_DATE:
			case K_DAY:
			case K_DECLARE:
			case K_DEFAULT:
			case K_DESC:
			case K_DISTINCT:
			case K_DO:
			case K_ESCAPE:
			case K_EXEC:
			case K_EXECUTE:
			case K_EXTRACT:
			case K_FAIL:
			case K_FETCH:
			case K_FIRST:
			case K_FOR:
			case K_FULL:
			case K_GLOB:
			case K_GROUP_CONCAT:
			case K_HOUR:
			case K_IF:
			case K_IGNORE:
			case K_ILIKE:
			case K_INDEXED:
			case K_INNER:
			case K_INTERVAL:
			case K_LAST:
			case K_LEFT:
			case K_LIMIT:
			case K_LOCKED:
			case K_MATCH:
			case K_MATCHED:
			case K_MAX:
			case K_MEDIAN:
			case K_MIN:
			case K_MINUS:
			case K_MINUTE:
			case K_MONTH:
			case K_NATURAL:
			case K_NEXT:
			case K_NOLOCK:
			case K_NOTHING:
			case K_NOWAIT:
			case K_NULLS:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_ONLY:
			case K_OUTER:
			case K_OUTPUT:
			case K_OVER:
			case K_PRAGMA:
			case K_PARTITION:
			case K_READCOMMITTED:
			case K_RECURSIVE:
			case K_REGEXP:
			case K_REPEATABLEREAD:
			case K_REPLACE:
			case K_PERCENT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_ROWS:
			case K_SECOND:
			case K_SERIALIZABLE:
			case K_SIMILAR:
			case K_SKIP:
			case K_SOME:
			case K_SUM:
			case K_STDEVP:
			case K_STDDEV:
			case K_STDDEV_POP:
			case K_STDEV:
			case K_SUBSTR:
			case K_SUBSTRING:
			case K_TABLE:
			case K_TABLE_INFO:
			case K_TIES:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TO:
			case K_TOP:
			case K_TOTAL:
			case K_USING:
			case K_VAR:
			case K_VARIANCE:
			case K_VARP:
			case K_VAR_POP:
			case K_WAIT:
			case K_WITH:
			case K_YEAR:
			case IDENTIFIER:
				{
				State = 389;
				aliased_table_name();
				}
				break;
			case LPAR:
				{
				State = 390;
				aliased_query();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 393;
			Match(K_ON);
			State = 401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 394;
				if (!(IsMsSql)) throw new FailedPredicateException(this, "IsMsSql");
				State = 395;
				_localctx.p = predicate(0);
				}
				break;
			case 2:
				{
				State = 396;
				if (!(IsOracle)) throw new FailedPredicateException(this, "IsOracle");
				State = 397;
				Match(LPAR);
				State = 398;
				predicate(0);
				State = 399;
				Match(RPAR);
				}
				break;
			}
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 403;
				_localctx.primary = merge_update_clause();
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_WHEN) {
					{
					State = 404;
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				State = 407;
				_localctx.secondary = merge_insert_clause();
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_WHEN) {
					{
					State = 408;
					merge_update_clause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WHEN() { return GetToken(MiniSqlParserParser.K_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MATCHED() { return GetToken(MiniSqlParserParser.K_MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_THEN() { return GetToken(MiniSqlParserParser.K_THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_UPDATE() { return GetToken(MiniSqlParserParser.K_UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SET() { return GetToken(MiniSqlParserParser.K_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_update_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_update_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_update_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_clauseContext merge_update_clause() {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_merge_update_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(K_WHEN);
			State = 414;
			Match(K_MATCHED);
			State = 415;
			Match(K_THEN);
			State = 416;
			Match(K_UPDATE);
			State = 417;
			Match(K_SET);
			State = 418;
			assignments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_insert_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WHEN() { return GetToken(MiniSqlParserParser.K_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MATCHED() { return GetToken(MiniSqlParserParser.K_MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_THEN() { return GetToken(MiniSqlParserParser.K_THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_INSERT() { return GetToken(MiniSqlParserParser.K_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VALUES() { return GetToken(MiniSqlParserParser.K_VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_columnsContext value_columns() {
			return GetRuleContext<Value_columnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_namesContext column_names() {
			return GetRuleContext<Column_namesContext>(0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_insert_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_insert_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_insert_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_insert_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_insert_clauseContext merge_insert_clause() {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_merge_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			Match(K_WHEN);
			State = 421;
			Match(K_NOT);
			State = 422;
			Match(K_MATCHED);
			State = 423;
			Match(K_THEN);
			State = 424;
			Match(K_INSERT);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 425;
				column_names();
				}
			}

			State = 428;
			Match(K_VALUES);
			State = 429;
			value_columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_BEGIN() { return GetToken(MiniSqlParserParser.K_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CALL() { return GetToken(MiniSqlParserParser.K_CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_END() { return GetToken(MiniSqlParserParser.K_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(MiniSqlParserParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(MiniSqlParserParser.SCOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_EXEC() { return GetToken(MiniSqlParserParser.K_EXEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_EXECUTE() { return GetToken(MiniSqlParserParser.K_EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public Call_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCall_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCall_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_stmtContext call_stmt() {
		Call_stmtContext _localctx = new Call_stmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_call_stmt);
		int _la;
		try {
			int _alt;
			State = 483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 431;
				if (!(IsOracle)) throw new FailedPredicateException(this, "IsOracle");
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==K_DECLARE) {
					{
					{
					State = 432;
					declare();
					}
					}
					State = 437;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 438;
					Match(SCOL);
					}
					}
					State = 441;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SCOL );
				State = 443;
				Match(K_BEGIN);
				State = 444;
				Match(K_CALL);
				State = 445;
				function_name();
				State = 446;
				Match(LPAR);
				State = 448;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 447;
					exprs();
					}
					break;
				}
				State = 450;
				Match(RPAR);
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 451;
					Match(SCOL);
					}
					}
					State = 454;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SCOL );
				State = 456;
				Match(K_END);
				State = 458;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 457;
						Match(SCOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 460;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 462;
				if (!(IsMySql || IsPervasive)) throw new FailedPredicateException(this, "IsMySql || IsPervasive");
				State = 463;
				Match(K_CALL);
				State = 464;
				function_name();
				State = 465;
				Match(LPAR);
				State = 467;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 466;
					exprs();
					}
					break;
				}
				State = 469;
				Match(RPAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 471;
				if (!(IsMsSql)) throw new FailedPredicateException(this, "IsMsSql");
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==K_DECLARE) {
					{
					{
					State = 472;
					declare();
					}
					}
					State = 477;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 478;
				_la = TokenStream.LA(1);
				if ( !(_la==K_EXEC || _la==K_EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 479;
				function_name();
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UINTEGER_LITERAL) | (1L << UNUMERIC_LITERAL) | (1L << DATE_LITERAL) | (1L << TIME_LITERAL) | (1L << TIMESTAMP_LITERAL) | (1L << INTERVAL_LITERAL) | (1L << STRING_LITERAL) | (1L << BLOB_LITERAL))) != 0) || _la==K_NULL || _la==PLACEHOLDER1) {
					{
					State = 480;
					@params();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truncate_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TRUNCATE() { return GetToken(MiniSqlParserParser.K_TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TABLE() { return GetToken(MiniSqlParserParser.K_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Truncate_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncate_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterTruncate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitTruncate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncate_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Truncate_stmtContext truncate_stmt() {
		Truncate_stmtContext _localctx = new Truncate_stmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_truncate_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(K_TRUNCATE);
			State = 486;
			Match(K_TABLE);
			State = 487;
			table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_IF() { return GetTokens(MiniSqlParserParser.K_IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IF(int i) {
			return GetToken(MiniSqlParserParser.K_IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_THEN() { return GetTokens(MiniSqlParserParser.K_THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_THEN(int i) {
			return GetToken(MiniSqlParserParser.K_THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext[] stmts() {
			return GetRuleContexts<StmtsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts(int i) {
			return GetRuleContext<StmtsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_END() { return GetToken(MiniSqlParserParser.K_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_ELSIF() { return GetTokens(MiniSqlParserParser.K_ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ELSIF(int i) {
			return GetToken(MiniSqlParserParser.K_ELSIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ELSE() { return GetToken(MiniSqlParserParser.K_ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(K_IF);
			State = 490;
			predicate(0);
			State = 491;
			Match(K_THEN);
			State = 492;
			stmts();
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_ELSIF) {
				{
				{
				State = 493;
				Match(K_ELSIF);
				State = 494;
				predicate(0);
				State = 495;
				Match(K_THEN);
				State = 496;
				stmts();
				}
				}
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ELSE) {
				{
				State = 503;
				Match(K_ELSE);
				State = 504;
				stmts();
				}
			}

			State = 507;
			Match(K_END);
			State = 508;
			Match(K_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sqlite_pragma_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_PRAGMA() { return GetToken(MiniSqlParserParser.K_PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TABLE_INFO() { return GetToken(MiniSqlParserParser.K_TABLE_INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEHOLDER1() { return GetToken(MiniSqlParserParser.PLACEHOLDER1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEHOLDER2() { return GetToken(MiniSqlParserParser.PLACEHOLDER2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Sqlite_pragma_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlite_pragma_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSqlite_pragma_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSqlite_pragma_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlite_pragma_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sqlite_pragma_stmtContext sqlite_pragma_stmt() {
		Sqlite_pragma_stmtContext _localctx = new Sqlite_pragma_stmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_sqlite_pragma_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			Match(K_PRAGMA);
			State = 511;
			Match(K_TABLE_INFO);
			State = 512;
			Match(LPAR);
			State = 516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLACEHOLDER1:
				{
				State = 513;
				Match(PLACEHOLDER1);
				}
				break;
			case PLACEHOLDER2:
				{
				State = 514;
				Match(PLACEHOLDER2);
				}
				break;
			case K_ABORT:
			case K_ANY:
			case K_ASC:
			case K_AVG:
			case K_BEGIN:
			case K_CAST:
			case K_COLLATE:
			case K_CONFLICT:
			case K_CONSTRAINT:
			case K_CORR:
			case K_COUNT:
			case K_COUNT_BIG:
			case K_CROSS:
			case K_DATE:
			case K_DAY:
			case K_DECLARE:
			case K_DEFAULT:
			case K_DESC:
			case K_DISTINCT:
			case K_DO:
			case K_ESCAPE:
			case K_EXEC:
			case K_EXECUTE:
			case K_EXTRACT:
			case K_FAIL:
			case K_FETCH:
			case K_FIRST:
			case K_FOR:
			case K_FULL:
			case K_GLOB:
			case K_GROUP_CONCAT:
			case K_HOUR:
			case K_IF:
			case K_IGNORE:
			case K_ILIKE:
			case K_INDEXED:
			case K_INNER:
			case K_INTERVAL:
			case K_LAST:
			case K_LEFT:
			case K_LIMIT:
			case K_LOCKED:
			case K_MATCH:
			case K_MATCHED:
			case K_MAX:
			case K_MEDIAN:
			case K_MIN:
			case K_MINUS:
			case K_MINUTE:
			case K_MONTH:
			case K_NATURAL:
			case K_NEXT:
			case K_NOLOCK:
			case K_NOTHING:
			case K_NOWAIT:
			case K_NULLS:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_ONLY:
			case K_OUTER:
			case K_OUTPUT:
			case K_OVER:
			case K_PRAGMA:
			case K_PARTITION:
			case K_READCOMMITTED:
			case K_RECURSIVE:
			case K_REGEXP:
			case K_REPEATABLEREAD:
			case K_REPLACE:
			case K_PERCENT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_ROWS:
			case K_SECOND:
			case K_SERIALIZABLE:
			case K_SIMILAR:
			case K_SKIP:
			case K_SOME:
			case K_SUM:
			case K_STDEVP:
			case K_STDDEV:
			case K_STDDEV_POP:
			case K_STDEV:
			case K_SUBSTR:
			case K_SUBSTRING:
			case K_TABLE:
			case K_TABLE_INFO:
			case K_TIES:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TO:
			case K_TOP:
			case K_TOTAL:
			case K_USING:
			case K_VAR:
			case K_VARIANCE:
			case K_VARP:
			case K_VAR_POP:
			case K_WAIT:
			case K_WITH:
			case K_YEAR:
			case IDENTIFIER:
				{
				State = 515;
				table_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 518;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_stmtContext : ParserRuleContext {
		public Null_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_stmtContext null_stmt() {
		Null_stmtContext _localctx = new Null_stmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_null_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WITH() { return GetToken(MiniSqlParserParser.K_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_definitionContext[] with_definition() {
			return GetRuleContexts<With_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_definitionContext with_definition(int i) {
			return GetRuleContext<With_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_RECURSIVE() { return GetToken(MiniSqlParserParser.K_RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(Context, State);
		EnterRule(_localctx, 48, RULE_with_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			Match(K_WITH);
			State = 524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 523;
				Match(K_RECURSIVE);
				}
				break;
			}
			State = 526;
			with_definition();
			State = 531;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 527;
					Match(COMMA);
					State = 528;
					with_definition();
					}
					} 
				}
				State = 533;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unqualified_column_namesContext unqualified_column_names() {
			return GetRuleContext<Unqualified_column_namesContext>(0);
		}
		public With_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_definitionContext with_definition() {
		With_definitionContext _localctx = new With_definitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_with_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			table_name();
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 535;
				unqualified_column_names();
				}
			}

			State = 538;
			Match(K_AS);
			State = 539;
			Match(LPAR);
			State = 540;
			query();
			State = 541;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_clauseContext query_clause() {
			return GetRuleContext<Query_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderBy_clauseContext orderBy_clause() {
			return GetRuleContext<OrderBy_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 52, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			query_clause(0);
			State = 545;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 544;
				orderBy_clause();
				}
				break;
			}
			State = 548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 547;
				limit_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_clauseContext : ParserRuleContext {
		public Query_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_clause; } }
	 
		public Query_clauseContext() { }
		public virtual void CopyFrom(Query_clauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueQueryClauseContext : Query_clauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VALUES() { return GetToken(MiniSqlParserParser.K_VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAR() { return GetTokens(MiniSqlParserParser.LPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR(int i) {
			return GetToken(MiniSqlParserParser.LPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprsContext[] exprs() {
			return GetRuleContexts<ExprsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprsContext exprs(int i) {
			return GetRuleContext<ExprsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAR() { return GetTokens(MiniSqlParserParser.RPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR(int i) {
			return GetToken(MiniSqlParserParser.RPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public ValueQueryClauseContext(Query_clauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterValueQueryClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitValueQueryClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueQueryClause(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompoundQueryClauseContext : Query_clauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_clauseContext[] query_clause() {
			return GetRuleContexts<Query_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_clauseContext query_clause(int i) {
			return GetRuleContext<Query_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_UNION() { return GetToken(MiniSqlParserParser.K_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_INTERSECT() { return GetToken(MiniSqlParserParser.K_INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_EXCEPT() { return GetToken(MiniSqlParserParser.K_EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MINUS() { return GetToken(MiniSqlParserParser.K_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ALL() { return GetToken(MiniSqlParserParser.K_ALL, 0); }
		public CompoundQueryClauseContext(Query_clauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCompoundQueryClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCompoundQueryClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundQueryClause(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketedQueryClauseContext : Query_clauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_clauseContext query_clause() {
			return GetRuleContext<Query_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		public BracketedQueryClauseContext(Query_clauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBracketedQueryClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBracketedQueryClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedQueryClause(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleQueryClauseContext : Query_clauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SELECT() { return GetToken(MiniSqlParserParser.K_SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MiniSqlParserParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnsContext result_columns() {
			return GetRuleContext<Result_columnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TOP() { return GetToken(MiniSqlParserParser.K_TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FROM() { return GetToken(MiniSqlParserParser.K_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WHERE() { return GetToken(MiniSqlParserParser.K_WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupBy_clauseContext groupBy_clause() {
			return GetRuleContext<GroupBy_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DISTINCT() { return GetToken(MiniSqlParserParser.K_DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ALL() { return GetToken(MiniSqlParserParser.K_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINTEGER_LITERAL() { return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniSqlParserParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_HAVING() { return GetToken(MiniSqlParserParser.K_HAVING, 0); }
		public SingleQueryClauseContext(Query_clauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSingleQueryClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSingleQueryClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleQueryClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_clauseContext query_clause() {
		return query_clause(0);
	}

	private Query_clauseContext query_clause(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Query_clauseContext _localctx = new Query_clauseContext(Context, _parentState);
		Query_clauseContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_query_clause, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_SELECT:
				{
				_localctx = new SingleQueryClauseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 551;
				Match(K_SELECT);
				State = 553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 552;
					_la = TokenStream.LA(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 564;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 555;
					if (!(IsMsSql || IsPervasive)) throw new FailedPredicateException(this, "IsMsSql || IsPervasive");
					State = 556;
					Match(K_TOP);
					State = 562;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						State = 557;
						Match(UINTEGER_LITERAL);
						}
						break;
					case 2:
						{
						State = 558;
						if (!(IsMsSql)) throw new FailedPredicateException(this, "IsMsSql");
						State = 559;
						Match(LPAR);
						State = 560;
						Match(UINTEGER_LITERAL);
						State = 561;
						Match(RPAR);
						}
						break;
					}
					}
					break;
				}
				State = 572;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 566;
					Match(STAR);
					State = 569;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
					case 1:
						{
						State = 567;
						Match(COMMA);
						State = 568;
						result_columns();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 571;
					result_columns();
					}
					break;
				}
				State = 576;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 574;
					Match(K_FROM);
					State = 575;
					join_clause(0);
					}
					break;
				}
				State = 580;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 578;
					Match(K_WHERE);
					State = 579;
					predicate(0);
					}
					break;
				}
				State = 587;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 582;
					groupBy_clause();
					State = 585;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
					case 1:
						{
						State = 583;
						Match(K_HAVING);
						State = 584;
						predicate(0);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case LPAR:
				{
				_localctx = new BracketedQueryClauseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 589;
				Match(LPAR);
				State = 590;
				query_clause(0);
				State = 591;
				Match(RPAR);
				}
				break;
			case K_VALUES:
				{
				_localctx = new ValueQueryClauseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 593;
				Match(K_VALUES);
				State = 594;
				Match(LPAR);
				State = 595;
				exprs();
				State = 596;
				Match(RPAR);
				State = 604;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 597;
						Match(COMMA);
						State = 598;
						Match(LPAR);
						State = 599;
						exprs();
						State = 600;
						Match(RPAR);
						}
						} 
					}
					State = 606;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 622;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CompoundQueryClauseContext(new Query_clauseContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_query_clause);
					State = 609;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 617;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case K_UNION:
						{
						State = 610;
						Match(K_UNION);
						State = 612;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_ALL) {
							{
							State = 611;
							Match(K_ALL);
							}
						}

						}
						break;
					case K_INTERSECT:
						{
						State = 614;
						Match(K_INTERSECT);
						}
						break;
					case K_EXCEPT:
						{
						State = 615;
						Match(K_EXCEPT);
						}
						break;
					case K_MINUS:
						{
						State = 616;
						Match(K_MINUS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 619;
					query_clause(4);
					}
					} 
				}
				State = 624;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Aliased_queryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		public Aliased_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliased_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAliased_query(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAliased_query(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliased_query(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aliased_queryContext aliased_query() {
		Aliased_queryContext _localctx = new Aliased_queryContext(Context, State);
		EnterRule(_localctx, 56, RULE_aliased_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			Match(LPAR);
			State = 626;
			query();
			State = 627;
			Match(RPAR);
			State = 632;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_AS) {
					{
					State = 628;
					Match(K_AS);
					}
				}

				State = 631;
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public Result_columnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_columns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterResult_columns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitResult_columns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_columns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnsContext result_columns() {
		Result_columnsContext _localctx = new Result_columnsContext(Context, State);
		EnterRule(_localctx, 58, RULE_result_columns);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			result_column();
			State = 639;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 635;
					Match(COMMA);
					State = 636;
					result_column();
					}
					} 
				}
				State = 641;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MiniSqlParserParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MiniSqlParserParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(Context, State);
		EnterRule(_localctx, 60, RULE_result_column);
		int _la;
		try {
			State = 653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 642;
				table_name();
				State = 643;
				Match(DOT);
				State = 644;
				Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 646;
				expr(0);
				State = 651;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 648;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_AS) {
						{
						State = 647;
						Match(K_AS);
						}
					}

					State = 650;
					column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(MiniSqlParserParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(MiniSqlParserParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_columnContext[] value_column() {
			return GetRuleContexts<Value_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_columnContext value_column(int i) {
			return GetRuleContext<Value_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public AssignmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAssignments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentsContext assignments() {
		AssignmentsContext _localctx = new AssignmentsContext(Context, State);
		EnterRule(_localctx, 62, RULE_assignments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			column_name();
			State = 656;
			Match(ASSIGN);
			State = 657;
			value_column();
			State = 665;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 658;
					Match(COMMA);
					State = 659;
					column_name();
					State = 660;
					Match(ASSIGN);
					State = 661;
					value_column();
					}
					} 
				}
				State = 667;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public Column_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_namesContext column_names() {
		Column_namesContext _localctx = new Column_namesContext(Context, State);
		EnterRule(_localctx, 64, RULE_column_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			Match(LPAR);
			State = 669;
			column_name();
			State = 674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 670;
				Match(COMMA);
				State = 671;
				column_name();
				}
				}
				State = 676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 677;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unqualified_column_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unqualified_column_nameContext[] unqualified_column_name() {
			return GetRuleContexts<Unqualified_column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unqualified_column_nameContext unqualified_column_name(int i) {
			return GetRuleContext<Unqualified_column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public Unqualified_column_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualified_column_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterUnqualified_column_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitUnqualified_column_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnqualified_column_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unqualified_column_namesContext unqualified_column_names() {
		Unqualified_column_namesContext _localctx = new Unqualified_column_namesContext(Context, State);
		EnterRule(_localctx, 66, RULE_unqualified_column_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			Match(LPAR);
			State = 680;
			unqualified_column_name();
			State = 685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 681;
				Match(COMMA);
				State = 682;
				unqualified_column_name();
				}
				}
				State = 687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 688;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Value_columnsContext[] value_columns() {
			return GetRuleContexts<Value_columnsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_columnsContext value_columns(int i) {
			return GetRuleContext<Value_columnsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public Values_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterValues_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitValues_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Values_clausesContext values_clauses() {
		Values_clausesContext _localctx = new Values_clausesContext(Context, State);
		EnterRule(_localctx, 68, RULE_values_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			value_columns();
			State = 695;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 691;
					Match(COMMA);
					State = 692;
					value_columns();
					}
					} 
				}
				State = 697;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_columnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_columnContext[] value_column() {
			return GetRuleContexts<Value_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_columnContext value_column(int i) {
			return GetRuleContext<Value_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public Value_columnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_columns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_columns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_columns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_columns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_columnsContext value_columns() {
		Value_columnsContext _localctx = new Value_columnsContext(Context, State);
		EnterRule(_localctx, 70, RULE_value_columns);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(LPAR);
			State = 699;
			value_column();
			State = 704;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 700;
				Match(COMMA);
				State = 701;
				value_column();
				}
				}
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 707;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DEFAULT() { return GetToken(MiniSqlParserParser.K_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Value_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_columnContext value_column() {
		Value_columnContext _localctx = new Value_columnContext(Context, State);
		EnterRule(_localctx, 72, RULE_value_column);
		try {
			State = 711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 709;
				Match(K_DEFAULT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 710;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public ExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterExprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitExprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprsContext exprs() {
		ExprsContext _localctx = new ExprsContext(Context, State);
		EnterRule(_localctx, 74, RULE_exprs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			expr(0);
			State = 718;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 714;
					Match(COMMA);
					State = 715;
					expr(0);
					}
					} 
				}
				State = 720;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PredicateArgumentContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateArgumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateArgument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprArgumentContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprArgumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterExprArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitExprArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 76, RULE_argument);
		try {
			State = 723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				_localctx = new ExprArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 721;
				expr(0);
				}
				break;
			case 2:
				_localctx = new PredicateArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 722;
				predicate(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 78, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			argument();
			State = 730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 726;
				Match(COMMA);
				State = 727;
				argument();
				}
				}
				State = 732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
	 
		public Join_clauseContext() { }
		public virtual void CopyFrom(Join_clauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JoinSourceContext : Join_clauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_operatorContext join_operator() {
			return GetRuleContext<Join_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_constraintContext join_constraint() {
			return GetRuleContext<Join_constraintContext>(0);
		}
		public JoinSourceContext(Join_clauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterJoinSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitJoinSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinSource(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourceContext : Join_clauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Hinted_aliased_table_nameContext hinted_aliased_table_name() {
			return GetRuleContext<Hinted_aliased_table_nameContext>(0);
		}
		public TableSourceContext(Join_clauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterTableSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitTableSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSource(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubQuerySourceContext : Join_clauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_queryContext aliased_query() {
			return GetRuleContext<Aliased_queryContext>(0);
		}
		public SubQuerySourceContext(Join_clauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSubQuerySource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSubQuerySource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubQuerySource(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketedSourceContext : Join_clauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		public BracketedSourceContext(Join_clauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBracketedSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBracketedSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedSource(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommaJoinSourceContext : Join_clauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniSqlParserParser.COMMA, 0); }
		public CommaJoinSourceContext(Join_clauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCommaJoinSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCommaJoinSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaJoinSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		return join_clause(0);
	}

	private Join_clauseContext join_clause(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Join_clauseContext _localctx = new Join_clauseContext(Context, _parentState);
		Join_clauseContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_join_clause, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				_localctx = new TableSourceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 734;
				hinted_aliased_table_name();
				}
				break;
			case 2:
				{
				_localctx = new SubQuerySourceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 735;
				aliased_query();
				}
				break;
			case 3:
				{
				_localctx = new BracketedSourceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 736;
				Match(LPAR);
				State = 737;
				join_clause(0);
				State = 738;
				Match(RPAR);
				State = 743;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
				case 1:
					{
					State = 740;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_AS) {
						{
						State = 739;
						Match(K_AS);
						}
					}

					State = 742;
					table_alias();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 758;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 756;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
					case 1:
						{
						_localctx = new CommaJoinSourceContext(new Join_clauseContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_join_clause);
						State = 747;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 748;
						Match(COMMA);
						State = 749;
						join_clause(2);
						}
						break;
					case 2:
						{
						_localctx = new JoinSourceContext(new Join_clauseContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_join_clause);
						State = 750;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 751;
						join_operator();
						State = 752;
						join_clause(0);
						State = 754;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
						case 1:
							{
							State = 753;
							join_constraint();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 760;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ON() { return GetToken(MiniSqlParserParser.K_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_USING() { return GetToken(MiniSqlParserParser.K_USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unqualified_column_namesContext unqualified_column_names() {
			return GetRuleContext<Unqualified_column_namesContext>(0);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(Context, State);
		EnterRule(_localctx, 82, RULE_join_constraint);
		try {
			State = 766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 761;
				Match(K_ON);
				State = 762;
				predicate(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 763;
				if (!(IsOracle || IsMySql || IsSQLite || IsPostgreSql || IsPervasive)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsSQLite || IsPostgreSql || IsPervasive");
				State = 764;
				Match(K_USING);
				State = 765;
				unqualified_column_names();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_JOIN() { return GetToken(MiniSqlParserParser.K_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NATURAL() { return GetToken(MiniSqlParserParser.K_NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LEFT() { return GetToken(MiniSqlParserParser.K_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_RIGHT() { return GetToken(MiniSqlParserParser.K_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FULL() { return GetToken(MiniSqlParserParser.K_FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_INNER() { return GetToken(MiniSqlParserParser.K_INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CROSS() { return GetToken(MiniSqlParserParser.K_CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OUTER() { return GetToken(MiniSqlParserParser.K_OUTER, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_join_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 768;
				if (!(IsOracle || IsMySql || IsSQLite || IsPostgreSql)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsSQLite || IsPostgreSql");
				State = 769;
				Match(K_NATURAL);
				}
				break;
			}
			State = 786;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_LEFT:
				{
				State = 772;
				Match(K_LEFT);
				State = 774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_OUTER) {
					{
					State = 773;
					Match(K_OUTER);
					}
				}

				}
				break;
			case K_RIGHT:
				{
				State = 776;
				Match(K_RIGHT);
				State = 778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_OUTER) {
					{
					State = 777;
					Match(K_OUTER);
					}
				}

				}
				break;
			case K_FULL:
				{
				State = 780;
				Match(K_FULL);
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_OUTER) {
					{
					State = 781;
					Match(K_OUTER);
					}
				}

				}
				break;
			case K_INNER:
				{
				State = 784;
				Match(K_INNER);
				}
				break;
			case K_CROSS:
				{
				State = 785;
				Match(K_CROSS);
				}
				break;
			case K_JOIN:
				break;
			default:
				break;
			}
			State = 788;
			Match(K_JOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupBy_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_GROUP() { return GetToken(MiniSqlParserParser.K_GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_BY() { return GetToken(MiniSqlParserParser.K_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public GroupBy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupBy_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterGroupBy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitGroupBy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupBy_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupBy_clauseContext groupBy_clause() {
		GroupBy_clauseContext _localctx = new GroupBy_clauseContext(Context, State);
		EnterRule(_localctx, 86, RULE_groupBy_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			Match(K_GROUP);
			State = 791;
			Match(K_BY);
			State = 792;
			exprs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderBy_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ORDER() { return GetToken(MiniSqlParserParser.K_ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_BY() { return GetToken(MiniSqlParserParser.K_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public OrderBy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderBy_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterOrderBy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitOrderBy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderBy_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderBy_clauseContext orderBy_clause() {
		OrderBy_clauseContext _localctx = new OrderBy_clauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_orderBy_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			Match(K_ORDER);
			State = 795;
			Match(K_BY);
			State = 796;
			ordering_term();
			State = 801;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 797;
					Match(COMMA);
					State = 798;
					ordering_term();
					}
					} 
				}
				State = 803;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_COLLATE() { return GetToken(MiniSqlParserParser.K_COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NULLS() { return GetToken(MiniSqlParserParser.K_NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ASC() { return GetToken(MiniSqlParserParser.K_ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DESC() { return GetToken(MiniSqlParserParser.K_DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FIRST() { return GetToken(MiniSqlParserParser.K_FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LAST() { return GetToken(MiniSqlParserParser.K_LAST, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterOrdering_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitOrdering_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(Context, State);
		EnterRule(_localctx, 90, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			expr(0);
			State = 807;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 805;
				Match(K_COLLATE);
				State = 806;
				collation_name();
				}
				break;
			}
			State = 810;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 809;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 814;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 812;
				Match(K_NULLS);
				State = 813;
				_la = TokenStream.LA(1);
				if ( !(_la==K_FIRST || _la==K_LAST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionBy_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_PARTITION() { return GetToken(MiniSqlParserParser.K_PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_BY() { return GetToken(MiniSqlParserParser.K_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Partitioning_termContext[] partitioning_term() {
			return GetRuleContexts<Partitioning_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Partitioning_termContext partitioning_term(int i) {
			return GetRuleContext<Partitioning_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public PartitionBy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionBy_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionBy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionBy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionBy_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionBy_clauseContext partitionBy_clause() {
		PartitionBy_clauseContext _localctx = new PartitionBy_clauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_partitionBy_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			Match(K_PARTITION);
			State = 817;
			Match(K_BY);
			State = 818;
			partitioning_term();
			State = 823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 819;
				Match(COMMA);
				State = 820;
				partitioning_term();
				}
				}
				State = 825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partitioning_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_COLLATE() { return GetToken(MiniSqlParserParser.K_COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Partitioning_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitioning_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPartitioning_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPartitioning_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitioning_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partitioning_termContext partitioning_term() {
		Partitioning_termContext _localctx = new Partitioning_termContext(Context, State);
		EnterRule(_localctx, 94, RULE_partitioning_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826;
			expr(0);
			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_COLLATE) {
				{
				State = 827;
				Match(K_COLLATE);
				State = 828;
				collation_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DECLARE() { return GetToken(MiniSqlParserParser.K_DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEHOLDER1() { return GetToken(MiniSqlParserParser.PLACEHOLDER1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unqualified_column_nameContext unqualified_column_name() {
			return GetRuleContext<Unqualified_column_nameContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 96, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831;
			Match(K_DECLARE);
			State = 835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 832;
				if (!(IsMsSql)) throw new FailedPredicateException(this, "IsMsSql");
				State = 833;
				Match(PLACEHOLDER1);
				}
				break;
			case 2:
				{
				State = 834;
				unqualified_column_name();
				}
				break;
			}
			State = 837;
			type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Out_paramContext[] out_param() {
			return GetRuleContexts<Out_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Out_paramContext out_param(int i) {
			return GetRuleContext<Out_paramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 98, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 839;
				param();
				}
				break;
			case 2:
				{
				State = 840;
				out_param();
				}
				break;
			}
			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 843;
				Match(COMMA);
				State = 846;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 844;
					param();
					}
					break;
				case 2:
					{
					State = 845;
					out_param();
					}
					break;
				}
				}
				}
				State = 852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEHOLDER1() { return GetToken(MiniSqlParserParser.PLACEHOLDER1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniSqlParserParser.ASSIGN, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 100, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLACEHOLDER1) {
				{
				State = 853;
				Match(PLACEHOLDER1);
				State = 854;
				Match(ASSIGN);
				}
			}

			State = 857;
			literal_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Out_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLACEHOLDER1() { return GetTokens(MiniSqlParserParser.PLACEHOLDER1); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEHOLDER1(int i) {
			return GetToken(MiniSqlParserParser.PLACEHOLDER1, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OUTPUT() { return GetToken(MiniSqlParserParser.K_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniSqlParserParser.ASSIGN, 0); }
		public Out_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_out_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterOut_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitOut_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOut_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Out_paramContext out_param() {
		Out_paramContext _localctx = new Out_paramContext(Context, State);
		EnterRule(_localctx, 102, RULE_out_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 859;
				Match(PLACEHOLDER1);
				State = 860;
				Match(ASSIGN);
				}
				break;
			}
			State = 863;
			Match(PLACEHOLDER1);
			State = 864;
			Match(K_OUTPUT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		public IToken uint0;
		public IToken row0;
		public IToken uint1;
		public IToken row1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LIMIT() { return GetToken(MiniSqlParserParser.K_LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OFFSET() { return GetToken(MiniSqlParserParser.K_OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniSqlParserParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UINTEGER_LITERAL() { return GetTokens(MiniSqlParserParser.UINTEGER_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINTEGER_LITERAL(int i) {
			return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_ROW() { return GetTokens(MiniSqlParserParser.K_ROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ROW(int i) {
			return GetToken(MiniSqlParserParser.K_ROW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_ROWS() { return GetTokens(MiniSqlParserParser.K_ROWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ROWS(int i) {
			return GetToken(MiniSqlParserParser.K_ROWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FETCH() { return GetToken(MiniSqlParserParser.K_FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FIRST() { return GetToken(MiniSqlParserParser.K_FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NEXT() { return GetToken(MiniSqlParserParser.K_NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ONLY() { return GetToken(MiniSqlParserParser.K_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WITH() { return GetToken(MiniSqlParserParser.K_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TIES() { return GetToken(MiniSqlParserParser.K_TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_PERCENT() { return GetToken(MiniSqlParserParser.K_PERCENT, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(Context, State);
		EnterRule(_localctx, 104, RULE_limit_clause);
		int _la;
		try {
			State = 905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 866;
				if (!(IsMySql || IsSQLite || IsPostgreSql || IsPervasive)) throw new FailedPredicateException(this, "IsMySql || IsSQLite || IsPostgreSql || IsPervasive");
				State = 867;
				Match(K_LIMIT);
				State = 868;
				expr(0);
				State = 871;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
				case 1:
					{
					State = 869;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 870;
					expr(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 873;
				if (!(IsOracle || IsMsSql)) throw new FailedPredicateException(this, "IsOracle || IsMsSql");
				State = 874;
				Match(K_OFFSET);
				State = 875;
				_localctx.uint0 = Match(UINTEGER_LITERAL);
				State = 876;
				_localctx.row0 = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==K_ROW || _la==K_ROWS) ) {
					_localctx.row0 = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 890;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 877;
					Match(K_FETCH);
					State = 878;
					_la = TokenStream.LA(1);
					if ( !(_la==K_FIRST || _la==K_NEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 879;
					_localctx.uint1 = Match(UINTEGER_LITERAL);
					State = 881;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_PERCENT) {
						{
						State = 880;
						Match(K_PERCENT);
						}
					}

					State = 883;
					_localctx.row1 = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==K_ROW || _la==K_ROWS) ) {
						_localctx.row1 = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 888;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
					case 1:
						{
						State = 884;
						Match(K_ONLY);
						}
						break;
					case 2:
						{
						State = 885;
						if (!(IsOracle)) throw new FailedPredicateException(this, "IsOracle");
						State = 886;
						Match(K_WITH);
						State = 887;
						Match(K_TIES);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 892;
				if (!(IsOracle)) throw new FailedPredicateException(this, "IsOracle");
				{
				State = 893;
				Match(K_FETCH);
				State = 894;
				_la = TokenStream.LA(1);
				if ( !(_la==K_FIRST || _la==K_NEXT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 895;
				_localctx.uint1 = Match(UINTEGER_LITERAL);
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_PERCENT) {
					{
					State = 896;
					Match(K_PERCENT);
					}
				}

				State = 899;
				_localctx.row1 = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==K_ROW || _la==K_ROWS) ) {
					_localctx.row1 = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 903;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_ONLY:
					{
					State = 900;
					Match(K_ONLY);
					}
					break;
				case K_WITH:
					{
					State = 901;
					Match(K_WITH);
					State = 902;
					Match(K_TIES);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FOR() { return GetToken(MiniSqlParserParser.K_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_UPDATE() { return GetToken(MiniSqlParserParser.K_UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_update_of_clauseContext for_update_of_clause() {
			return GetRuleContext<For_update_of_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOWAIT() { return GetToken(MiniSqlParserParser.K_NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WAIT() { return GetToken(MiniSqlParserParser.K_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SKIP() { return GetToken(MiniSqlParserParser.K_SKIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LOCKED() { return GetToken(MiniSqlParserParser.K_LOCKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINTEGER_LITERAL() { return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, 0); }
		public For_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterFor_update_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitFor_update_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_update_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_update_clauseContext for_update_clause() {
		For_update_clauseContext _localctx = new For_update_clauseContext(Context, State);
		EnterRule(_localctx, 106, RULE_for_update_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			if (!(IsOracle || IsMySql || IsPostgreSql)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsPostgreSql");
			State = 908;
			Match(K_FOR);
			State = 909;
			Match(K_UPDATE);
			State = 911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_OF) {
				{
				State = 910;
				for_update_of_clause();
				}
			}

			State = 920;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_NOWAIT:
				{
				State = 913;
				Match(K_NOWAIT);
				}
				break;
			case K_WAIT:
				{
				State = 914;
				Match(K_WAIT);
				State = 916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UINTEGER_LITERAL) {
					{
					State = 915;
					Match(UINTEGER_LITERAL);
					}
				}

				}
				break;
			case K_SKIP:
				{
				State = 918;
				Match(K_SKIP);
				State = 919;
				Match(K_LOCKED);
				}
				break;
			case Eof:
			case SCOL:
			case K_ELSE:
			case K_ELSIF:
			case K_END:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_of_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OF() { return GetToken(MiniSqlParserParser.K_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public For_update_of_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_of_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterFor_update_of_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitFor_update_of_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_update_of_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_update_of_clauseContext for_update_of_clause() {
		For_update_of_clauseContext _localctx = new For_update_of_clauseContext(Context, State);
		EnterRule(_localctx, 108, RULE_for_update_of_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			Match(K_OF);
			State = 923;
			column_name();
			State = 928;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 924;
				Match(COMMA);
				State = 925;
				column_name();
				}
				}
				State = 930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IS() { return GetToken(MiniSqlParserParser.K_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public IsPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIsPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIsPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_BETWEEN() { return GetToken(MiniSqlParserParser.K_BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AND() { return GetToken(MiniSqlParserParser.K_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public BetweenPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBetweenPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBetweenPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistsPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_EXISTS() { return GetToken(MiniSqlParserParser.K_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		public ExistsPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterExistsPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitExistsPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubQueryPredicateContext : PredicateContext {
		public IToken op1;
		public IToken op2;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MiniSqlParserParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(MiniSqlParserParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MiniSqlParserParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(MiniSqlParserParser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniSqlParserParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MiniSqlParserParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ1() { return GetToken(MiniSqlParserParser.NOT_EQ1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ2() { return GetToken(MiniSqlParserParser.NOT_EQ2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ANY() { return GetToken(MiniSqlParserParser.K_ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SOME() { return GetToken(MiniSqlParserParser.K_SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ALL() { return GetToken(MiniSqlParserParser.K_ALL, 0); }
		public SubQueryPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSubQueryPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSubQueryPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubQueryPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AND() { return GetToken(MiniSqlParserParser.K_AND, 0); }
		public AndPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAndPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAndPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LikePredicateContext : PredicateContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LIKE() { return GetToken(MiniSqlParserParser.K_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ILIKE() { return GetToken(MiniSqlParserParser.K_ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_GLOB() { return GetToken(MiniSqlParserParser.K_GLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MATCH() { return GetToken(MiniSqlParserParser.K_MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_REGEXP() { return GetToken(MiniSqlParserParser.K_REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ESCAPE() { return GetToken(MiniSqlParserParser.K_ESCAPE, 0); }
		public LikePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IN() { return GetToken(MiniSqlParserParser.K_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public InPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterInPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitInPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public NotPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterNotPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitNotPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OR() { return GetToken(MiniSqlParserParser.K_OR, 0); }
		public OrPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterOrPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitOrPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketedPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		public BracketedPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBracketedPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBracketedPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOpPredicateContext : PredicateContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MiniSqlParserParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(MiniSqlParserParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MiniSqlParserParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(MiniSqlParserParser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniSqlParserParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MiniSqlParserParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ1() { return GetToken(MiniSqlParserParser.NOT_EQ1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ2() { return GetToken(MiniSqlParserParser.NOT_EQ2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_GT() { return GetToken(MiniSqlParserParser.AT_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_LT() { return GetToken(MiniSqlParserParser.AT_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QRY_PIPE() { return GetToken(MiniSqlParserParser.QRY_PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QRY_AMP() { return GetToken(MiniSqlParserParser.QRY_AMP, 0); }
		public BinaryOpPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBinaryOpPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBinaryOpPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOpPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PhPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEHOLDER1() { return GetToken(MiniSqlParserParser.PLACEHOLDER1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEHOLDER2() { return GetToken(MiniSqlParserParser.PLACEHOLDER2, 0); }
		public PhPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPhPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPhPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IS() { return GetToken(MiniSqlParserParser.K_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NULL() { return GetToken(MiniSqlParserParser.K_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public IsNullPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIsNullPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIsNullPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollatePredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_COLLATE() { return GetToken(MiniSqlParserParser.K_COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public CollatePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCollatePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCollatePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollatePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 110;
		EnterRecursionRule(_localctx, 110, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				_localctx = new PhPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 932;
				Match(PLACEHOLDER1);
				}
				break;
			case 2:
				{
				_localctx = new PhPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 933;
				Match(PLACEHOLDER2);
				}
				break;
			case 3:
				{
				_localctx = new BinaryOpPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 934;
				expr(0);
				State = 935;
				((BinaryOpPredicateContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ))) != 0)) ) {
					((BinaryOpPredicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 936;
				expr(0);
				}
				break;
			case 4:
				{
				_localctx = new BinaryOpPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 938;
				expr(0);
				State = 939;
				((BinaryOpPredicateContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << EQ) | (1L << NOT_EQ1) | (1L << NOT_EQ2))) != 0)) ) {
					((BinaryOpPredicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 940;
				expr(0);
				}
				break;
			case 5:
				{
				_localctx = new BinaryOpPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 942;
				expr(0);
				State = 943;
				if (!(IsPostgreSql)) throw new FailedPredicateException(this, "IsPostgreSql");
				State = 944;
				((BinaryOpPredicateContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AT_GT) | (1L << AT_LT) | (1L << QRY_PIPE) | (1L << QRY_AMP))) != 0)) ) {
					((BinaryOpPredicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 945;
				expr(0);
				}
				break;
			case 6:
				{
				_localctx = new LikePredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 947;
				expr(0);
				State = 949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 948;
					Match(K_NOT);
					}
				}

				State = 951;
				((LikePredicateContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (K_GLOB - 90)) | (1L << (K_ILIKE - 90)) | (1L << (K_LIKE - 90)) | (1L << (K_MATCH - 90)) | (1L << (K_REGEXP - 90)))) != 0)) ) {
					((LikePredicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 952;
				expr(0);
				State = 955;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
				case 1:
					{
					State = 953;
					Match(K_ESCAPE);
					State = 954;
					expr(0);
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new IsNullPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 957;
				expr(0);
				State = 958;
				Match(K_IS);
				State = 960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 959;
					Match(K_NOT);
					}
				}

				State = 962;
				Match(K_NULL);
				}
				break;
			case 8:
				{
				_localctx = new IsPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 964;
				expr(0);
				State = 965;
				Match(K_IS);
				State = 967;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
				case 1:
					{
					State = 966;
					Match(K_NOT);
					}
					break;
				}
				State = 969;
				expr(0);
				}
				break;
			case 9:
				{
				_localctx = new BetweenPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 971;
				expr(0);
				State = 973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 972;
					Match(K_NOT);
					}
				}

				State = 975;
				Match(K_BETWEEN);
				State = 976;
				expr(0);
				State = 977;
				Match(K_AND);
				State = 978;
				expr(0);
				}
				break;
			case 10:
				{
				_localctx = new InPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 980;
				expr(0);
				State = 982;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 981;
					Match(K_NOT);
					}
				}

				State = 984;
				Match(K_IN);
				State = 985;
				Match(LPAR);
				State = 988;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
				case 1:
					{
					State = 986;
					exprs();
					}
					break;
				case 2:
					{
					State = 987;
					query();
					}
					break;
				}
				State = 990;
				Match(RPAR);
				}
				break;
			case 11:
				{
				_localctx = new SubQueryPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 992;
				expr(0);
				State = 993;
				((SubQueryPredicateContext)_localctx).op1 = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ) | (1L << EQ) | (1L << NOT_EQ1) | (1L << NOT_EQ2))) != 0)) ) {
					((SubQueryPredicateContext)_localctx).op1 = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 994;
				((SubQueryPredicateContext)_localctx).op2 = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==K_ALL || _la==K_ANY || _la==K_SOME) ) {
					((SubQueryPredicateContext)_localctx).op2 = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 995;
				Match(LPAR);
				State = 996;
				query();
				State = 997;
				Match(RPAR);
				}
				break;
			case 12:
				{
				_localctx = new ExistsPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 999;
				Match(K_EXISTS);
				State = 1000;
				Match(LPAR);
				State = 1001;
				query();
				State = 1002;
				Match(RPAR);
				}
				break;
			case 13:
				{
				_localctx = new NotPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1004;
				Match(K_NOT);
				State = 1005;
				predicate(4);
				}
				break;
			case 14:
				{
				_localctx = new BracketedPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1006;
				Match(LPAR);
				State = 1007;
				predicate(0);
				State = 1008;
				Match(RPAR);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1023;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1021;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
					case 1:
						{
						_localctx = new AndPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 1012;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1013;
						Match(K_AND);
						State = 1014;
						predicate(4);
						}
						break;
					case 2:
						{
						_localctx = new OrPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 1015;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1016;
						Match(K_OR);
						State = 1017;
						predicate(3);
						}
						break;
					case 3:
						{
						_localctx = new CollatePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 1018;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1019;
						Match(K_COLLATE);
						State = 1020;
						collation_name();
						}
						break;
					}
					} 
				}
				State = 1025;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExtractFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Extract_functionContext extract_function() {
			return GetRuleContext<Extract_functionContext>(0);
		}
		public ExtractFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterExtractFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitExtractFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractFuncExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Case1ExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CASE() { return GetToken(MiniSqlParserParser.K_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_END() { return GetToken(MiniSqlParserParser.K_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_WHEN() { return GetTokens(MiniSqlParserParser.K_WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WHEN(int i) {
			return GetToken(MiniSqlParserParser.K_WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_THEN() { return GetTokens(MiniSqlParserParser.K_THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_THEN(int i) {
			return GetToken(MiniSqlParserParser.K_THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ELSE() { return GetToken(MiniSqlParserParser.K_ELSE, 0); }
		public Case1ExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCase1Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCase1Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase1Expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColumnExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_JOIN() { return GetToken(MiniSqlParserParser.OUTER_JOIN, 0); }
		public ColumnExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterColumnExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitColumnExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubQueryExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		public SubQueryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSubQueryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSubQueryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubQueryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WindowFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_functionContext window_function() {
			return GetRuleContext<Window_functionContext>(0);
		}
		public WindowFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowFuncExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketedExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		public BracketedExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBracketedExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBracketedExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_functionContext generic_function() {
			return GetRuleContext<Generic_functionContext>(0);
		}
		public GenericFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterGenericFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitGenericFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericFuncExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostgreSqlCastExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public PostgreSqlCastExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPostgreSqlCastExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPostgreSqlCastExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostgreSqlCastExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SignedNumberExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINTEGER_LITERAL() { return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNUMERIC_LITERAL() { return GetToken(MiniSqlParserParser.UNUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniSqlParserParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniSqlParserParser.MINUS, 0); }
		public SignedNumberExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSignedNumberExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSignedNumberExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PhExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEHOLDER1() { return GetToken(MiniSqlParserParser.PLACEHOLDER1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEHOLDER2() { return GetToken(MiniSqlParserParser.PLACEHOLDER2, 0); }
		public PhExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPhExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPhExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_function1Context aggregate_function1() {
			return GetRuleContext<Aggregate_function1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_function2Context aggregate_function2() {
			return GetRuleContext<Aggregate_function2Context>(0);
		}
		public AggregateFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregateFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregateFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateFuncExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Case2ExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CASE() { return GetToken(MiniSqlParserParser.K_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_END() { return GetToken(MiniSqlParserParser.K_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_WHEN() { return GetTokens(MiniSqlParserParser.K_WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WHEN(int i) {
			return GetToken(MiniSqlParserParser.K_WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] K_THEN() { return GetTokens(MiniSqlParserParser.K_THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_THEN(int i) {
			return GetToken(MiniSqlParserParser.K_THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ELSE() { return GetToken(MiniSqlParserParser.K_ELSE, 0); }
		public Case2ExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCase2Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCase2Expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase2Expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseNotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(MiniSqlParserParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BitwiseNotExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBitwiseNotExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBitwiseNotExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstrFuncExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Substring_functionContext substring_function() {
			return GetRuleContext<Substring_functionContext>(0);
		}
		public SubstrFuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSubstrFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSubstrFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstrFuncExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CAST() { return GetToken(MiniSqlParserParser.K_CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		public CastExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCastExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCastExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOpExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE2() { return GetToken(MiniSqlParserParser.PIPE2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MiniSqlParserParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MiniSqlParserParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MiniSqlParserParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniSqlParserParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniSqlParserParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT2() { return GetToken(MiniSqlParserParser.LT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT2() { return GetToken(MiniSqlParserParser.GT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MiniSqlParserParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(MiniSqlParserParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(MiniSqlParserParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW2() { return GetToken(MiniSqlParserParser.ARROW2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S_GT() { return GetToken(MiniSqlParserParser.S_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S_GT2() { return GetToken(MiniSqlParserParser.S_GT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S_MINUS() { return GetToken(MiniSqlParserParser.S_MINUS, 0); }
		public BinaryOpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBinaryOpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBinaryOpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 112;
		EnterRecursionRule(_localctx, 112, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1093;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				{
				_localctx = new SignedNumberExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1027;
				((SignedNumberExprContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((SignedNumberExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1028;
				_la = TokenStream.LA(1);
				if ( !(_la==UINTEGER_LITERAL || _la==UNUMERIC_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1029;
				literal_value();
				}
				break;
			case 3:
				{
				_localctx = new PhExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1030;
				Match(PLACEHOLDER1);
				}
				break;
			case 4:
				{
				_localctx = new PhExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1031;
				Match(PLACEHOLDER2);
				}
				break;
			case 5:
				{
				_localctx = new ColumnExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1032;
				column_name();
				State = 1035;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
				case 1:
					{
					State = 1033;
					if (!(IsOracle)) throw new FailedPredicateException(this, "IsOracle");
					State = 1034;
					Match(OUTER_JOIN);
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new SubQueryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1037;
				Match(LPAR);
				State = 1038;
				query();
				State = 1039;
				Match(RPAR);
				}
				break;
			case 7:
				{
				_localctx = new BitwiseNotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1041;
				Match(TILDE);
				State = 1042;
				expr(16);
				}
				break;
			case 8:
				{
				_localctx = new SubstrFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1043;
				substring_function();
				}
				break;
			case 9:
				{
				_localctx = new ExtractFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1044;
				extract_function();
				}
				break;
			case 10:
				{
				_localctx = new AggregateFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1045;
				aggregate_function1();
				}
				break;
			case 11:
				{
				_localctx = new AggregateFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1046;
				aggregate_function2();
				}
				break;
			case 12:
				{
				_localctx = new WindowFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1047;
				window_function();
				}
				break;
			case 13:
				{
				_localctx = new GenericFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1048;
				generic_function();
				}
				break;
			case 14:
				{
				_localctx = new BracketedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1049;
				Match(LPAR);
				State = 1050;
				expr(0);
				State = 1051;
				Match(RPAR);
				}
				break;
			case 15:
				{
				_localctx = new CastExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1053;
				Match(K_CAST);
				State = 1054;
				Match(LPAR);
				State = 1055;
				expr(0);
				State = 1056;
				Match(K_AS);
				State = 1057;
				type_name();
				State = 1058;
				Match(RPAR);
				}
				break;
			case 16:
				{
				_localctx = new Case1ExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1060;
				Match(K_CASE);
				State = 1061;
				expr(0);
				State = 1067;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1062;
					Match(K_WHEN);
					State = 1063;
					expr(0);
					State = 1064;
					Match(K_THEN);
					State = 1065;
					expr(0);
					}
					}
					State = 1069;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==K_WHEN );
				State = 1073;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_ELSE) {
					{
					State = 1071;
					Match(K_ELSE);
					State = 1072;
					expr(0);
					}
				}

				State = 1075;
				Match(K_END);
				}
				break;
			case 17:
				{
				_localctx = new Case2ExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1077;
				Match(K_CASE);
				State = 1083;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1078;
					Match(K_WHEN);
					State = 1079;
					predicate(0);
					State = 1080;
					Match(K_THEN);
					State = 1081;
					expr(0);
					}
					}
					State = 1085;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==K_WHEN );
				State = 1089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_ELSE) {
					{
					State = 1087;
					Match(K_ELSE);
					State = 1088;
					expr(0);
					}
				}

				State = 1091;
				Match(K_END);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1116;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
					case 1:
						{
						_localctx = new BinaryOpExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1095;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1096;
						if (!(IsOracle || IsSQLite || IsPostgreSql)) throw new FailedPredicateException(this, "IsOracle || IsSQLite || IsPostgreSql");
						State = 1097;
						((BinaryOpExprContext)_localctx).op = Match(PIPE2);
						State = 1098;
						expr(16);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOpExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1099;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1100;
						((BinaryOpExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((BinaryOpExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1101;
						expr(15);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOpExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1102;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1103;
						((BinaryOpExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((BinaryOpExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1104;
						expr(14);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOpExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1105;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1106;
						((BinaryOpExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT2) | (1L << GT2) | (1L << AMP) | (1L << PIPE))) != 0)) ) {
							((BinaryOpExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1107;
						expr(13);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOpExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1108;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1109;
						if (!(IsPostgreSql)) throw new FailedPredicateException(this, "IsPostgreSql");
						State = 1110;
						((BinaryOpExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARROW) | (1L << ARROW2) | (1L << S_GT) | (1L << S_GT2) | (1L << S_MINUS))) != 0)) ) {
							((BinaryOpExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1111;
						expr(12);
						}
						break;
					case 6:
						{
						_localctx = new PostgreSqlCastExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1112;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1113;
						if (!(IsPostgreSql)) throw new FailedPredicateException(this, "IsPostgreSql");
						State = 1114;
						Match(T__0);
						State = 1115;
						type_name();
						}
						break;
					}
					} 
				}
				State = 1120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Substring_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SUBSTRING() { return GetToken(MiniSqlParserParser.K_SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SUBSTR() { return GetToken(MiniSqlParserParser.K_SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FROM() { return GetToken(MiniSqlParserParser.K_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FOR() { return GetToken(MiniSqlParserParser.K_FOR, 0); }
		public Substring_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substring_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSubstring_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSubstring_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstring_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Substring_functionContext substring_function() {
		Substring_functionContext _localctx = new Substring_functionContext(Context, State);
		EnterRule(_localctx, 114, RULE_substring_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			_la = TokenStream.LA(1);
			if ( !(_la==K_SUBSTR || _la==K_SUBSTRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1122;
			Match(LPAR);
			State = 1123;
			argument();
			State = 1124;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMA || _la==K_FROM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1125;
			argument();
			State = 1128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA || _la==K_FOR) {
				{
				State = 1126;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMA || _la==K_FOR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1127;
				argument();
				}
			}

			State = 1130;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_EXTRACT() { return GetToken(MiniSqlParserParser.K_EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatetimeFieldContext datetimeField() {
			return GetRuleContext<DatetimeFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniSqlParserParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FROM() { return GetToken(MiniSqlParserParser.K_FROM, 0); }
		public Extract_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterExtract_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitExtract_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtract_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extract_functionContext extract_function() {
		Extract_functionContext _localctx = new Extract_functionContext(Context, State);
		EnterRule(_localctx, 116, RULE_extract_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1132;
			Match(K_EXTRACT);
			State = 1133;
			Match(LPAR);
			State = 1134;
			datetimeField();
			State = 1135;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMA || _la==K_FROM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1136;
			argument();
			State = 1137;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_function1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_COUNT() { return GetToken(MiniSqlParserParser.K_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SUM() { return GetToken(MiniSqlParserParser.K_SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AVG() { return GetToken(MiniSqlParserParser.K_AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TOTAL() { return GetToken(MiniSqlParserParser.K_TOTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_COUNT_BIG() { return GetToken(MiniSqlParserParser.K_COUNT_BIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MiniSqlParserParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ALL() { return GetToken(MiniSqlParserParser.K_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DISTINCT() { return GetToken(MiniSqlParserParser.K_DISTINCT, 0); }
		public Aggregate_function1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_function1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_function1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_function1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_function1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_function1Context aggregate_function1() {
		Aggregate_function1Context _localctx = new Aggregate_function1Context(Context, State);
		EnterRule(_localctx, 118, RULE_aggregate_function1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 1139;
				Match(K_COUNT);
				}
				break;
			case 2:
				{
				State = 1140;
				Match(K_SUM);
				}
				break;
			case 3:
				{
				State = 1141;
				Match(K_AVG);
				}
				break;
			case 4:
				{
				State = 1142;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 1143;
				Match(K_TOTAL);
				}
				break;
			case 5:
				{
				State = 1144;
				if (!(IsMsSql || IsPervasive)) throw new FailedPredicateException(this, "IsMsSql || IsPervasive");
				State = 1145;
				Match(K_COUNT_BIG);
				}
				break;
			}
			State = 1148;
			Match(LPAR);
			State = 1150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				{
				State = 1149;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1152;
				argument();
				}
				break;
			case 2:
				{
				State = 1153;
				Match(STAR);
				}
				break;
			}
			State = 1156;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_function2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MAX() { return GetToken(MiniSqlParserParser.K_MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MIN() { return GetToken(MiniSqlParserParser.K_MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CORR() { return GetToken(MiniSqlParserParser.K_CORR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniSqlParserParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_GROUP_CONCAT() { return GetToken(MiniSqlParserParser.K_GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_STDDEV_POP() { return GetToken(MiniSqlParserParser.K_STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VAR_POP() { return GetToken(MiniSqlParserParser.K_VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_STDEVP() { return GetToken(MiniSqlParserParser.K_STDEVP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VAR() { return GetToken(MiniSqlParserParser.K_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VARP() { return GetToken(MiniSqlParserParser.K_VARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_STDEV() { return GetToken(MiniSqlParserParser.K_STDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VARIANCE() { return GetToken(MiniSqlParserParser.K_VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_STDDEV() { return GetToken(MiniSqlParserParser.K_STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MEDIAN() { return GetToken(MiniSqlParserParser.K_MEDIAN, 0); }
		public Aggregate_function2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_function2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_function2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_function2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_function2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_function2Context aggregate_function2() {
		Aggregate_function2Context _localctx = new Aggregate_function2Context(Context, State);
		EnterRule(_localctx, 120, RULE_aggregate_function2);
		int _la;
		try {
			State = 1217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1158;
				_la = TokenStream.LA(1);
				if ( !(_la==K_MAX || _la==K_MIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1159;
				Match(LPAR);
				State = 1160;
				argument();
				State = 1161;
				Match(RPAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1163;
				if (!(IsOracle || IsPostgreSql)) throw new FailedPredicateException(this, "IsOracle || IsPostgreSql");
				State = 1164;
				Match(K_CORR);
				State = 1165;
				Match(LPAR);
				State = 1166;
				argument();
				State = 1167;
				Match(COMMA);
				State = 1168;
				argument();
				State = 1169;
				Match(RPAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1171;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 1172;
				Match(K_GROUP_CONCAT);
				State = 1173;
				Match(LPAR);
				State = 1174;
				argument();
				State = 1177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1175;
					Match(COMMA);
					State = 1176;
					argument();
					}
				}

				State = 1179;
				Match(RPAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1181;
				if (!(IsOracle || IsPostgreSql || IsMySql)) throw new FailedPredicateException(this, "IsOracle || IsPostgreSql || IsMySql");
				State = 1182;
				_la = TokenStream.LA(1);
				if ( !(_la==K_STDDEV_POP || _la==K_VAR_POP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1183;
				Match(LPAR);
				State = 1184;
				argument();
				State = 1185;
				Match(RPAR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1187;
				if (!(IsMsSql  || IsPervasive )) throw new FailedPredicateException(this, "IsMsSql  || IsPervasive ");
				State = 1188;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (K_STDEVP - 158)) | (1L << (K_VAR - 158)) | (1L << (K_VARP - 158)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1189;
				Match(LPAR);
				State = 1190;
				argument();
				State = 1191;
				Match(RPAR);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1193;
				if (!(IsMsSql  || IsPervasive )) throw new FailedPredicateException(this, "IsMsSql  || IsPervasive ");
				State = 1194;
				Match(K_STDEV);
				State = 1195;
				Match(LPAR);
				State = 1196;
				argument();
				State = 1197;
				Match(RPAR);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1199;
				if (!(IsOracle || IsPostgreSql || IsMySql)) throw new FailedPredicateException(this, "IsOracle || IsPostgreSql || IsMySql");
				State = 1200;
				Match(K_VARIANCE);
				State = 1201;
				Match(LPAR);
				State = 1202;
				argument();
				State = 1203;
				Match(RPAR);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1205;
				if (!(IsOracle || IsPostgreSql || IsMySql)) throw new FailedPredicateException(this, "IsOracle || IsPostgreSql || IsMySql");
				State = 1206;
				Match(K_STDDEV);
				State = 1207;
				Match(LPAR);
				State = 1208;
				argument();
				State = 1209;
				Match(RPAR);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1211;
				if (!(IsOracle)) throw new FailedPredicateException(this, "IsOracle");
				State = 1212;
				Match(K_MEDIAN);
				State = 1213;
				Match(LPAR);
				State = 1214;
				argument();
				State = 1215;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAR() { return GetTokens(MiniSqlParserParser.LPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR(int i) {
			return GetToken(MiniSqlParserParser.LPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAR() { return GetTokens(MiniSqlParserParser.RPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR(int i) {
			return GetToken(MiniSqlParserParser.RPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OVER() { return GetToken(MiniSqlParserParser.K_OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderBy_clauseContext orderBy_clause() {
			return GetRuleContext<OrderBy_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MiniSqlParserParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionBy_clauseContext partitionBy_clause() {
			return GetRuleContext<PartitionBy_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ALL() { return GetToken(MiniSqlParserParser.K_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DISTINCT() { return GetToken(MiniSqlParserParser.K_DISTINCT, 0); }
		public Window_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_functionContext window_function() {
		Window_functionContext _localctx = new Window_functionContext(Context, State);
		EnterRule(_localctx, 122, RULE_window_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219;
			function_name();
			State = 1220;
			Match(LPAR);
			State = 1222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1221;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1224;
				arguments();
				}
				break;
			case 2:
				{
				State = 1225;
				Match(STAR);
				}
				break;
			}
			State = 1228;
			Match(RPAR);
			State = 1229;
			Match(K_OVER);
			State = 1230;
			Match(LPAR);
			State = 1232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_PARTITION) {
				{
				State = 1231;
				partitionBy_clause();
				}
			}

			State = 1234;
			orderBy_clause();
			State = 1235;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Generic_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterGeneric_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitGeneric_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_functionContext generic_function() {
		Generic_functionContext _localctx = new Generic_functionContext(Context, State);
		EnterRule(_localctx, 124, RULE_generic_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237;
			function_name();
			State = 1238;
			Match(LPAR);
			State = 1240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 1239;
				arguments();
				}
				break;
			}
			State = 1242;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_schema_nameContext : ParserRuleContext {
		public IdentifierContext s;
		public IdentifierContext d;
		public IdentifierContext n;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniSqlParserParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniSqlParserParser.DOT, i);
		}
		public Qualified_schema_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_schema_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterQualified_schema_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitQualified_schema_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_schema_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_schema_nameContext qualified_schema_name() {
		Qualified_schema_nameContext _localctx = new Qualified_schema_nameContext(Context, State);
		EnterRule(_localctx, 126, RULE_qualified_schema_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				State = 1247;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
				case 1:
					{
					State = 1244;
					_localctx.s = identifier();
					State = 1245;
					Match(DOT);
					}
					break;
				}
				State = 1249;
				_localctx.d = identifier();
				State = 1250;
				Match(DOT);
				}
				break;
			}
			State = 1254;
			_localctx.n = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_schema_nameContext qualified_schema_name() {
			return GetRuleContext<Qualified_schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MiniSqlParserParser.DOT, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 128, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				{
				State = 1256;
				qualified_schema_name();
				State = 1257;
				Match(DOT);
				}
				break;
			}
			State = 1261;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_schema_nameContext qualified_schema_name() {
			return GetRuleContext<Qualified_schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MiniSqlParserParser.DOT, 0); }
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 130, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				{
				State = 1263;
				qualified_schema_name();
				State = 1264;
				Match(DOT);
				}
				break;
			}
			State = 1268;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_schema_nameContext qualified_schema_name() {
			return GetRuleContext<Qualified_schema_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MiniSqlParserParser.DOT, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 132, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 1270;
				qualified_schema_name();
				State = 1271;
				Match(DOT);
				}
				break;
			}
			State = 1275;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MiniSqlParserParser.DOT, 0); }
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 134, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 1277;
				table_name();
				State = 1278;
				Match(DOT);
				}
				break;
			}
			State = 1282;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unqualified_column_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Unqualified_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualified_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterUnqualified_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitUnqualified_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnqualified_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unqualified_column_nameContext unqualified_column_name() {
		Unqualified_column_nameContext _localctx = new Unqualified_column_nameContext(Context, State);
		EnterRule(_localctx, 136, RULE_unqualified_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1284;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aliased_table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		public Aliased_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliased_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAliased_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAliased_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliased_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aliased_table_nameContext aliased_table_name() {
		Aliased_table_nameContext _localctx = new Aliased_table_nameContext(Context, State);
		EnterRule(_localctx, 138, RULE_aliased_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286;
			table_name();
			State = 1291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				{
				State = 1288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_AS) {
					{
					State = 1287;
					Match(K_AS);
					}
				}

				State = 1290;
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hinted_table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext table_hint() {
			return GetRuleContext<Table_hintContext>(0);
		}
		public Hinted_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hinted_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterHinted_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitHinted_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHinted_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hinted_table_nameContext hinted_table_name() {
		Hinted_table_nameContext _localctx = new Hinted_table_nameContext(Context, State);
		EnterRule(_localctx, 140, RULE_hinted_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293;
			table_name();
			State = 1295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				{
				State = 1294;
				table_hint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hinted_aliased_table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_table_nameContext aliased_table_name() {
			return GetRuleContext<Aliased_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext table_hint() {
			return GetRuleContext<Table_hintContext>(0);
		}
		public Hinted_aliased_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hinted_aliased_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterHinted_aliased_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitHinted_aliased_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHinted_aliased_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hinted_aliased_table_nameContext hinted_aliased_table_name() {
		Hinted_aliased_table_nameContext _localctx = new Hinted_aliased_table_nameContext(Context, State);
		EnterRule(_localctx, 142, RULE_hinted_aliased_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1297;
			aliased_table_name();
			State = 1299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				{
				State = 1298;
				table_hint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		public IToken h;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_INDEXED() { return GetToken(MiniSqlParserParser.K_INDEXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_BY() { return GetToken(MiniSqlParserParser.K_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WITH() { return GetToken(MiniSqlParserParser.K_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOLOCK() { return GetToken(MiniSqlParserParser.K_NOLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_READCOMMITTED() { return GetToken(MiniSqlParserParser.K_READCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_REPEATABLEREAD() { return GetToken(MiniSqlParserParser.K_REPEATABLEREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SERIALIZABLE() { return GetToken(MiniSqlParserParser.K_SERIALIZABLE, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(Context, State);
		EnterRule(_localctx, 144, RULE_table_hint);
		int _la;
		try {
			State = 1314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1301;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 1307;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_INDEXED:
					{
					State = 1302;
					Match(K_INDEXED);
					State = 1303;
					Match(K_BY);
					State = 1304;
					index_name();
					}
					break;
				case K_NOT:
					{
					State = 1305;
					Match(K_NOT);
					State = 1306;
					Match(K_INDEXED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1309;
				if (!(IsMsSql)) throw new FailedPredicateException(this, "IsMsSql");
				{
				State = 1310;
				Match(K_WITH);
				State = 1311;
				Match(LPAR);
				State = 1312;
				_localctx.h = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (K_NOLOCK - 123)) | (1L << (K_READCOMMITTED - 123)) | (1L << (K_REPEATABLEREAD - 123)) | (1L << (K_SERIALIZABLE - 123)))) != 0)) ) {
					_localctx.h = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1313;
				Match(RPAR);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(MiniSqlParserParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UINTEGER_LITERAL() { return GetTokens(MiniSqlParserParser.UINTEGER_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINTEGER_LITERAL(int i) {
			return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(MiniSqlParserParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniSqlParserParser.COMMA, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 146, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316;
			identifier();
			State = 1325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 1317;
				Match(LPAR);
				State = 1318;
				Match(UINTEGER_LITERAL);
				State = 1319;
				Match(RPAR);
				}
				break;
			case 2:
				{
				State = 1320;
				Match(LPAR);
				State = 1321;
				Match(UINTEGER_LITERAL);
				State = 1322;
				Match(COMMA);
				State = 1323;
				Match(UINTEGER_LITERAL);
				State = 1324;
				Match(RPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCollation_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCollation_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(Context, State);
		EnterRule(_localctx, 148, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1327;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraint_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterConstraint_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitConstraint_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constraint_nameContext constraint_name() {
		Constraint_nameContext _localctx = new Constraint_nameContext(Context, State);
		EnterRule(_localctx, 150, RULE_constraint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1329;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniSqlParserParser.IDENTIFIER, 0); }
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 152, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1331;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 154, RULE_column_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1333;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniSqlParserParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifiable_keywordContext identifiable_keyword() {
			return GetRuleContext<Identifiable_keywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 156, RULE_identifier);
		try {
			State = 1337;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1335;
				Match(IDENTIFIER);
				}
				break;
			case K_ABORT:
			case K_ANY:
			case K_ASC:
			case K_AVG:
			case K_BEGIN:
			case K_CAST:
			case K_COLLATE:
			case K_CONFLICT:
			case K_CONSTRAINT:
			case K_CORR:
			case K_COUNT:
			case K_COUNT_BIG:
			case K_CROSS:
			case K_DATE:
			case K_DAY:
			case K_DECLARE:
			case K_DEFAULT:
			case K_DESC:
			case K_DISTINCT:
			case K_DO:
			case K_ESCAPE:
			case K_EXEC:
			case K_EXECUTE:
			case K_EXTRACT:
			case K_FAIL:
			case K_FETCH:
			case K_FIRST:
			case K_FOR:
			case K_FULL:
			case K_GLOB:
			case K_GROUP_CONCAT:
			case K_HOUR:
			case K_IF:
			case K_IGNORE:
			case K_ILIKE:
			case K_INDEXED:
			case K_INNER:
			case K_INTERVAL:
			case K_LAST:
			case K_LEFT:
			case K_LIMIT:
			case K_LOCKED:
			case K_MATCH:
			case K_MATCHED:
			case K_MAX:
			case K_MEDIAN:
			case K_MIN:
			case K_MINUS:
			case K_MINUTE:
			case K_MONTH:
			case K_NATURAL:
			case K_NEXT:
			case K_NOLOCK:
			case K_NOTHING:
			case K_NOWAIT:
			case K_NULLS:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_ONLY:
			case K_OUTER:
			case K_OUTPUT:
			case K_OVER:
			case K_PRAGMA:
			case K_PARTITION:
			case K_READCOMMITTED:
			case K_RECURSIVE:
			case K_REGEXP:
			case K_REPEATABLEREAD:
			case K_REPLACE:
			case K_PERCENT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_ROWS:
			case K_SECOND:
			case K_SERIALIZABLE:
			case K_SIMILAR:
			case K_SKIP:
			case K_SOME:
			case K_SUM:
			case K_STDEVP:
			case K_STDDEV:
			case K_STDDEV_POP:
			case K_STDEV:
			case K_SUBSTR:
			case K_SUBSTRING:
			case K_TABLE:
			case K_TABLE_INFO:
			case K_TIES:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TO:
			case K_TOP:
			case K_TOTAL:
			case K_USING:
			case K_VAR:
			case K_VARIANCE:
			case K_VARP:
			case K_VAR_POP:
			case K_WAIT:
			case K_WITH:
			case K_YEAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1336;
				identifiable_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifiable_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ABORT() { return GetToken(MiniSqlParserParser.K_ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ANY() { return GetToken(MiniSqlParserParser.K_ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ASC() { return GetToken(MiniSqlParserParser.K_ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_AVG() { return GetToken(MiniSqlParserParser.K_AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_BEGIN() { return GetToken(MiniSqlParserParser.K_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CAST() { return GetToken(MiniSqlParserParser.K_CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_COLLATE() { return GetToken(MiniSqlParserParser.K_COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CONFLICT() { return GetToken(MiniSqlParserParser.K_CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CONSTRAINT() { return GetToken(MiniSqlParserParser.K_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CORR() { return GetToken(MiniSqlParserParser.K_CORR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_COUNT() { return GetToken(MiniSqlParserParser.K_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_COUNT_BIG() { return GetToken(MiniSqlParserParser.K_COUNT_BIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_CROSS() { return GetToken(MiniSqlParserParser.K_CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DATE() { return GetToken(MiniSqlParserParser.K_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DAY() { return GetToken(MiniSqlParserParser.K_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DECLARE() { return GetToken(MiniSqlParserParser.K_DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DEFAULT() { return GetToken(MiniSqlParserParser.K_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DESC() { return GetToken(MiniSqlParserParser.K_DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DISTINCT() { return GetToken(MiniSqlParserParser.K_DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DO() { return GetToken(MiniSqlParserParser.K_DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ESCAPE() { return GetToken(MiniSqlParserParser.K_ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_EXEC() { return GetToken(MiniSqlParserParser.K_EXEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_EXECUTE() { return GetToken(MiniSqlParserParser.K_EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_EXTRACT() { return GetToken(MiniSqlParserParser.K_EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FAIL() { return GetToken(MiniSqlParserParser.K_FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FETCH() { return GetToken(MiniSqlParserParser.K_FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FIRST() { return GetToken(MiniSqlParserParser.K_FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FOR() { return GetToken(MiniSqlParserParser.K_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_FULL() { return GetToken(MiniSqlParserParser.K_FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_GLOB() { return GetToken(MiniSqlParserParser.K_GLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_GROUP_CONCAT() { return GetToken(MiniSqlParserParser.K_GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_HOUR() { return GetToken(MiniSqlParserParser.K_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IF() { return GetToken(MiniSqlParserParser.K_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_IGNORE() { return GetToken(MiniSqlParserParser.K_IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ILIKE() { return GetToken(MiniSqlParserParser.K_ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_INDEXED() { return GetToken(MiniSqlParserParser.K_INDEXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_INNER() { return GetToken(MiniSqlParserParser.K_INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_INTERVAL() { return GetToken(MiniSqlParserParser.K_INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LAST() { return GetToken(MiniSqlParserParser.K_LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LEFT() { return GetToken(MiniSqlParserParser.K_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LIMIT() { return GetToken(MiniSqlParserParser.K_LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_LOCKED() { return GetToken(MiniSqlParserParser.K_LOCKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MATCH() { return GetToken(MiniSqlParserParser.K_MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MATCHED() { return GetToken(MiniSqlParserParser.K_MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MAX() { return GetToken(MiniSqlParserParser.K_MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MEDIAN() { return GetToken(MiniSqlParserParser.K_MEDIAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MIN() { return GetToken(MiniSqlParserParser.K_MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MINUS() { return GetToken(MiniSqlParserParser.K_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MINUTE() { return GetToken(MiniSqlParserParser.K_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MONTH() { return GetToken(MiniSqlParserParser.K_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NATURAL() { return GetToken(MiniSqlParserParser.K_NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NEXT() { return GetToken(MiniSqlParserParser.K_NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOLOCK() { return GetToken(MiniSqlParserParser.K_NOLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOTHING() { return GetToken(MiniSqlParserParser.K_NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NOWAIT() { return GetToken(MiniSqlParserParser.K_NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NULLS() { return GetToken(MiniSqlParserParser.K_NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OF() { return GetToken(MiniSqlParserParser.K_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OFFSET() { return GetToken(MiniSqlParserParser.K_OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ON() { return GetToken(MiniSqlParserParser.K_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ONLY() { return GetToken(MiniSqlParserParser.K_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OUTER() { return GetToken(MiniSqlParserParser.K_OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OUTPUT() { return GetToken(MiniSqlParserParser.K_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_OVER() { return GetToken(MiniSqlParserParser.K_OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_PRAGMA() { return GetToken(MiniSqlParserParser.K_PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_PARTITION() { return GetToken(MiniSqlParserParser.K_PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_READCOMMITTED() { return GetToken(MiniSqlParserParser.K_READCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_RECURSIVE() { return GetToken(MiniSqlParserParser.K_RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_REGEXP() { return GetToken(MiniSqlParserParser.K_REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_REPEATABLEREAD() { return GetToken(MiniSqlParserParser.K_REPEATABLEREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_REPLACE() { return GetToken(MiniSqlParserParser.K_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_PERCENT() { return GetToken(MiniSqlParserParser.K_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_RIGHT() { return GetToken(MiniSqlParserParser.K_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ROLLBACK() { return GetToken(MiniSqlParserParser.K_ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ROW() { return GetToken(MiniSqlParserParser.K_ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_ROWS() { return GetToken(MiniSqlParserParser.K_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SECOND() { return GetToken(MiniSqlParserParser.K_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SERIALIZABLE() { return GetToken(MiniSqlParserParser.K_SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SIMILAR() { return GetToken(MiniSqlParserParser.K_SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SKIP() { return GetToken(MiniSqlParserParser.K_SKIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SOME() { return GetToken(MiniSqlParserParser.K_SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SUM() { return GetToken(MiniSqlParserParser.K_SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_STDEVP() { return GetToken(MiniSqlParserParser.K_STDEVP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_STDDEV() { return GetToken(MiniSqlParserParser.K_STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_STDDEV_POP() { return GetToken(MiniSqlParserParser.K_STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_STDEV() { return GetToken(MiniSqlParserParser.K_STDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SUBSTR() { return GetToken(MiniSqlParserParser.K_SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SUBSTRING() { return GetToken(MiniSqlParserParser.K_SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TABLE() { return GetToken(MiniSqlParserParser.K_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TABLE_INFO() { return GetToken(MiniSqlParserParser.K_TABLE_INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TIES() { return GetToken(MiniSqlParserParser.K_TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TIME() { return GetToken(MiniSqlParserParser.K_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TIMESTAMP() { return GetToken(MiniSqlParserParser.K_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TO() { return GetToken(MiniSqlParserParser.K_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TOP() { return GetToken(MiniSqlParserParser.K_TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_TOTAL() { return GetToken(MiniSqlParserParser.K_TOTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_USING() { return GetToken(MiniSqlParserParser.K_USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VAR() { return GetToken(MiniSqlParserParser.K_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VARIANCE() { return GetToken(MiniSqlParserParser.K_VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VARP() { return GetToken(MiniSqlParserParser.K_VARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_VAR_POP() { return GetToken(MiniSqlParserParser.K_VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WAIT() { return GetToken(MiniSqlParserParser.K_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_WITH() { return GetToken(MiniSqlParserParser.K_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_YEAR() { return GetToken(MiniSqlParserParser.K_YEAR, 0); }
		public Identifiable_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiable_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifiable_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifiable_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiable_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifiable_keywordContext identifiable_keyword() {
		Identifiable_keywordContext _localctx = new Identifiable_keywordContext(Context, State);
		EnterRule(_localctx, 158, RULE_identifiable_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_ABORT) | (1L << K_ANY) | (1L << K_ASC) | (1L << K_AVG) | (1L << K_BEGIN) | (1L << K_CAST) | (1L << K_COLLATE) | (1L << K_CONFLICT) | (1L << K_CONSTRAINT) | (1L << K_CORR) | (1L << K_COUNT) | (1L << K_COUNT_BIG) | (1L << K_CROSS))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (K_DATE - 67)) | (1L << (K_DAY - 67)) | (1L << (K_DECLARE - 67)) | (1L << (K_DEFAULT - 67)) | (1L << (K_DESC - 67)) | (1L << (K_DISTINCT - 67)) | (1L << (K_DO - 67)) | (1L << (K_ESCAPE - 67)) | (1L << (K_EXEC - 67)) | (1L << (K_EXECUTE - 67)) | (1L << (K_EXTRACT - 67)) | (1L << (K_FAIL - 67)) | (1L << (K_FETCH - 67)) | (1L << (K_FIRST - 67)) | (1L << (K_FOR - 67)) | (1L << (K_FULL - 67)) | (1L << (K_GLOB - 67)) | (1L << (K_GROUP_CONCAT - 67)) | (1L << (K_HOUR - 67)) | (1L << (K_IF - 67)) | (1L << (K_IGNORE - 67)) | (1L << (K_ILIKE - 67)) | (1L << (K_INDEXED - 67)) | (1L << (K_INNER - 67)) | (1L << (K_INTERVAL - 67)) | (1L << (K_LAST - 67)) | (1L << (K_LEFT - 67)) | (1L << (K_LIMIT - 67)) | (1L << (K_LOCKED - 67)) | (1L << (K_MATCH - 67)) | (1L << (K_MATCHED - 67)) | (1L << (K_MAX - 67)) | (1L << (K_MEDIAN - 67)) | (1L << (K_MIN - 67)) | (1L << (K_MINUS - 67)) | (1L << (K_MINUTE - 67)) | (1L << (K_MONTH - 67)) | (1L << (K_NATURAL - 67)) | (1L << (K_NEXT - 67)) | (1L << (K_NOLOCK - 67)) | (1L << (K_NOTHING - 67)) | (1L << (K_NOWAIT - 67)) | (1L << (K_NULLS - 67)) | (1L << (K_OF - 67)) | (1L << (K_OFFSET - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (K_ON - 131)) | (1L << (K_ONLY - 131)) | (1L << (K_OUTER - 131)) | (1L << (K_OUTPUT - 131)) | (1L << (K_OVER - 131)) | (1L << (K_PRAGMA - 131)) | (1L << (K_PARTITION - 131)) | (1L << (K_READCOMMITTED - 131)) | (1L << (K_RECURSIVE - 131)) | (1L << (K_REGEXP - 131)) | (1L << (K_REPEATABLEREAD - 131)) | (1L << (K_REPLACE - 131)) | (1L << (K_PERCENT - 131)) | (1L << (K_RIGHT - 131)) | (1L << (K_ROLLBACK - 131)) | (1L << (K_ROW - 131)) | (1L << (K_ROWS - 131)) | (1L << (K_SECOND - 131)) | (1L << (K_SERIALIZABLE - 131)) | (1L << (K_SIMILAR - 131)) | (1L << (K_SKIP - 131)) | (1L << (K_SOME - 131)) | (1L << (K_SUM - 131)) | (1L << (K_STDEVP - 131)) | (1L << (K_STDDEV - 131)) | (1L << (K_STDDEV_POP - 131)) | (1L << (K_STDEV - 131)) | (1L << (K_SUBSTR - 131)) | (1L << (K_SUBSTRING - 131)) | (1L << (K_TABLE - 131)) | (1L << (K_TABLE_INFO - 131)) | (1L << (K_TIES - 131)) | (1L << (K_TIME - 131)) | (1L << (K_TIMESTAMP - 131)) | (1L << (K_TO - 131)) | (1L << (K_TOP - 131)) | (1L << (K_TOTAL - 131)) | (1L << (K_USING - 131)) | (1L << (K_VAR - 131)) | (1L << (K_VARIANCE - 131)) | (1L << (K_VARP - 131)) | (1L << (K_VAR_POP - 131)) | (1L << (K_WAIT - 131)) | (1L << (K_WITH - 131)) | (1L << (K_YEAR - 131)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MiniSqlParserParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINTEGER_LITERAL() { return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_NULL() { return GetToken(MiniSqlParserParser.K_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_LITERAL() { return GetToken(MiniSqlParserParser.DATE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_LITERAL() { return GetToken(MiniSqlParserParser.TIME_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_LITERAL() { return GetToken(MiniSqlParserParser.TIMESTAMP_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_LITERAL() { return GetToken(MiniSqlParserParser.INTERVAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNUMERIC_LITERAL() { return GetToken(MiniSqlParserParser.UNUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB_LITERAL() { return GetToken(MiniSqlParserParser.BLOB_LITERAL, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 160, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1341;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UINTEGER_LITERAL) | (1L << UNUMERIC_LITERAL) | (1L << DATE_LITERAL) | (1L << TIME_LITERAL) | (1L << TIMESTAMP_LITERAL) | (1L << INTERVAL_LITERAL) | (1L << STRING_LITERAL) | (1L << BLOB_LITERAL))) != 0) || _la==K_NULL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_YEAR() { return GetToken(MiniSqlParserParser.K_YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MONTH() { return GetToken(MiniSqlParserParser.K_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_DAY() { return GetToken(MiniSqlParserParser.K_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_HOUR() { return GetToken(MiniSqlParserParser.K_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_MINUTE() { return GetToken(MiniSqlParserParser.K_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode K_SECOND() { return GetToken(MiniSqlParserParser.K_SECOND, 0); }
		public DatetimeFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetimeField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterDatetimeField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitDatetimeField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSqlParserVisitor<TResult> typedVisitor = visitor as IMiniSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetimeField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeFieldContext datetimeField() {
		DatetimeFieldContext _localctx = new DatetimeFieldContext(Context, State);
		EnterRule(_localctx, 162, RULE_datetimeField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1343;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (K_DAY - 68)) | (1L << (K_HOUR - 68)) | (1L << (K_MINUTE - 68)) | (1L << (K_MONTH - 68)))) != 0) || _la==K_SECOND || _la==K_YEAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return stmt_sub_sempred((Stmt_subContext)_localctx, predIndex);
		case 12: return update_stmt_sempred((Update_stmtContext)_localctx, predIndex);
		case 13: return insert_stmt_sempred((Insert_stmtContext)_localctx, predIndex);
		case 15: return delete_stmt_sempred((Delete_stmtContext)_localctx, predIndex);
		case 16: return merge_stmt_sempred((Merge_stmtContext)_localctx, predIndex);
		case 19: return call_stmt_sempred((Call_stmtContext)_localctx, predIndex);
		case 27: return query_clause_sempred((Query_clauseContext)_localctx, predIndex);
		case 40: return join_clause_sempred((Join_clauseContext)_localctx, predIndex);
		case 41: return join_constraint_sempred((Join_constraintContext)_localctx, predIndex);
		case 42: return join_operator_sempred((Join_operatorContext)_localctx, predIndex);
		case 48: return declare_sempred((DeclareContext)_localctx, predIndex);
		case 52: return limit_clause_sempred((Limit_clauseContext)_localctx, predIndex);
		case 53: return for_update_clause_sempred((For_update_clauseContext)_localctx, predIndex);
		case 55: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 56: return expr_sempred((ExprContext)_localctx, predIndex);
		case 59: return aggregate_function1_sempred((Aggregate_function1Context)_localctx, predIndex);
		case 60: return aggregate_function2_sempred((Aggregate_function2Context)_localctx, predIndex);
		case 72: return table_hint_sempred((Table_hintContext)_localctx, predIndex);
		}
		return true;
	}
	private bool stmt_sub_sempred(Stmt_subContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return IsMySql || IsSQLite;
		case 1: return IsOracle || IsMsSql;
		case 2: return IsOracle || IsMySql || IsMsSql || IsPervasive;
		case 3: return IsOracle || IsMySql || IsMsSql || IsPostgreSql;
		case 4: return IsSQLite;
		}
		return true;
	}
	private bool update_stmt_sempred(Update_stmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return IsSQLite;
		case 6: return IsSQLite;
		case 7: return IsSQLite;
		case 8: return IsSQLite;
		case 9: return IsSQLite;
		case 10: return IsSQLite || IsMsSql;
		case 11: return IsOracle || IsMySql || IsPostgreSql || IsPervasive;
		case 12: return IsMsSql || IsPostgreSql;
		}
		return true;
	}
	private bool insert_stmt_sempred(Insert_stmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return IsSQLite;
		case 14: return IsSQLite;
		case 15: return IsSQLite;
		case 16: return IsSQLite;
		case 17: return IsSQLite;
		case 18: return IsPostgreSql;
		case 19: return IsPostgreSql;
		}
		return true;
	}
	private bool delete_stmt_sempred(Delete_stmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return IsMySql  || IsSQLite     || IsMsSql;
		case 21: return IsOracle || IsPostgreSql || IsPervasive;
		case 22: return IsMsSql;
		}
		return true;
	}
	private bool merge_stmt_sempred(Merge_stmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return IsMsSql;
		case 24: return IsOracle;
		}
		return true;
	}
	private bool call_stmt_sempred(Call_stmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return IsOracle;
		case 26: return IsMySql || IsPervasive;
		case 27: return IsMsSql;
		}
		return true;
	}
	private bool query_clause_sempred(Query_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return IsMsSql || IsPervasive;
		case 29: return IsMsSql;
		case 30: return Precpred(Context, 3);
		}
		return true;
	}
	private bool join_clause_sempred(Join_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return Precpred(Context, 1);
		case 32: return Precpred(Context, 3);
		}
		return true;
	}
	private bool join_constraint_sempred(Join_constraintContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return IsOracle || IsMySql || IsSQLite || IsPostgreSql || IsPervasive;
		}
		return true;
	}
	private bool join_operator_sempred(Join_operatorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return IsOracle || IsMySql || IsSQLite || IsPostgreSql;
		}
		return true;
	}
	private bool declare_sempred(DeclareContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return IsMsSql;
		}
		return true;
	}
	private bool limit_clause_sempred(Limit_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return IsMySql || IsSQLite || IsPostgreSql || IsPervasive;
		case 37: return IsOracle || IsMsSql;
		case 38: return IsOracle;
		case 39: return IsOracle;
		}
		return true;
	}
	private bool for_update_clause_sempred(For_update_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return IsOracle || IsMySql || IsPostgreSql;
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return IsPostgreSql;
		case 42: return Precpred(Context, 3);
		case 43: return Precpred(Context, 2);
		case 44: return Precpred(Context, 5);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return IsOracle;
		case 46: return Precpred(Context, 15);
		case 47: return IsOracle || IsSQLite || IsPostgreSql;
		case 48: return Precpred(Context, 14);
		case 49: return Precpred(Context, 13);
		case 50: return Precpred(Context, 12);
		case 51: return Precpred(Context, 11);
		case 52: return IsPostgreSql;
		case 53: return Precpred(Context, 17);
		case 54: return IsPostgreSql;
		}
		return true;
	}
	private bool aggregate_function1_sempred(Aggregate_function1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return IsSQLite;
		case 56: return IsMsSql || IsPervasive;
		}
		return true;
	}
	private bool aggregate_function2_sempred(Aggregate_function2Context _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return IsOracle || IsPostgreSql;
		case 58: return IsSQLite;
		case 59: return IsOracle || IsPostgreSql || IsMySql;
		case 60: return IsMsSql  || IsPervasive ;
		case 61: return IsMsSql  || IsPervasive ;
		case 62: return IsOracle || IsPostgreSql || IsMySql;
		case 63: return IsOracle || IsPostgreSql || IsMySql;
		case 64: return IsOracle;
		}
		return true;
	}
	private bool table_hint_sempred(Table_hintContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return IsSQLite;
		case 66: return IsMsSql;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xC7', '\x544', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\xB8', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xC2', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\xC5', '\v', '\b', '\x3', '\b', 
		'\x5', '\b', '\xC8', '\n', '\b', '\x3', '\t', '\a', '\t', '\xCB', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\xCE', '\v', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xD5', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xE6', '\n', '\f', '\x3', '\r', '\x5', '\r', '\xE9', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xED', '\n', '\r', '\x3', '\xE', '\x5', 
		'\xE', '\xF0', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x102', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x108', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x10F', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x113', '\n', '\xE', '\x3', '\xF', 
		'\x5', '\xF', '\x116', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x11A', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x135', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x13A', '\n', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x13D', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x142', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x14A', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x152', 
		'\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\x155', '\n', '\xF', '\x5', 
		'\xF', '\x157', '\n', '\xF', '\x3', '\x10', '\x5', '\x10', '\x15A', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x15E', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x162', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x167', '\n', '\x10', 
		'\x3', '\x11', '\x5', '\x11', '\x16A', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x16E', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x174', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x179', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x17D', '\n', '\x11', '\x3', 
		'\x12', '\x5', '\x12', '\x180', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x184', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x18A', '\n', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x194', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x198', '\n', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x19C', '\n', '\x12', '\x5', '\x12', '\x19E', 
		'\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x1AD', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\x1B4', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\x1B7', '\v', '\x15', '\x3', '\x15', '\x6', '\x15', '\x1BA', 
		'\n', '\x15', '\r', '\x15', '\xE', '\x15', '\x1BB', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x1C3', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x6', '\x15', '\x1C7', '\n', 
		'\x15', '\r', '\x15', '\xE', '\x15', '\x1C8', '\x3', '\x15', '\x3', '\x15', 
		'\x6', '\x15', '\x1CD', '\n', '\x15', '\r', '\x15', '\xE', '\x15', '\x1CE', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x1D6', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\x1DC', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\x1DF', '\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x1E4', '\n', '\x15', '\x5', '\x15', '\x1E6', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', 
		'\x1F5', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x1F8', '\v', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x1FC', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x207', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x20F', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x214', '\n', '\x1A', 
		'\f', '\x1A', '\xE', '\x1A', '\x217', '\v', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x21B', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\x224', '\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x227', 
		'\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x22C', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x235', 
		'\n', '\x1D', '\x5', '\x1D', '\x237', '\n', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x23C', '\n', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x23F', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x243', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x247', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x24C', '\n', '\x1D', '\x5', '\x1D', '\x24E', '\n', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x25D', '\n', '\x1D', 
		'\f', '\x1D', '\xE', '\x1D', '\x260', '\v', '\x1D', '\x5', '\x1D', '\x262', 
		'\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x267', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x26C', '\n', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x26F', '\n', 
		'\x1D', '\f', '\x1D', '\xE', '\x1D', '\x272', '\v', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x278', '\n', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x27B', '\n', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x280', '\n', '\x1F', '\f', 
		'\x1F', '\xE', '\x1F', '\x283', '\v', '\x1F', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x28B', '\n', 
		' ', '\x3', ' ', '\x5', ' ', '\x28E', '\n', ' ', '\x5', ' ', '\x290', 
		'\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x29A', '\n', '!', '\f', 
		'!', '\xE', '!', '\x29D', '\v', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\a', '\"', '\x2A3', '\n', '\"', '\f', '\"', '\xE', 
		'\"', '\x2A6', '\v', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\a', '#', '\x2AE', '\n', '#', '\f', '#', 
		'\xE', '#', '\x2B1', '\v', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\a', '$', '\x2B8', '\n', '$', '\f', '$', '\xE', '$', 
		'\x2BB', '\v', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\a', 
		'%', '\x2C1', '\n', '%', '\f', '%', '\xE', '%', '\x2C4', '\v', '%', '\x3', 
		'%', '\x3', '%', '\x3', '&', '\x3', '&', '\x5', '&', '\x2CA', '\n', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', '\x2CF', '\n', '\'', 
		'\f', '\'', '\xE', '\'', '\x2D2', '\v', '\'', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x2D6', '\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\a', 
		')', '\x2DB', '\n', ')', '\f', ')', '\xE', ')', '\x2DE', '\v', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x5', '*', '\x2E7', '\n', '*', '\x3', '*', '\x5', '*', '\x2EA', 
		'\n', '*', '\x5', '*', '\x2EC', '\n', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x2F5', 
		'\n', '*', '\a', '*', '\x2F7', '\n', '*', '\f', '*', '\xE', '*', '\x2FA', 
		'\v', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x5', '+', '\x301', '\n', '+', '\x3', ',', '\x3', ',', '\x5', ',', '\x305', 
		'\n', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x309', '\n', ',', '\x3', 
		',', '\x3', ',', '\x5', ',', '\x30D', '\n', ',', '\x3', ',', '\x3', ',', 
		'\x5', ',', '\x311', '\n', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x315', 
		'\n', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\a', '.', '\x322', '\n', '.', '\f', '.', '\xE', '.', '\x325', '\v', '.', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x32A', '\n', '/', '\x3', 
		'/', '\x5', '/', '\x32D', '\n', '/', '\x3', '/', '\x3', '/', '\x5', '/', 
		'\x331', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\a', '\x30', '\x338', '\n', '\x30', '\f', '\x30', 
		'\xE', '\x30', '\x33B', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x5', '\x31', '\x340', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x346', '\n', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x34C', 
		'\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', 
		'\x351', '\n', '\x33', '\a', '\x33', '\x353', '\n', '\x33', '\f', '\x33', 
		'\xE', '\x33', '\x356', '\v', '\x33', '\x3', '\x34', '\x3', '\x34', '\x5', 
		'\x34', '\x35A', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', 
		'\x3', '\x35', '\x5', '\x35', '\x360', '\n', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x5', '\x36', '\x36A', '\n', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x374', '\n', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', 
		'\x36', '\x37B', '\n', '\x36', '\x5', '\x36', '\x37D', '\n', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', 
		'\x36', '\x384', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x5', '\x36', '\x38A', '\n', '\x36', '\x5', '\x36', '\x38C', 
		'\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x5', '\x37', '\x392', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x5', '\x37', '\x397', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x5', '\x37', '\x39B', '\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\a', '\x38', '\x3A1', '\n', '\x38', '\f', '\x38', 
		'\xE', '\x38', '\x3A4', '\v', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x5', '\x39', '\x3B8', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x3BE', '\n', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x3C3', '\n', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x5', '\x39', '\x3CA', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x5', '\x39', '\x3D0', '\n', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x5', '\x39', '\x3D9', '\n', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x3DF', '\n', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x5', '\x39', '\x3F5', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\a', '\x39', '\x400', '\n', '\x39', '\f', '\x39', 
		'\xE', '\x39', '\x403', '\v', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x5', ':', '\x40E', '\n', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x6', ':', '\x42E', '\n', ':', '\r', ':', 
		'\xE', ':', '\x42F', '\x3', ':', '\x3', ':', '\x5', ':', '\x434', '\n', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x6', ':', '\x43E', '\n', ':', '\r', ':', 
		'\xE', ':', '\x43F', '\x3', ':', '\x3', ':', '\x5', ':', '\x444', '\n', 
		':', '\x3', ':', '\x3', ':', '\x5', ':', '\x448', '\n', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\a', ':', '\x45F', '\n', ':', '\f', ':', '\xE', 
		':', '\x462', '\v', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x46B', '\n', ';', '\x3', 
		';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x47D', '\n', '=', 
		'\x3', '=', '\x3', '=', '\x5', '=', '\x481', '\n', '=', '\x3', '=', '\x3', 
		'=', '\x5', '=', '\x485', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x5', '>', '\x49C', '\n', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x4C4', 
		'\n', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x4C9', '\n', 
		'?', '\x3', '?', '\x3', '?', '\x5', '?', '\x4CD', '\n', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x4D3', '\n', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', 
		'@', '\x4DB', '\n', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x5', '\x41', '\x4E2', '\n', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x4E7', '\n', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', 
		'\x42', '\x4EE', '\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x4F5', '\n', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x4FC', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x503', '\n', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x3', 
		'G', '\x5', 'G', '\x50B', '\n', 'G', '\x3', 'G', '\x5', 'G', '\x50E', 
		'\n', 'G', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x512', '\n', 'H', '\x3', 
		'I', '\x3', 'I', '\x5', 'I', '\x516', '\n', 'I', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x51E', '\n', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 
		'J', '\x525', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', 
		'\x530', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 
		'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x5', 
		'P', '\x53C', '\n', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', 
		'\x3', 'S', '\x3', 'S', '\x3', 'S', '\x2', '\x6', '\x38', 'R', 'p', 'r', 
		'T', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 
		't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\x2', '\x1E', '\x3', '\x2', 'R', 
		'S', '\x4', '\x2', '/', '/', 'K', 'K', '\x4', '\x2', '\x33', '\x33', 'J', 
		'J', '\x4', '\x2', 'X', 'X', 'm', 'm', '\x4', '\x2', '\b', '\b', '\x84', 
		'\x84', '\x3', '\x2', '\x96', '\x97', '\x4', '\x2', 'X', 'X', '|', '|', 
		'\x3', '\x2', '\x15', '\x18', '\x4', '\x2', '\t', '\t', '\x19', '\x1B', 
		'\x3', '\x2', '\"', '%', '\a', '\x2', '\\', '\\', '\x63', '\x63', 'o', 
		'o', 'r', 'r', '\x90', '\x90', '\x4', '\x2', '\t', '\t', '\x15', '\x1B', 
		'\x5', '\x2', '/', '/', '\x31', '\x31', '\x9E', '\x9E', '\x3', '\x2', 
		'\v', '\f', '\x3', '\x2', '&', '\'', '\x4', '\x2', '\n', '\n', '\xF', 
		'\x10', '\x3', '\x2', '\x11', '\x14', '\x3', '\x2', '\x1D', '!', '\x3', 
		'\x2', '\xA4', '\xA5', '\x4', '\x2', '\b', '\b', 'Z', 'Z', '\x4', '\x2', 
		'\b', '\b', 'Y', 'Y', '\x4', '\x2', 't', 't', 'w', 'w', '\x4', '\x2', 
		'\xA2', '\xA2', '\xB7', '\xB7', '\x5', '\x2', '\xA0', '\xA0', '\xB4', 
		'\xB4', '\xB6', '\xB6', '\x6', '\x2', '}', '}', '\x8E', '\x8E', '\x91', 
		'\x91', '\x9A', '\x9A', '\x1C', '\x2', '.', '.', '\x31', '\x31', '\x33', 
		'\x35', ':', '\x41', '\x45', 'H', 'J', 'L', 'P', 'P', 'R', 'S', 'U', 'Y', 
		'[', '\\', '^', '^', '`', '\x63', '\x65', '\x66', 'i', 'i', 'm', 'n', 
		'p', 'u', 'w', '}', '\x7F', '\x80', '\x82', '\x86', '\x89', '\x98', '\x9A', 
		'\x9A', '\x9C', '\xA7', '\xA9', '\xAE', '\xB2', '\xB2', '\xB4', '\xB8', 
		'\xBB', '\xBC', '\x4', '\x2', '&', '-', '\x81', '\x81', '\a', '\x2', '\x46', 
		'\x46', '`', '`', 'y', 'z', '\x98', '\x98', '\xBC', '\xBC', '\x2', '\x5DF', 
		'\x2', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x4', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\xAC', '\x3', '\x2', '\x2', '\x2', '\b', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xE', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x12', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x18', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x159', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x169', '\x3', '\x2', '\x2', '\x2', '\"', '\x17F', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x19F', '\x3', '\x2', '\x2', '\x2', '&', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x1E5', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x1E7', '\x3', '\x2', '\x2', '\x2', ',', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x200', '\x3', '\x2', '\x2', '\x2', '\x30', '\x20A', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x218', '\x3', '\x2', '\x2', '\x2', '\x36', '\x221', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x261', '\x3', '\x2', '\x2', '\x2', ':', '\x273', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x28F', '\x3', '\x2', '\x2', '\x2', '@', '\x291', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x44', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x2B4', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x2BC', '\x3', '\x2', '\x2', '\x2', 'J', '\x2C9', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x2CB', '\x3', '\x2', '\x2', '\x2', 'N', '\x2D5', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x2D7', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x2EB', '\x3', '\x2', '\x2', '\x2', 'T', '\x300', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x304', '\x3', '\x2', '\x2', '\x2', 'X', '\x318', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x31C', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x326', '\x3', '\x2', '\x2', '\x2', '^', '\x332', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x62', '\x341', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x34B', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x359', '\x3', '\x2', '\x2', '\x2', 'h', '\x35F', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x38B', '\x3', '\x2', '\x2', '\x2', 'l', '\x38D', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x39C', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x3F4', '\x3', '\x2', '\x2', '\x2', 'r', '\x447', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x463', '\x3', '\x2', '\x2', '\x2', 'v', '\x46E', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x47C', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x4C3', '\x3', '\x2', '\x2', '\x2', '|', '\x4C5', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x80', '\x4E6', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x4ED', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x4F4', '\x3', '\x2', '\x2', '\x2', '\x86', '\x4FB', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x502', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x506', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x508', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x90', '\x513', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x524', '\x3', '\x2', '\x2', '\x2', '\x94', '\x526', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x531', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x533', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x535', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x537', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x53B', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x53D', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x53F', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x541', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA7', '\x5', '\xE', '\b', '\x2', '\xA7', '\xA8', 
		'\a', '\x2', '\x2', '\x3', '\xA8', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xAA', '\x5', '\x14', '\v', '\x2', '\xAA', '\xAB', '\a', '\x2', 
		'\x2', '\x3', '\xAB', '\x5', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
		'\x5', '\x36', '\x1C', '\x2', '\xAD', '\xAE', '\a', '\x2', '\x2', '\x3', 
		'\xAE', '\a', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x5', 'p', 
		'\x39', '\x2', '\xB0', '\xB1', '\a', '\x2', '\x2', '\x3', '\xB1', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x5', 'r', ':', '\x2', '\xB3', 
		'\xB4', '\a', '\x2', '\x2', '\x3', '\xB4', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB8', '\x5', 'J', '&', '\x2', '\xB6', '\xB8', '\x5', 
		'p', '\x39', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBA', '\a', '\x2', '\x2', '\x3', '\xBA', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBC', '\x5', '\x14', '\v', '\x2', '\xBC', 
		'\xC3', '\x5', '\x10', '\t', '\x2', '\xBD', '\xBE', '\a', '\x4', '\x2', 
		'\x2', '\xBE', '\xBF', '\x5', '\x16', '\f', '\x2', '\xBF', '\xC0', '\x5', 
		'\x10', '\t', '\x2', '\xC0', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', '\x5', '\x12', '\n', 
		'\x2', '\xC7', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xF', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCB', '\a', '\x4', '\x2', '\x2', '\xCA', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\a', '\xC7', '\x2', '\x2', '\xD0', '\xD1', '\b', 
		'\n', '\x1', '\x2', '\xD1', '\x13', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD5', '\x5', '\x16', '\f', '\x2', '\xD3', '\xD5', '\x5', '\x30', '\x19', 
		'\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\x15', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xE6', '\x5', '\x18', '\r', '\x2', '\xD7', '\xE6', '\x5', '\x1A', '\xE', 
		'\x2', '\xD8', '\xE6', '\x5', '\x1C', '\xF', '\x2', '\xD9', '\xDA', '\x6', 
		'\f', '\x2', '\x2', '\xDA', '\xE6', '\x5', '\x1E', '\x10', '\x2', '\xDB', 
		'\xE6', '\x5', ' ', '\x11', '\x2', '\xDC', '\xDD', '\x6', '\f', '\x3', 
		'\x2', '\xDD', '\xE6', '\x5', '\"', '\x12', '\x2', '\xDE', '\xDF', '\x6', 
		'\f', '\x4', '\x2', '\xDF', '\xE6', '\x5', '(', '\x15', '\x2', '\xE0', 
		'\xE1', '\x6', '\f', '\x5', '\x2', '\xE1', '\xE6', '\x5', '*', '\x16', 
		'\x2', '\xE2', '\xE6', '\x5', ',', '\x17', '\x2', '\xE3', '\xE4', '\x6', 
		'\f', '\x6', '\x2', '\xE4', '\xE6', '\x5', '.', '\x18', '\x2', '\xE5', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE9', '\x5', '\x32', '\x1A', 
		'\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xEC', '\x5', '\x36', '\x1C', '\x2', '\xEB', '\xED', '\x5', 'l', '\x37', 
		'\x2', '\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\x19', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xF0', '\x5', '\x32', '\x1A', '\x2', '\xEF', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\x101', '\a', '\xB1', '\x2', '\x2', '\xF2', 
		'\xF3', '\x6', '\xE', '\a', '\x2', '\xF3', '\xF4', '\a', '\x87', '\x2', 
		'\x2', '\xF4', '\x102', '\a', '\x95', '\x2', '\x2', '\xF5', '\xF6', '\x6', 
		'\xE', '\b', '\x2', '\xF6', '\xF7', '\a', '\x87', '\x2', '\x2', '\xF7', 
		'\x102', '\a', '.', '\x2', '\x2', '\xF8', '\xF9', '\x6', '\xE', '\t', 
		'\x2', '\xF9', '\xFA', '\a', '\x87', '\x2', '\x2', '\xFA', '\x102', '\a', 
		'\x92', '\x2', '\x2', '\xFB', '\xFC', '\x6', '\xE', '\n', '\x2', '\xFC', 
		'\xFD', '\a', '\x87', '\x2', '\x2', '\xFD', '\x102', '\a', 'V', '\x2', 
		'\x2', '\xFE', '\xFF', '\x6', '\xE', '\v', '\x2', '\xFF', '\x100', '\a', 
		'\x87', '\x2', '\x2', '\x100', '\x102', '\a', '\x62', '\x2', '\x2', '\x101', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\x101', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\x6', '\xE', '\f', '\x2', '\x104', '\x108', 
		'\x5', '\x8E', 'H', '\x2', '\x105', '\x106', '\x6', '\xE', '\r', '\x2', 
		'\x106', '\x108', '\x5', '\x8C', 'G', '\x2', '\x107', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', '\x9B', '\x2', 
		'\x2', '\x10A', '\x10E', '\x5', '@', '!', '\x2', '\x10B', '\x10C', '\x6', 
		'\xE', '\xE', '\x2', '\x10C', '\x10D', '\a', 'Z', '\x2', '\x2', '\x10D', 
		'\x10F', '\x5', '\x8C', 'G', '\x2', '\x10E', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\a', '\xBA', '\x2', '\x2', 
		'\x111', '\x113', '\x5', 'p', '\x39', '\x2', '\x112', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x113', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x114', '\x116', '\x5', '\x32', '\x1A', 
		'\x2', '\x115', '\x114', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x119', '\a', 'g', '\x2', '\x2', '\x118', '\x11A', '\a', 'j', 
		'\x2', '\x2', '\x119', '\x118', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11C', '\x6', '\xF', '\xF', '\x2', '\x11C', '\x11D', '\a', 
		'g', '\x2', '\x2', '\x11D', '\x11E', '\a', '\x87', '\x2', '\x2', '\x11E', 
		'\x11F', '\a', '\x92', '\x2', '\x2', '\x11F', '\x135', '\a', 'j', '\x2', 
		'\x2', '\x120', '\x121', '\x6', '\xF', '\x10', '\x2', '\x121', '\x122', 
		'\a', 'g', '\x2', '\x2', '\x122', '\x123', '\a', '\x87', '\x2', '\x2', 
		'\x123', '\x124', '\a', '\x95', '\x2', '\x2', '\x124', '\x135', '\a', 
		'j', '\x2', '\x2', '\x125', '\x126', '\x6', '\xF', '\x11', '\x2', '\x126', 
		'\x127', '\a', 'g', '\x2', '\x2', '\x127', '\x128', '\a', '\x87', '\x2', 
		'\x2', '\x128', '\x129', '\a', '.', '\x2', '\x2', '\x129', '\x135', '\a', 
		'j', '\x2', '\x2', '\x12A', '\x12B', '\x6', '\xF', '\x12', '\x2', '\x12B', 
		'\x12C', '\a', 'g', '\x2', '\x2', '\x12C', '\x12D', '\a', '\x87', '\x2', 
		'\x2', '\x12D', '\x12E', '\a', 'V', '\x2', '\x2', '\x12E', '\x135', '\a', 
		'j', '\x2', '\x2', '\x12F', '\x130', '\x6', '\xF', '\x13', '\x2', '\x130', 
		'\x131', '\a', 'g', '\x2', '\x2', '\x131', '\x132', '\a', '\x87', '\x2', 
		'\x2', '\x132', '\x133', '\a', '\x62', '\x2', '\x2', '\x133', '\x135', 
		'\a', 'j', '\x2', '\x2', '\x134', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x134', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x125', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x134', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x139', '\x3', '\x2', '\x2', '\x2', '\x136', '\x13A', 
		'\x5', '\x86', '\x44', '\x2', '\x137', '\x138', '\x6', '\xF', '\x14', 
		'\x2', '\x138', '\x13A', '\x5', '\x8C', 'G', '\x2', '\x139', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13D', '\x5', 
		'\x44', '#', '\x2', '\x13C', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x13F', '\a', '\xB3', '\x2', '\x2', '\x13F', '\x142', 
		'\x5', '\x46', '$', '\x2', '\x140', '\x142', '\x5', '\x36', '\x1C', '\x2', 
		'\x141', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x141', '\x140', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x156', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x144', '\x6', '\xF', '\x15', '\x2', '\x144', '\x149', '\a', '\x85', 
		'\x2', '\x2', '\x145', '\x146', '\a', '<', '\x2', '\x2', '\x146', '\x14A', 
		'\x5', '\x44', '#', '\x2', '\x147', '\x148', '\a', '=', '\x2', '\x2', 
		'\x148', '\x14A', '\x5', '\x98', 'M', '\x2', '\x149', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x147', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x154', '\a', 'L', '\x2', 
		'\x2', '\x14C', '\x14D', '\a', '\xB1', '\x2', '\x2', '\x14D', '\x14E', 
		'\a', '\x9B', '\x2', '\x2', '\x14E', '\x151', '\x5', '@', '!', '\x2', 
		'\x14F', '\x150', '\a', '\xBA', '\x2', '\x2', '\x150', '\x152', '\x5', 
		'p', '\x39', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x152', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x155', '\a', '\x7F', '\x2', '\x2', '\x154', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x157', '\x3', '\x2', '\x2', '\x2', '\x156', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x158', '\x15A', '\x5', '\x32', '\x1A', 
		'\x2', '\x159', '\x158', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x15D', '\a', '\x92', '\x2', '\x2', '\x15C', '\x15E', '\a', 
		'j', '\x2', '\x2', '\x15D', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x161', '\x5', '\x86', '\x44', '\x2', '\x160', '\x162', 
		'\x5', '\x44', '#', '\x2', '\x161', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x162', '\x3', '\x2', '\x2', '\x2', '\x162', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x163', '\x164', '\a', '\xB3', '\x2', '\x2', '\x164', 
		'\x167', '\x5', '\x46', '$', '\x2', '\x165', '\x167', '\x5', '\x36', '\x1C', 
		'\x2', '\x166', '\x163', '\x3', '\x2', '\x2', '\x2', '\x166', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x16A', '\x5', '\x32', '\x1A', '\x2', '\x169', '\x168', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16D', '\a', 'I', '\x2', 
		'\x2', '\x16C', '\x16E', '\a', 'Z', '\x2', '\x2', '\x16D', '\x16C', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', '\x6', '\x11', 
		'\x16', '\x2', '\x170', '\x174', '\x5', '\x8E', 'H', '\x2', '\x171', '\x172', 
		'\x6', '\x11', '\x17', '\x2', '\x172', '\x174', '\x5', '\x8C', 'G', '\x2', 
		'\x173', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x173', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x178', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x176', '\x6', '\x11', '\x18', '\x2', '\x176', '\x177', '\a', 'Z', '\x2', 
		'\x2', '\x177', '\x179', '\x5', '\x8C', 'G', '\x2', '\x178', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', '\a', 
		'\xBA', '\x2', '\x2', '\x17B', '\x17D', '\x5', 'p', '\x39', '\x2', '\x17C', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '!', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x180', '\x5', 
		'\x32', '\x1A', '\x2', '\x17F', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x180', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x183', '\a', 'v', '\x2', '\x2', '\x182', '\x184', '\a', 
		'j', '\x2', '\x2', '\x183', '\x182', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x186', '\x5', '\x8C', 'G', '\x2', '\x186', '\x189', 
		'\a', '\xB2', '\x2', '\x2', '\x187', '\x18A', '\x5', '\x8C', 'G', '\x2', 
		'\x188', '\x18A', '\x5', ':', '\x1E', '\x2', '\x189', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x193', '\a', '\x85', '\x2', 
		'\x2', '\x18C', '\x18D', '\x6', '\x12', '\x19', '\x2', '\x18D', '\x194', 
		'\x5', 'p', '\x39', '\x2', '\x18E', '\x18F', '\x6', '\x12', '\x1A', '\x2', 
		'\x18F', '\x190', '\a', '\x6', '\x2', '\x2', '\x190', '\x191', '\x5', 
		'p', '\x39', '\x2', '\x191', '\x192', '\a', '\a', '\x2', '\x2', '\x192', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x193', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x194', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x197', '\x5', '$', '\x13', '\x2', 
		'\x196', '\x198', '\x5', '&', '\x14', '\x2', '\x197', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x197', '\x198', '\x3', '\x2', '\x2', '\x2', '\x198', 
		'\x19E', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19B', '\x5', '&', '\x14', 
		'\x2', '\x19A', '\x19C', '\x5', '$', '\x13', '\x2', '\x19B', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x19D', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x1A0', '\a', '\xB9', '\x2', '\x2', '\x1A0', '\x1A1', 
		'\a', 's', '\x2', '\x2', '\x1A1', '\x1A2', '\a', '\xA8', '\x2', '\x2', 
		'\x1A2', '\x1A3', '\a', '\xB1', '\x2', '\x2', '\x1A3', '\x1A4', '\a', 
		'\x9B', '\x2', '\x2', '\x1A4', '\x1A5', '\x5', '@', '!', '\x2', '\x1A5', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\a', '\xB9', '\x2', 
		'\x2', '\x1A7', '\x1A8', '\a', '~', '\x2', '\x2', '\x1A8', '\x1A9', '\a', 
		's', '\x2', '\x2', '\x1A9', '\x1AA', '\a', '\xA8', '\x2', '\x2', '\x1AA', 
		'\x1AC', '\a', 'g', '\x2', '\x2', '\x1AB', '\x1AD', '\x5', '\x42', '\"', 
		'\x2', '\x1AC', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AF', '\a', '\xB3', '\x2', '\x2', '\x1AF', '\x1B0', '\x5', 
		'H', '%', '\x2', '\x1B0', '\'', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B5', 
		'\x6', '\x15', '\x1B', '\x2', '\x1B2', '\x1B4', '\x5', '\x62', '\x32', 
		'\x2', '\x1B3', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B9', '\x3', 
		'\x2', '\x2', '\x2', '\x1B7', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1BA', '\a', '\x4', '\x2', '\x2', '\x1B9', '\x1B8', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\a', 
		'\x35', '\x2', '\x2', '\x1BE', '\x1BF', '\a', '\x38', '\x2', '\x2', '\x1BF', 
		'\x1C0', '\x5', '\x82', '\x42', '\x2', '\x1C0', '\x1C2', '\a', '\x6', 
		'\x2', '\x2', '\x1C1', '\x1C3', '\x5', 'L', '\'', '\x2', '\x1C2', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C6', '\a', 
		'\a', '\x2', '\x2', '\x1C5', '\x1C7', '\a', '\x4', '\x2', '\x2', '\x1C6', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', 
		'\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1CA', '\x1CC', '\a', 'O', '\x2', '\x2', '\x1CB', '\x1CD', '\a', '\x4', 
		'\x2', '\x2', '\x1CC', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CE', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x6', '\x15', '\x1C', '\x2', '\x1D1', 
		'\x1D2', '\a', '\x38', '\x2', '\x2', '\x1D2', '\x1D3', '\x5', '\x82', 
		'\x42', '\x2', '\x1D3', '\x1D5', '\a', '\x6', '\x2', '\x2', '\x1D4', '\x1D6', 
		'\x5', 'L', '\'', '\x2', '\x1D5', '\x1D4', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\x3', 
		'\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\a', '\a', '\x2', '\x2', '\x1D8', 
		'\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DD', '\x6', '\x15', 
		'\x1D', '\x2', '\x1DA', '\x1DC', '\x5', '\x62', '\x32', '\x2', '\x1DB', 
		'\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DF', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1E0', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\t', 
		'\x2', '\x2', '\x2', '\x1E1', '\x1E3', '\x5', '\x82', '\x42', '\x2', '\x1E2', 
		'\x1E4', '\x5', '\x64', '\x33', '\x2', '\x1E3', '\x1E2', '\x3', '\x2', 
		'\x2', '\x2', '\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1E5', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1D9', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', ')', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1E8', '\a', '\xAF', '\x2', '\x2', '\x1E8', '\x1E9', '\a', '\xA6', '\x2', 
		'\x2', '\x1E9', '\x1EA', '\x5', '\x86', '\x44', '\x2', '\x1EA', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\a', '\x61', '\x2', '\x2', '\x1EC', 
		'\x1ED', '\x5', 'p', '\x39', '\x2', '\x1ED', '\x1EE', '\a', '\xA8', '\x2', 
		'\x2', '\x1EE', '\x1F6', '\x5', '\xE', '\b', '\x2', '\x1EF', '\x1F0', 
		'\a', 'N', '\x2', '\x2', '\x1F0', '\x1F1', '\x5', 'p', '\x39', '\x2', 
		'\x1F1', '\x1F2', '\a', '\xA8', '\x2', '\x2', '\x1F2', '\x1F3', '\x5', 
		'\xE', '\b', '\x2', '\x1F3', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F4', 
		'\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F8', '\x3', '\x2', '\x2', 
		'\x2', '\x1F6', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', 
		'\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x1F8', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\a', 
		'M', '\x2', '\x2', '\x1FA', '\x1FC', '\x5', '\xE', '\b', '\x2', '\x1FB', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x3', '\x2', '\x2', 
		'\x2', '\x1FC', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', 
		'\a', 'O', '\x2', '\x2', '\x1FE', '\x1FF', '\a', '\x61', '\x2', '\x2', 
		'\x1FF', '-', '\x3', '\x2', '\x2', '\x2', '\x200', '\x201', '\a', '\x8C', 
		'\x2', '\x2', '\x201', '\x202', '\a', '\xA7', '\x2', '\x2', '\x202', '\x206', 
		'\a', '\x6', '\x2', '\x2', '\x203', '\x207', '\a', '\xBD', '\x2', '\x2', 
		'\x204', '\x207', '\a', '\xBE', '\x2', '\x2', '\x205', '\x207', '\x5', 
		'\x86', '\x44', '\x2', '\x206', '\x203', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x204', '\x3', '\x2', '\x2', '\x2', '\x206', '\x205', '\x3', '\x2', '\x2', 
		'\x2', '\x207', '\x208', '\x3', '\x2', '\x2', '\x2', '\x208', '\x209', 
		'\a', '\a', '\x2', '\x2', '\x209', '/', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x20C', '\x20E', '\a', '\xBB', '\x2', '\x2', '\x20D', '\x20F', 
		'\a', '\x8F', '\x2', '\x2', '\x20E', '\x20D', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', '\x3', 
		'\x2', '\x2', '\x2', '\x210', '\x215', '\x5', '\x34', '\x1B', '\x2', '\x211', 
		'\x212', '\a', '\b', '\x2', '\x2', '\x212', '\x214', '\x5', '\x34', '\x1B', 
		'\x2', '\x213', '\x211', '\x3', '\x2', '\x2', '\x2', '\x214', '\x217', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x213', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x216', '\x3', '\x2', '\x2', '\x2', '\x216', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x217', '\x215', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x21A', '\x5', '\x86', '\x44', '\x2', '\x219', '\x21B', '\x5', '\x44', 
		'#', '\x2', '\x21A', '\x219', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x21D', '\a', '\x32', '\x2', '\x2', '\x21D', '\x21E', '\a', 
		'\x6', '\x2', '\x2', '\x21E', '\x21F', '\x5', '\x36', '\x1C', '\x2', '\x21F', 
		'\x220', '\a', '\a', '\x2', '\x2', '\x220', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '\x223', '\x5', '\x38', '\x1D', '\x2', '\x222', '\x224', 
		'\x5', 'Z', '.', '\x2', '\x223', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x223', '\x224', '\x3', '\x2', '\x2', '\x2', '\x224', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x225', '\x227', '\x5', 'j', '\x36', '\x2', '\x226', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x226', '\x227', '\x3', '\x2', '\x2', 
		'\x2', '\x227', '\x37', '\x3', '\x2', '\x2', '\x2', '\x228', '\x229', 
		'\b', '\x1D', '\x1', '\x2', '\x229', '\x22B', '\a', '\x99', '\x2', '\x2', 
		'\x22A', '\x22C', '\t', '\x3', '\x2', '\x2', '\x22B', '\x22A', '\x3', 
		'\x2', '\x2', '\x2', '\x22B', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22C', 
		'\x236', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\x6', '\x1D', 
		'\x1E', '\x2', '\x22E', '\x234', '\a', '\xAD', '\x2', '\x2', '\x22F', 
		'\x235', '\a', '&', '\x2', '\x2', '\x230', '\x231', '\x6', '\x1D', '\x1F', 
		'\x2', '\x231', '\x232', '\a', '\x6', '\x2', '\x2', '\x232', '\x233', 
		'\a', '&', '\x2', '\x2', '\x233', '\x235', '\a', '\a', '\x2', '\x2', '\x234', 
		'\x22F', '\x3', '\x2', '\x2', '\x2', '\x234', '\x230', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x237', '\x3', '\x2', '\x2', '\x2', '\x236', '\x22D', 
		'\x3', '\x2', '\x2', '\x2', '\x236', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x238', '\x23B', '\a', 
		'\n', '\x2', '\x2', '\x239', '\x23A', '\a', '\b', '\x2', '\x2', '\x23A', 
		'\x23C', '\x5', '<', '\x1F', '\x2', '\x23B', '\x239', '\x3', '\x2', '\x2', 
		'\x2', '\x23B', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23F', 
		'\x3', '\x2', '\x2', '\x2', '\x23D', '\x23F', '\x5', '<', '\x1F', '\x2', 
		'\x23E', '\x238', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x23D', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', '\x242', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x241', '\a', 'Z', '\x2', '\x2', '\x241', '\x243', '\x5', 'R', '*', '\x2', 
		'\x242', '\x240', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\x3', 
		'\x2', '\x2', '\x2', '\x243', '\x246', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x245', '\a', '\xBA', '\x2', '\x2', '\x245', '\x247', '\x5', 'p', '\x39', 
		'\x2', '\x246', '\x244', '\x3', '\x2', '\x2', '\x2', '\x246', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x247', '\x24D', '\x3', '\x2', '\x2', '\x2', 
		'\x248', '\x24B', '\x5', 'X', '-', '\x2', '\x249', '\x24A', '\a', '_', 
		'\x2', '\x2', '\x24A', '\x24C', '\x5', 'p', '\x39', '\x2', '\x24B', '\x249', 
		'\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x248', '\x3', 
		'\x2', '\x2', '\x2', '\x24D', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x262', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\a', '\x6', '\x2', 
		'\x2', '\x250', '\x251', '\x5', '\x38', '\x1D', '\x2', '\x251', '\x252', 
		'\a', '\a', '\x2', '\x2', '\x252', '\x262', '\x3', '\x2', '\x2', '\x2', 
		'\x253', '\x254', '\a', '\xB3', '\x2', '\x2', '\x254', '\x255', '\a', 
		'\x6', '\x2', '\x2', '\x255', '\x256', '\x5', 'L', '\'', '\x2', '\x256', 
		'\x25E', '\a', '\a', '\x2', '\x2', '\x257', '\x258', '\a', '\b', '\x2', 
		'\x2', '\x258', '\x259', '\a', '\x6', '\x2', '\x2', '\x259', '\x25A', 
		'\x5', 'L', '\'', '\x2', '\x25A', '\x25B', '\a', '\a', '\x2', '\x2', '\x25B', 
		'\x25D', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x257', '\x3', '\x2', '\x2', 
		'\x2', '\x25D', '\x260', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25C', 
		'\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'\x25F', '\x262', '\x3', '\x2', '\x2', '\x2', '\x260', '\x25E', '\x3', 
		'\x2', '\x2', '\x2', '\x261', '\x228', '\x3', '\x2', '\x2', '\x2', '\x261', 
		'\x24F', '\x3', '\x2', '\x2', '\x2', '\x261', '\x253', '\x3', '\x2', '\x2', 
		'\x2', '\x262', '\x270', '\x3', '\x2', '\x2', '\x2', '\x263', '\x26B', 
		'\f', '\x5', '\x2', '\x2', '\x264', '\x266', '\a', '\xB0', '\x2', '\x2', 
		'\x265', '\x267', '\a', '/', '\x2', '\x2', '\x266', '\x265', '\x3', '\x2', 
		'\x2', '\x2', '\x266', '\x267', '\x3', '\x2', '\x2', '\x2', '\x267', '\x26C', 
		'\x3', '\x2', '\x2', '\x2', '\x268', '\x26C', '\a', 'h', '\x2', '\x2', 
		'\x269', '\x26C', '\a', 'Q', '\x2', '\x2', '\x26A', '\x26C', '\a', 'x', 
		'\x2', '\x2', '\x26B', '\x264', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x268', 
		'\x3', '\x2', '\x2', '\x2', '\x26B', '\x269', '\x3', '\x2', '\x2', '\x2', 
		'\x26B', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', '\x3', 
		'\x2', '\x2', '\x2', '\x26D', '\x26F', '\x5', '\x38', '\x1D', '\x6', '\x26E', 
		'\x263', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x272', '\x3', '\x2', '\x2', 
		'\x2', '\x270', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x270', '\x271', 
		'\x3', '\x2', '\x2', '\x2', '\x271', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x272', '\x270', '\x3', '\x2', '\x2', '\x2', '\x273', '\x274', '\a', 
		'\x6', '\x2', '\x2', '\x274', '\x275', '\x5', '\x36', '\x1C', '\x2', '\x275', 
		'\x27A', '\a', '\a', '\x2', '\x2', '\x276', '\x278', '\a', '\x32', '\x2', 
		'\x2', '\x277', '\x276', '\x3', '\x2', '\x2', '\x2', '\x277', '\x278', 
		'\x3', '\x2', '\x2', '\x2', '\x278', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'\x279', '\x27B', '\x5', '\x9A', 'N', '\x2', '\x27A', '\x277', '\x3', 
		'\x2', '\x2', '\x2', '\x27A', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27B', 
		';', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x281', '\x5', '>', ' ', '\x2', 
		'\x27D', '\x27E', '\a', '\b', '\x2', '\x2', '\x27E', '\x280', '\x5', '>', 
		' ', '\x2', '\x27F', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x280', '\x283', 
		'\x3', '\x2', '\x2', '\x2', '\x281', '\x27F', '\x3', '\x2', '\x2', '\x2', 
		'\x281', '\x282', '\x3', '\x2', '\x2', '\x2', '\x282', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x283', '\x281', '\x3', '\x2', '\x2', '\x2', '\x284', '\x285', 
		'\x5', '\x86', '\x44', '\x2', '\x285', '\x286', '\a', '\x5', '\x2', '\x2', 
		'\x286', '\x287', '\a', '\n', '\x2', '\x2', '\x287', '\x290', '\x3', '\x2', 
		'\x2', '\x2', '\x288', '\x28D', '\x5', 'r', ':', '\x2', '\x289', '\x28B', 
		'\a', '\x32', '\x2', '\x2', '\x28A', '\x289', '\x3', '\x2', '\x2', '\x2', 
		'\x28A', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28C', '\x3', 
		'\x2', '\x2', '\x2', '\x28C', '\x28E', '\x5', '\x9C', 'O', '\x2', '\x28D', 
		'\x28A', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\x3', '\x2', '\x2', 
		'\x2', '\x28E', '\x290', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x284', 
		'\x3', '\x2', '\x2', '\x2', '\x28F', '\x288', '\x3', '\x2', '\x2', '\x2', 
		'\x290', '?', '\x3', '\x2', '\x2', '\x2', '\x291', '\x292', '\x5', '\x88', 
		'\x45', '\x2', '\x292', '\x293', '\a', '\t', '\x2', '\x2', '\x293', '\x29B', 
		'\x5', 'J', '&', '\x2', '\x294', '\x295', '\a', '\b', '\x2', '\x2', '\x295', 
		'\x296', '\x5', '\x88', '\x45', '\x2', '\x296', '\x297', '\a', '\t', '\x2', 
		'\x2', '\x297', '\x298', '\x5', 'J', '&', '\x2', '\x298', '\x29A', '\x3', 
		'\x2', '\x2', '\x2', '\x299', '\x294', '\x3', '\x2', '\x2', '\x2', '\x29A', 
		'\x29D', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x299', '\x3', '\x2', '\x2', 
		'\x2', '\x29B', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29B', '\x3', '\x2', '\x2', '\x2', 
		'\x29E', '\x29F', '\a', '\x6', '\x2', '\x2', '\x29F', '\x2A4', '\x5', 
		'\x88', '\x45', '\x2', '\x2A0', '\x2A1', '\a', '\b', '\x2', '\x2', '\x2A1', 
		'\x2A3', '\x5', '\x88', '\x45', '\x2', '\x2A2', '\x2A0', '\x3', '\x2', 
		'\x2', '\x2', '\x2A3', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A2', 
		'\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', '\x3', '\x2', '\x2', '\x2', 
		'\x2A5', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A6', '\x2A4', '\x3', 
		'\x2', '\x2', '\x2', '\x2A7', '\x2A8', '\a', '\a', '\x2', '\x2', '\x2A8', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\a', '\x6', '\x2', 
		'\x2', '\x2AA', '\x2AF', '\x5', '\x8A', '\x46', '\x2', '\x2AB', '\x2AC', 
		'\a', '\b', '\x2', '\x2', '\x2AC', '\x2AE', '\x5', '\x8A', '\x46', '\x2', 
		'\x2AD', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2B1', '\x3', 
		'\x2', '\x2', '\x2', '\x2AF', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AF', 
		'\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2B2', '\x3', '\x2', '\x2', 
		'\x2', '\x2B1', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', 
		'\a', '\a', '\x2', '\x2', '\x2B3', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x2B4', '\x2B9', '\x5', 'H', '%', '\x2', '\x2B5', '\x2B6', '\a', '\b', 
		'\x2', '\x2', '\x2B6', '\x2B8', '\x5', 'H', '%', '\x2', '\x2B7', '\x2B5', 
		'\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2BB', '\x3', '\x2', '\x2', '\x2', 
		'\x2B9', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BA', '\x3', 
		'\x2', '\x2', '\x2', '\x2BA', 'G', '\x3', '\x2', '\x2', '\x2', '\x2BB', 
		'\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\a', '\x6', '\x2', 
		'\x2', '\x2BD', '\x2C2', '\x5', 'J', '&', '\x2', '\x2BE', '\x2BF', '\a', 
		'\b', '\x2', '\x2', '\x2BF', '\x2C1', '\x5', 'J', '&', '\x2', '\x2C0', 
		'\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C4', '\x3', '\x2', '\x2', 
		'\x2', '\x2C2', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C5', '\x3', '\x2', '\x2', '\x2', 
		'\x2C4', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C6', '\a', 
		'\a', '\x2', '\x2', '\x2C6', 'I', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x2CA', '\a', 'H', '\x2', '\x2', '\x2C8', '\x2CA', '\x5', 'r', ':', '\x2', 
		'\x2C9', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2C8', '\x3', 
		'\x2', '\x2', '\x2', '\x2CA', 'K', '\x3', '\x2', '\x2', '\x2', '\x2CB', 
		'\x2D0', '\x5', 'r', ':', '\x2', '\x2CC', '\x2CD', '\a', '\b', '\x2', 
		'\x2', '\x2CD', '\x2CF', '\x5', 'r', ':', '\x2', '\x2CE', '\x2CC', '\x3', 
		'\x2', '\x2', '\x2', '\x2CF', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D0', 
		'\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D1', '\x3', '\x2', '\x2', 
		'\x2', '\x2D1', 'M', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D0', '\x3', 
		'\x2', '\x2', '\x2', '\x2D3', '\x2D6', '\x5', 'r', ':', '\x2', '\x2D4', 
		'\x2D6', '\x5', 'p', '\x39', '\x2', '\x2D5', '\x2D3', '\x3', '\x2', '\x2', 
		'\x2', '\x2D5', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D6', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x2D7', '\x2DC', '\x5', 'N', '(', '\x2', '\x2D8', 
		'\x2D9', '\a', '\b', '\x2', '\x2', '\x2D9', '\x2DB', '\x5', 'N', '(', 
		'\x2', '\x2DA', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DE', 
		'\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DA', '\x3', '\x2', '\x2', '\x2', 
		'\x2DC', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DD', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x2DE', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', 
		'\b', '*', '\x1', '\x2', '\x2E0', '\x2EC', '\x5', '\x90', 'I', '\x2', 
		'\x2E1', '\x2EC', '\x5', ':', '\x1E', '\x2', '\x2E2', '\x2E3', '\a', '\x6', 
		'\x2', '\x2', '\x2E3', '\x2E4', '\x5', 'R', '*', '\x2', '\x2E4', '\x2E9', 
		'\a', '\a', '\x2', '\x2', '\x2E5', '\x2E7', '\a', '\x32', '\x2', '\x2', 
		'\x2E6', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2E7', '\x3', 
		'\x2', '\x2', '\x2', '\x2E7', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x2EA', '\x5', '\x9A', 'N', '\x2', '\x2E9', '\x2E6', '\x3', '\x2', '\x2', 
		'\x2', '\x2E9', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EC', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2DF', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E2', '\x3', 
		'\x2', '\x2', '\x2', '\x2EC', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2ED', 
		'\x2EE', '\f', '\x3', '\x2', '\x2', '\x2EE', '\x2EF', '\a', '\b', '\x2', 
		'\x2', '\x2EF', '\x2F7', '\x5', 'R', '*', '\x4', '\x2F0', '\x2F1', '\f', 
		'\x5', '\x2', '\x2', '\x2F1', '\x2F2', '\x5', 'V', ',', '\x2', '\x2F2', 
		'\x2F4', '\x5', 'R', '*', '\x2', '\x2F3', '\x2F5', '\x5', 'T', '+', '\x2', 
		'\x2F4', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F5', '\x3', 
		'\x2', '\x2', '\x2', '\x2F5', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F6', 
		'\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F0', '\x3', '\x2', '\x2', 
		'\x2', '\x2F7', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F6', 
		'\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', '\x3', '\x2', '\x2', '\x2', 
		'\x2F9', 'S', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2F8', '\x3', '\x2', 
		'\x2', '\x2', '\x2FB', '\x2FC', '\a', '\x85', '\x2', '\x2', '\x2FC', '\x301', 
		'\x5', 'p', '\x39', '\x2', '\x2FD', '\x2FE', '\x6', '+', '#', '\x2', '\x2FE', 
		'\x2FF', '\a', '\xB2', '\x2', '\x2', '\x2FF', '\x301', '\x5', '\x44', 
		'#', '\x2', '\x300', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x300', '\x2FD', 
		'\x3', '\x2', '\x2', '\x2', '\x301', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x302', '\x303', '\x6', ',', '$', '\x2', '\x303', '\x305', '\a', '{', 
		'\x2', '\x2', '\x304', '\x302', '\x3', '\x2', '\x2', '\x2', '\x304', '\x305', 
		'\x3', '\x2', '\x2', '\x2', '\x305', '\x314', '\x3', '\x2', '\x2', '\x2', 
		'\x306', '\x308', '\a', 'n', '\x2', '\x2', '\x307', '\x309', '\a', '\x89', 
		'\x2', '\x2', '\x308', '\x307', '\x3', '\x2', '\x2', '\x2', '\x308', '\x309', 
		'\x3', '\x2', '\x2', '\x2', '\x309', '\x315', '\x3', '\x2', '\x2', '\x2', 
		'\x30A', '\x30C', '\a', '\x94', '\x2', '\x2', '\x30B', '\x30D', '\a', 
		'\x89', '\x2', '\x2', '\x30C', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x30C', 
		'\x30D', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x315', '\x3', '\x2', '\x2', 
		'\x2', '\x30E', '\x310', '\a', '[', '\x2', '\x2', '\x30F', '\x311', '\a', 
		'\x89', '\x2', '\x2', '\x310', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x310', 
		'\x311', '\x3', '\x2', '\x2', '\x2', '\x311', '\x315', '\x3', '\x2', '\x2', 
		'\x2', '\x312', '\x315', '\a', '\x66', '\x2', '\x2', '\x313', '\x315', 
		'\a', '\x41', '\x2', '\x2', '\x314', '\x306', '\x3', '\x2', '\x2', '\x2', 
		'\x314', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x314', '\x30E', '\x3', 
		'\x2', '\x2', '\x2', '\x314', '\x312', '\x3', '\x2', '\x2', '\x2', '\x314', 
		'\x313', '\x3', '\x2', '\x2', '\x2', '\x314', '\x315', '\x3', '\x2', '\x2', 
		'\x2', '\x315', '\x316', '\x3', '\x2', '\x2', '\x2', '\x316', '\x317', 
		'\a', 'l', '\x2', '\x2', '\x317', 'W', '\x3', '\x2', '\x2', '\x2', '\x318', 
		'\x319', '\a', ']', '\x2', '\x2', '\x319', '\x31A', '\a', '\x37', '\x2', 
		'\x2', '\x31A', '\x31B', '\x5', 'L', '\'', '\x2', '\x31B', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x31C', '\x31D', '\a', '\x88', '\x2', '\x2', '\x31D', 
		'\x31E', '\a', '\x37', '\x2', '\x2', '\x31E', '\x323', '\x5', '\\', '/', 
		'\x2', '\x31F', '\x320', '\a', '\b', '\x2', '\x2', '\x320', '\x322', '\x5', 
		'\\', '/', '\x2', '\x321', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x322', 
		'\x325', '\x3', '\x2', '\x2', '\x2', '\x323', '\x321', '\x3', '\x2', '\x2', 
		'\x2', '\x323', '\x324', '\x3', '\x2', '\x2', '\x2', '\x324', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x325', '\x323', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x329', '\x5', 'r', ':', '\x2', '\x327', '\x328', '\a', ';', '\x2', '\x2', 
		'\x328', '\x32A', '\x5', '\x96', 'L', '\x2', '\x329', '\x327', '\x3', 
		'\x2', '\x2', '\x2', '\x329', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x32A', 
		'\x32C', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32D', '\t', '\x4', '\x2', 
		'\x2', '\x32C', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x32C', '\x32D', 
		'\x3', '\x2', '\x2', '\x2', '\x32D', '\x330', '\x3', '\x2', '\x2', '\x2', 
		'\x32E', '\x32F', '\a', '\x82', '\x2', '\x2', '\x32F', '\x331', '\t', 
		'\x5', '\x2', '\x2', '\x330', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x330', 
		'\x331', '\x3', '\x2', '\x2', '\x2', '\x331', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x332', '\x333', '\a', '\x8D', '\x2', '\x2', '\x333', '\x334', 
		'\a', '\x37', '\x2', '\x2', '\x334', '\x339', '\x5', '`', '\x31', '\x2', 
		'\x335', '\x336', '\a', '\b', '\x2', '\x2', '\x336', '\x338', '\x5', '`', 
		'\x31', '\x2', '\x337', '\x335', '\x3', '\x2', '\x2', '\x2', '\x338', 
		'\x33B', '\x3', '\x2', '\x2', '\x2', '\x339', '\x337', '\x3', '\x2', '\x2', 
		'\x2', '\x339', '\x33A', '\x3', '\x2', '\x2', '\x2', '\x33A', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x33B', '\x339', '\x3', '\x2', '\x2', '\x2', '\x33C', 
		'\x33F', '\x5', 'r', ':', '\x2', '\x33D', '\x33E', '\a', ';', '\x2', '\x2', 
		'\x33E', '\x340', '\x5', '\x96', 'L', '\x2', '\x33F', '\x33D', '\x3', 
		'\x2', '\x2', '\x2', '\x33F', '\x340', '\x3', '\x2', '\x2', '\x2', '\x340', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x341', '\x345', '\a', 'G', '\x2', 
		'\x2', '\x342', '\x343', '\x6', '\x32', '%', '\x2', '\x343', '\x346', 
		'\a', '\xBD', '\x2', '\x2', '\x344', '\x346', '\x5', '\x8A', '\x46', '\x2', 
		'\x345', '\x342', '\x3', '\x2', '\x2', '\x2', '\x345', '\x344', '\x3', 
		'\x2', '\x2', '\x2', '\x346', '\x347', '\x3', '\x2', '\x2', '\x2', '\x347', 
		'\x348', '\x5', '\x94', 'K', '\x2', '\x348', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x349', '\x34C', '\x5', '\x66', '\x34', '\x2', '\x34A', '\x34C', 
		'\x5', 'h', '\x35', '\x2', '\x34B', '\x349', '\x3', '\x2', '\x2', '\x2', 
		'\x34B', '\x34A', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x354', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x350', '\a', '\b', '\x2', '\x2', '\x34E', 
		'\x351', '\x5', '\x66', '\x34', '\x2', '\x34F', '\x351', '\x5', 'h', '\x35', 
		'\x2', '\x350', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x350', '\x34F', 
		'\x3', '\x2', '\x2', '\x2', '\x351', '\x353', '\x3', '\x2', '\x2', '\x2', 
		'\x352', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x353', '\x356', '\x3', 
		'\x2', '\x2', '\x2', '\x354', '\x352', '\x3', '\x2', '\x2', '\x2', '\x354', 
		'\x355', '\x3', '\x2', '\x2', '\x2', '\x355', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x356', '\x354', '\x3', '\x2', '\x2', '\x2', '\x357', '\x358', 
		'\a', '\xBD', '\x2', '\x2', '\x358', '\x35A', '\a', '\t', '\x2', '\x2', 
		'\x359', '\x357', '\x3', '\x2', '\x2', '\x2', '\x359', '\x35A', '\x3', 
		'\x2', '\x2', '\x2', '\x35A', '\x35B', '\x3', '\x2', '\x2', '\x2', '\x35B', 
		'\x35C', '\x5', '\xA2', 'R', '\x2', '\x35C', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x35D', '\x35E', '\a', '\xBD', '\x2', '\x2', '\x35E', '\x360', 
		'\a', '\t', '\x2', '\x2', '\x35F', '\x35D', '\x3', '\x2', '\x2', '\x2', 
		'\x35F', '\x360', '\x3', '\x2', '\x2', '\x2', '\x360', '\x361', '\x3', 
		'\x2', '\x2', '\x2', '\x361', '\x362', '\a', '\xBD', '\x2', '\x2', '\x362', 
		'\x363', '\a', '\x8A', '\x2', '\x2', '\x363', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x364', '\x365', '\x6', '\x36', '&', '\x2', '\x365', '\x366', 
		'\a', 'p', '\x2', '\x2', '\x366', '\x369', '\x5', 'r', ':', '\x2', '\x367', 
		'\x368', '\t', '\x6', '\x2', '\x2', '\x368', '\x36A', '\x5', 'r', ':', 
		'\x2', '\x369', '\x367', '\x3', '\x2', '\x2', '\x2', '\x369', '\x36A', 
		'\x3', '\x2', '\x2', '\x2', '\x36A', '\x38C', '\x3', '\x2', '\x2', '\x2', 
		'\x36B', '\x36C', '\x6', '\x36', '\'', '\x2', '\x36C', '\x36D', '\a', 
		'\x84', '\x2', '\x2', '\x36D', '\x36E', '\a', '&', '\x2', '\x2', '\x36E', 
		'\x37C', '\t', '\a', '\x2', '\x2', '\x36F', '\x370', '\a', 'W', '\x2', 
		'\x2', '\x370', '\x371', '\t', '\b', '\x2', '\x2', '\x371', '\x373', '\a', 
		'&', '\x2', '\x2', '\x372', '\x374', '\a', '\x93', '\x2', '\x2', '\x373', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x373', '\x374', '\x3', '\x2', '\x2', 
		'\x2', '\x374', '\x375', '\x3', '\x2', '\x2', '\x2', '\x375', '\x37A', 
		'\t', '\a', '\x2', '\x2', '\x376', '\x37B', '\a', '\x86', '\x2', '\x2', 
		'\x377', '\x378', '\x6', '\x36', '(', '\x2', '\x378', '\x379', '\a', '\xBB', 
		'\x2', '\x2', '\x379', '\x37B', '\a', '\xA9', '\x2', '\x2', '\x37A', '\x376', 
		'\x3', '\x2', '\x2', '\x2', '\x37A', '\x377', '\x3', '\x2', '\x2', '\x2', 
		'\x37B', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x36F', '\x3', 
		'\x2', '\x2', '\x2', '\x37C', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x37D', 
		'\x38C', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x37F', '\x6', '\x36', 
		')', '\x2', '\x37F', '\x380', '\a', 'W', '\x2', '\x2', '\x380', '\x381', 
		'\t', '\b', '\x2', '\x2', '\x381', '\x383', '\a', '&', '\x2', '\x2', '\x382', 
		'\x384', '\a', '\x93', '\x2', '\x2', '\x383', '\x382', '\x3', '\x2', '\x2', 
		'\x2', '\x383', '\x384', '\x3', '\x2', '\x2', '\x2', '\x384', '\x385', 
		'\x3', '\x2', '\x2', '\x2', '\x385', '\x389', '\t', '\a', '\x2', '\x2', 
		'\x386', '\x38A', '\a', '\x86', '\x2', '\x2', '\x387', '\x388', '\a', 
		'\xBB', '\x2', '\x2', '\x388', '\x38A', '\a', '\xA9', '\x2', '\x2', '\x389', 
		'\x386', '\x3', '\x2', '\x2', '\x2', '\x389', '\x387', '\x3', '\x2', '\x2', 
		'\x2', '\x38A', '\x38C', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x364', 
		'\x3', '\x2', '\x2', '\x2', '\x38B', '\x36B', '\x3', '\x2', '\x2', '\x2', 
		'\x38B', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x38C', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x38D', '\x38E', '\x6', '\x37', '*', '\x2', '\x38E', '\x38F', 
		'\a', 'Y', '\x2', '\x2', '\x38F', '\x391', '\a', '\xB1', '\x2', '\x2', 
		'\x390', '\x392', '\x5', 'n', '\x38', '\x2', '\x391', '\x390', '\x3', 
		'\x2', '\x2', '\x2', '\x391', '\x392', '\x3', '\x2', '\x2', '\x2', '\x392', 
		'\x39A', '\x3', '\x2', '\x2', '\x2', '\x393', '\x39B', '\a', '\x80', '\x2', 
		'\x2', '\x394', '\x396', '\a', '\xB8', '\x2', '\x2', '\x395', '\x397', 
		'\a', '&', '\x2', '\x2', '\x396', '\x395', '\x3', '\x2', '\x2', '\x2', 
		'\x396', '\x397', '\x3', '\x2', '\x2', '\x2', '\x397', '\x39B', '\x3', 
		'\x2', '\x2', '\x2', '\x398', '\x399', '\a', '\x9D', '\x2', '\x2', '\x399', 
		'\x39B', '\a', 'q', '\x2', '\x2', '\x39A', '\x393', '\x3', '\x2', '\x2', 
		'\x2', '\x39A', '\x394', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x398', 
		'\x3', '\x2', '\x2', '\x2', '\x39A', '\x39B', '\x3', '\x2', '\x2', '\x2', 
		'\x39B', 'm', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39D', '\a', '\x83', 
		'\x2', '\x2', '\x39D', '\x3A2', '\x5', '\x88', '\x45', '\x2', '\x39E', 
		'\x39F', '\a', '\b', '\x2', '\x2', '\x39F', '\x3A1', '\x5', '\x88', '\x45', 
		'\x2', '\x3A0', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A4', 
		'\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A0', '\x3', '\x2', '\x2', '\x2', 
		'\x3A2', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A3', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x3A4', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A5', '\x3A6', 
		'\b', '\x39', '\x1', '\x2', '\x3A6', '\x3F5', '\a', '\xBD', '\x2', '\x2', 
		'\x3A7', '\x3F5', '\a', '\xBE', '\x2', '\x2', '\x3A8', '\x3A9', '\x5', 
		'r', ':', '\x2', '\x3A9', '\x3AA', '\t', '\t', '\x2', '\x2', '\x3AA', 
		'\x3AB', '\x5', 'r', ':', '\x2', '\x3AB', '\x3F5', '\x3', '\x2', '\x2', 
		'\x2', '\x3AC', '\x3AD', '\x5', 'r', ':', '\x2', '\x3AD', '\x3AE', '\t', 
		'\n', '\x2', '\x2', '\x3AE', '\x3AF', '\x5', 'r', ':', '\x2', '\x3AF', 
		'\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3B1', '\x5', 'r', ':', 
		'\x2', '\x3B1', '\x3B2', '\x6', '\x39', '+', '\x2', '\x3B2', '\x3B3', 
		'\t', '\v', '\x2', '\x2', '\x3B3', '\x3B4', '\x5', 'r', ':', '\x2', '\x3B4', 
		'\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B7', '\x5', 'r', ':', 
		'\x2', '\x3B6', '\x3B8', '\a', '~', '\x2', '\x2', '\x3B7', '\x3B6', '\x3', 
		'\x2', '\x2', '\x2', '\x3B7', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3B8', 
		'\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3BA', '\t', '\f', '\x2', 
		'\x2', '\x3BA', '\x3BD', '\x5', 'r', ':', '\x2', '\x3BB', '\x3BC', '\a', 
		'P', '\x2', '\x2', '\x3BC', '\x3BE', '\x5', 'r', ':', '\x2', '\x3BD', 
		'\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BE', '\x3', '\x2', '\x2', 
		'\x2', '\x3BE', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C0', 
		'\x5', 'r', ':', '\x2', '\x3C0', '\x3C2', '\a', 'k', '\x2', '\x2', '\x3C1', 
		'\x3C3', '\a', '~', '\x2', '\x2', '\x3C2', '\x3C1', '\x3', '\x2', '\x2', 
		'\x2', '\x3C2', '\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3C3', '\x3C4', 
		'\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C5', '\a', '\x81', '\x2', '\x2', 
		'\x3C5', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C7', '\x5', 
		'r', ':', '\x2', '\x3C7', '\x3C9', '\a', 'k', '\x2', '\x2', '\x3C8', '\x3CA', 
		'\a', '~', '\x2', '\x2', '\x3C9', '\x3C8', '\x3', '\x2', '\x2', '\x2', 
		'\x3C9', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CB', '\x3', 
		'\x2', '\x2', '\x2', '\x3CB', '\x3CC', '\x5', 'r', ':', '\x2', '\x3CC', 
		'\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3CF', '\x5', 'r', ':', 
		'\x2', '\x3CE', '\x3D0', '\a', '~', '\x2', '\x2', '\x3CF', '\x3CE', '\x3', 
		'\x2', '\x2', '\x2', '\x3CF', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3D0', 
		'\x3D1', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3D2', '\a', '\x36', '\x2', 
		'\x2', '\x3D2', '\x3D3', '\x5', 'r', ':', '\x2', '\x3D3', '\x3D4', '\a', 
		'\x30', '\x2', '\x2', '\x3D4', '\x3D5', '\x5', 'r', ':', '\x2', '\x3D5', 
		'\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D8', '\x5', 'r', ':', 
		'\x2', '\x3D7', '\x3D9', '\a', '~', '\x2', '\x2', '\x3D8', '\x3D7', '\x3', 
		'\x2', '\x2', '\x2', '\x3D8', '\x3D9', '\x3', '\x2', '\x2', '\x2', '\x3D9', 
		'\x3DA', '\x3', '\x2', '\x2', '\x2', '\x3DA', '\x3DB', '\a', '\x64', '\x2', 
		'\x2', '\x3DB', '\x3DE', '\a', '\x6', '\x2', '\x2', '\x3DC', '\x3DF', 
		'\x5', 'L', '\'', '\x2', '\x3DD', '\x3DF', '\x5', '\x36', '\x1C', '\x2', 
		'\x3DE', '\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x3DD', '\x3', 
		'\x2', '\x2', '\x2', '\x3DE', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3DF', 
		'\x3E0', '\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3E1', '\a', '\a', '\x2', 
		'\x2', '\x3E1', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3E2', '\x3E3', 
		'\x5', 'r', ':', '\x2', '\x3E3', '\x3E4', '\t', '\r', '\x2', '\x2', '\x3E4', 
		'\x3E5', '\t', '\xE', '\x2', '\x2', '\x3E5', '\x3E6', '\a', '\x6', '\x2', 
		'\x2', '\x3E6', '\x3E7', '\x5', '\x36', '\x1C', '\x2', '\x3E7', '\x3E8', 
		'\a', '\a', '\x2', '\x2', '\x3E8', '\x3F5', '\x3', '\x2', '\x2', '\x2', 
		'\x3E9', '\x3EA', '\a', 'T', '\x2', '\x2', '\x3EA', '\x3EB', '\a', '\x6', 
		'\x2', '\x2', '\x3EB', '\x3EC', '\x5', '\x36', '\x1C', '\x2', '\x3EC', 
		'\x3ED', '\a', '\a', '\x2', '\x2', '\x3ED', '\x3F5', '\x3', '\x2', '\x2', 
		'\x2', '\x3EE', '\x3EF', '\a', '~', '\x2', '\x2', '\x3EF', '\x3F5', '\x5', 
		'p', '\x39', '\x6', '\x3F0', '\x3F1', '\a', '\x6', '\x2', '\x2', '\x3F1', 
		'\x3F2', '\x5', 'p', '\x39', '\x2', '\x3F2', '\x3F3', '\a', '\a', '\x2', 
		'\x2', '\x3F3', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3A5', 
		'\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3A7', '\x3', '\x2', '\x2', '\x2', 
		'\x3F4', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3AC', '\x3', 
		'\x2', '\x2', '\x2', '\x3F4', '\x3B0', '\x3', '\x2', '\x2', '\x2', '\x3F4', 
		'\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3BF', '\x3', '\x2', '\x2', 
		'\x2', '\x3F4', '\x3C6', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3CD', 
		'\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3D6', '\x3', '\x2', '\x2', '\x2', 
		'\x3F4', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3E9', '\x3', 
		'\x2', '\x2', '\x2', '\x3F4', '\x3EE', '\x3', '\x2', '\x2', '\x2', '\x3F4', 
		'\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x401', '\x3', '\x2', '\x2', 
		'\x2', '\x3F6', '\x3F7', '\f', '\x5', '\x2', '\x2', '\x3F7', '\x3F8', 
		'\a', '\x30', '\x2', '\x2', '\x3F8', '\x400', '\x5', 'p', '\x39', '\x6', 
		'\x3F9', '\x3FA', '\f', '\x4', '\x2', '\x2', '\x3FA', '\x3FB', '\a', '\x87', 
		'\x2', '\x2', '\x3FB', '\x400', '\x5', 'p', '\x39', '\x5', '\x3FC', '\x3FD', 
		'\f', '\a', '\x2', '\x2', '\x3FD', '\x3FE', '\a', ';', '\x2', '\x2', '\x3FE', 
		'\x400', '\x5', '\x96', 'L', '\x2', '\x3FF', '\x3F6', '\x3', '\x2', '\x2', 
		'\x2', '\x3FF', '\x3F9', '\x3', '\x2', '\x2', '\x2', '\x3FF', '\x3FC', 
		'\x3', '\x2', '\x2', '\x2', '\x400', '\x403', '\x3', '\x2', '\x2', '\x2', 
		'\x401', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x401', '\x402', '\x3', 
		'\x2', '\x2', '\x2', '\x402', 'q', '\x3', '\x2', '\x2', '\x2', '\x403', 
		'\x401', '\x3', '\x2', '\x2', '\x2', '\x404', '\x405', '\b', ':', '\x1', 
		'\x2', '\x405', '\x406', '\t', '\xF', '\x2', '\x2', '\x406', '\x448', 
		'\t', '\x10', '\x2', '\x2', '\x407', '\x448', '\x5', '\xA2', 'R', '\x2', 
		'\x408', '\x448', '\a', '\xBD', '\x2', '\x2', '\x409', '\x448', '\a', 
		'\xBE', '\x2', '\x2', '\x40A', '\x40D', '\x5', '\x88', '\x45', '\x2', 
		'\x40B', '\x40C', '\x6', ':', '/', '\x2', '\x40C', '\x40E', '\a', '\x1C', 
		'\x2', '\x2', '\x40D', '\x40B', '\x3', '\x2', '\x2', '\x2', '\x40D', '\x40E', 
		'\x3', '\x2', '\x2', '\x2', '\x40E', '\x448', '\x3', '\x2', '\x2', '\x2', 
		'\x40F', '\x410', '\a', '\x6', '\x2', '\x2', '\x410', '\x411', '\x5', 
		'\x36', '\x1C', '\x2', '\x411', '\x412', '\a', '\a', '\x2', '\x2', '\x412', 
		'\x448', '\x3', '\x2', '\x2', '\x2', '\x413', '\x414', '\a', '\r', '\x2', 
		'\x2', '\x414', '\x448', '\x5', 'r', ':', '\x12', '\x415', '\x448', '\x5', 
		't', ';', '\x2', '\x416', '\x448', '\x5', 'v', '<', '\x2', '\x417', '\x448', 
		'\x5', 'x', '=', '\x2', '\x418', '\x448', '\x5', 'z', '>', '\x2', '\x419', 
		'\x448', '\x5', '|', '?', '\x2', '\x41A', '\x448', '\x5', '~', '@', '\x2', 
		'\x41B', '\x41C', '\a', '\x6', '\x2', '\x2', '\x41C', '\x41D', '\x5', 
		'r', ':', '\x2', '\x41D', '\x41E', '\a', '\a', '\x2', '\x2', '\x41E', 
		'\x448', '\x3', '\x2', '\x2', '\x2', '\x41F', '\x420', '\a', ':', '\x2', 
		'\x2', '\x420', '\x421', '\a', '\x6', '\x2', '\x2', '\x421', '\x422', 
		'\x5', 'r', ':', '\x2', '\x422', '\x423', '\a', '\x32', '\x2', '\x2', 
		'\x423', '\x424', '\x5', '\x94', 'K', '\x2', '\x424', '\x425', '\a', '\a', 
		'\x2', '\x2', '\x425', '\x448', '\x3', '\x2', '\x2', '\x2', '\x426', '\x427', 
		'\a', '\x39', '\x2', '\x2', '\x427', '\x42D', '\x5', 'r', ':', '\x2', 
		'\x428', '\x429', '\a', '\xB9', '\x2', '\x2', '\x429', '\x42A', '\x5', 
		'r', ':', '\x2', '\x42A', '\x42B', '\a', '\xA8', '\x2', '\x2', '\x42B', 
		'\x42C', '\x5', 'r', ':', '\x2', '\x42C', '\x42E', '\x3', '\x2', '\x2', 
		'\x2', '\x42D', '\x428', '\x3', '\x2', '\x2', '\x2', '\x42E', '\x42F', 
		'\x3', '\x2', '\x2', '\x2', '\x42F', '\x42D', '\x3', '\x2', '\x2', '\x2', 
		'\x42F', '\x430', '\x3', '\x2', '\x2', '\x2', '\x430', '\x433', '\x3', 
		'\x2', '\x2', '\x2', '\x431', '\x432', '\a', 'M', '\x2', '\x2', '\x432', 
		'\x434', '\x5', 'r', ':', '\x2', '\x433', '\x431', '\x3', '\x2', '\x2', 
		'\x2', '\x433', '\x434', '\x3', '\x2', '\x2', '\x2', '\x434', '\x435', 
		'\x3', '\x2', '\x2', '\x2', '\x435', '\x436', '\a', 'O', '\x2', '\x2', 
		'\x436', '\x448', '\x3', '\x2', '\x2', '\x2', '\x437', '\x43D', '\a', 
		'\x39', '\x2', '\x2', '\x438', '\x439', '\a', '\xB9', '\x2', '\x2', '\x439', 
		'\x43A', '\x5', 'p', '\x39', '\x2', '\x43A', '\x43B', '\a', '\xA8', '\x2', 
		'\x2', '\x43B', '\x43C', '\x5', 'r', ':', '\x2', '\x43C', '\x43E', '\x3', 
		'\x2', '\x2', '\x2', '\x43D', '\x438', '\x3', '\x2', '\x2', '\x2', '\x43E', 
		'\x43F', '\x3', '\x2', '\x2', '\x2', '\x43F', '\x43D', '\x3', '\x2', '\x2', 
		'\x2', '\x43F', '\x440', '\x3', '\x2', '\x2', '\x2', '\x440', '\x443', 
		'\x3', '\x2', '\x2', '\x2', '\x441', '\x442', '\a', 'M', '\x2', '\x2', 
		'\x442', '\x444', '\x5', 'r', ':', '\x2', '\x443', '\x441', '\x3', '\x2', 
		'\x2', '\x2', '\x443', '\x444', '\x3', '\x2', '\x2', '\x2', '\x444', '\x445', 
		'\x3', '\x2', '\x2', '\x2', '\x445', '\x446', '\a', 'O', '\x2', '\x2', 
		'\x446', '\x448', '\x3', '\x2', '\x2', '\x2', '\x447', '\x404', '\x3', 
		'\x2', '\x2', '\x2', '\x447', '\x407', '\x3', '\x2', '\x2', '\x2', '\x447', 
		'\x408', '\x3', '\x2', '\x2', '\x2', '\x447', '\x409', '\x3', '\x2', '\x2', 
		'\x2', '\x447', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x447', '\x40F', 
		'\x3', '\x2', '\x2', '\x2', '\x447', '\x413', '\x3', '\x2', '\x2', '\x2', 
		'\x447', '\x415', '\x3', '\x2', '\x2', '\x2', '\x447', '\x416', '\x3', 
		'\x2', '\x2', '\x2', '\x447', '\x417', '\x3', '\x2', '\x2', '\x2', '\x447', 
		'\x418', '\x3', '\x2', '\x2', '\x2', '\x447', '\x419', '\x3', '\x2', '\x2', 
		'\x2', '\x447', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x447', '\x41B', 
		'\x3', '\x2', '\x2', '\x2', '\x447', '\x41F', '\x3', '\x2', '\x2', '\x2', 
		'\x447', '\x426', '\x3', '\x2', '\x2', '\x2', '\x447', '\x437', '\x3', 
		'\x2', '\x2', '\x2', '\x448', '\x460', '\x3', '\x2', '\x2', '\x2', '\x449', 
		'\x44A', '\f', '\x11', '\x2', '\x2', '\x44A', '\x44B', '\x6', ':', '\x31', 
		'\x2', '\x44B', '\x44C', '\a', '\xE', '\x2', '\x2', '\x44C', '\x45F', 
		'\x5', 'r', ':', '\x12', '\x44D', '\x44E', '\f', '\x10', '\x2', '\x2', 
		'\x44E', '\x44F', '\t', '\x11', '\x2', '\x2', '\x44F', '\x45F', '\x5', 
		'r', ':', '\x11', '\x450', '\x451', '\f', '\xF', '\x2', '\x2', '\x451', 
		'\x452', '\t', '\xF', '\x2', '\x2', '\x452', '\x45F', '\x5', 'r', ':', 
		'\x10', '\x453', '\x454', '\f', '\xE', '\x2', '\x2', '\x454', '\x455', 
		'\t', '\x12', '\x2', '\x2', '\x455', '\x45F', '\x5', 'r', ':', '\xF', 
		'\x456', '\x457', '\f', '\r', '\x2', '\x2', '\x457', '\x458', '\x6', ':', 
		'\x36', '\x2', '\x458', '\x459', '\t', '\x13', '\x2', '\x2', '\x459', 
		'\x45F', '\x5', 'r', ':', '\xE', '\x45A', '\x45B', '\f', '\x13', '\x2', 
		'\x2', '\x45B', '\x45C', '\x6', ':', '\x38', '\x2', '\x45C', '\x45D', 
		'\a', '\x3', '\x2', '\x2', '\x45D', '\x45F', '\x5', '\x94', 'K', '\x2', 
		'\x45E', '\x449', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x44D', '\x3', 
		'\x2', '\x2', '\x2', '\x45E', '\x450', '\x3', '\x2', '\x2', '\x2', '\x45E', 
		'\x453', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x456', '\x3', '\x2', '\x2', 
		'\x2', '\x45E', '\x45A', '\x3', '\x2', '\x2', '\x2', '\x45F', '\x462', 
		'\x3', '\x2', '\x2', '\x2', '\x460', '\x45E', '\x3', '\x2', '\x2', '\x2', 
		'\x460', '\x461', '\x3', '\x2', '\x2', '\x2', '\x461', 's', '\x3', '\x2', 
		'\x2', '\x2', '\x462', '\x460', '\x3', '\x2', '\x2', '\x2', '\x463', '\x464', 
		'\t', '\x14', '\x2', '\x2', '\x464', '\x465', '\a', '\x6', '\x2', '\x2', 
		'\x465', '\x466', '\x5', 'N', '(', '\x2', '\x466', '\x467', '\t', '\x15', 
		'\x2', '\x2', '\x467', '\x46A', '\x5', 'N', '(', '\x2', '\x468', '\x469', 
		'\t', '\x16', '\x2', '\x2', '\x469', '\x46B', '\x5', 'N', '(', '\x2', 
		'\x46A', '\x468', '\x3', '\x2', '\x2', '\x2', '\x46A', '\x46B', '\x3', 
		'\x2', '\x2', '\x2', '\x46B', '\x46C', '\x3', '\x2', '\x2', '\x2', '\x46C', 
		'\x46D', '\a', '\a', '\x2', '\x2', '\x46D', 'u', '\x3', '\x2', '\x2', 
		'\x2', '\x46E', '\x46F', '\a', 'U', '\x2', '\x2', '\x46F', '\x470', '\a', 
		'\x6', '\x2', '\x2', '\x470', '\x471', '\x5', '\xA4', 'S', '\x2', '\x471', 
		'\x472', '\t', '\x15', '\x2', '\x2', '\x472', '\x473', '\x5', 'N', '(', 
		'\x2', '\x473', '\x474', '\a', '\a', '\x2', '\x2', '\x474', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x475', '\x47D', '\a', '?', '\x2', '\x2', '\x476', 
		'\x47D', '\a', '\x9F', '\x2', '\x2', '\x477', '\x47D', '\a', '\x34', '\x2', 
		'\x2', '\x478', '\x479', '\x6', '=', '\x39', '\x2', '\x479', '\x47D', 
		'\a', '\xAE', '\x2', '\x2', '\x47A', '\x47B', '\x6', '=', ':', '\x2', 
		'\x47B', '\x47D', '\a', '@', '\x2', '\x2', '\x47C', '\x475', '\x3', '\x2', 
		'\x2', '\x2', '\x47C', '\x476', '\x3', '\x2', '\x2', '\x2', '\x47C', '\x477', 
		'\x3', '\x2', '\x2', '\x2', '\x47C', '\x478', '\x3', '\x2', '\x2', '\x2', 
		'\x47C', '\x47A', '\x3', '\x2', '\x2', '\x2', '\x47D', '\x47E', '\x3', 
		'\x2', '\x2', '\x2', '\x47E', '\x480', '\a', '\x6', '\x2', '\x2', '\x47F', 
		'\x481', '\t', '\x3', '\x2', '\x2', '\x480', '\x47F', '\x3', '\x2', '\x2', 
		'\x2', '\x480', '\x481', '\x3', '\x2', '\x2', '\x2', '\x481', '\x484', 
		'\x3', '\x2', '\x2', '\x2', '\x482', '\x485', '\x5', 'N', '(', '\x2', 
		'\x483', '\x485', '\a', '\n', '\x2', '\x2', '\x484', '\x482', '\x3', '\x2', 
		'\x2', '\x2', '\x484', '\x483', '\x3', '\x2', '\x2', '\x2', '\x485', '\x486', 
		'\x3', '\x2', '\x2', '\x2', '\x486', '\x487', '\a', '\a', '\x2', '\x2', 
		'\x487', 'y', '\x3', '\x2', '\x2', '\x2', '\x488', '\x489', '\t', '\x17', 
		'\x2', '\x2', '\x489', '\x48A', '\a', '\x6', '\x2', '\x2', '\x48A', '\x48B', 
		'\x5', 'N', '(', '\x2', '\x48B', '\x48C', '\a', '\a', '\x2', '\x2', '\x48C', 
		'\x4C4', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x48E', '\x6', '>', ';', 
		'\x2', '\x48E', '\x48F', '\a', '>', '\x2', '\x2', '\x48F', '\x490', '\a', 
		'\x6', '\x2', '\x2', '\x490', '\x491', '\x5', 'N', '(', '\x2', '\x491', 
		'\x492', '\a', '\b', '\x2', '\x2', '\x492', '\x493', '\x5', 'N', '(', 
		'\x2', '\x493', '\x494', '\a', '\a', '\x2', '\x2', '\x494', '\x4C4', '\x3', 
		'\x2', '\x2', '\x2', '\x495', '\x496', '\x6', '>', '<', '\x2', '\x496', 
		'\x497', '\a', '^', '\x2', '\x2', '\x497', '\x498', '\a', '\x6', '\x2', 
		'\x2', '\x498', '\x49B', '\x5', 'N', '(', '\x2', '\x499', '\x49A', '\a', 
		'\b', '\x2', '\x2', '\x49A', '\x49C', '\x5', 'N', '(', '\x2', '\x49B', 
		'\x499', '\x3', '\x2', '\x2', '\x2', '\x49B', '\x49C', '\x3', '\x2', '\x2', 
		'\x2', '\x49C', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x49D', '\x49E', 
		'\a', '\a', '\x2', '\x2', '\x49E', '\x4C4', '\x3', '\x2', '\x2', '\x2', 
		'\x49F', '\x4A0', '\x6', '>', '=', '\x2', '\x4A0', '\x4A1', '\t', '\x18', 
		'\x2', '\x2', '\x4A1', '\x4A2', '\a', '\x6', '\x2', '\x2', '\x4A2', '\x4A3', 
		'\x5', 'N', '(', '\x2', '\x4A3', '\x4A4', '\a', '\a', '\x2', '\x2', '\x4A4', 
		'\x4C4', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A6', '\x6', '>', '>', 
		'\x2', '\x4A6', '\x4A7', '\t', '\x19', '\x2', '\x2', '\x4A7', '\x4A8', 
		'\a', '\x6', '\x2', '\x2', '\x4A8', '\x4A9', '\x5', 'N', '(', '\x2', '\x4A9', 
		'\x4AA', '\a', '\a', '\x2', '\x2', '\x4AA', '\x4C4', '\x3', '\x2', '\x2', 
		'\x2', '\x4AB', '\x4AC', '\x6', '>', '?', '\x2', '\x4AC', '\x4AD', '\a', 
		'\xA3', '\x2', '\x2', '\x4AD', '\x4AE', '\a', '\x6', '\x2', '\x2', '\x4AE', 
		'\x4AF', '\x5', 'N', '(', '\x2', '\x4AF', '\x4B0', '\a', '\a', '\x2', 
		'\x2', '\x4B0', '\x4C4', '\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4B2', 
		'\x6', '>', '@', '\x2', '\x4B2', '\x4B3', '\a', '\xB5', '\x2', '\x2', 
		'\x4B3', '\x4B4', '\a', '\x6', '\x2', '\x2', '\x4B4', '\x4B5', '\x5', 
		'N', '(', '\x2', '\x4B5', '\x4B6', '\a', '\a', '\x2', '\x2', '\x4B6', 
		'\x4C4', '\x3', '\x2', '\x2', '\x2', '\x4B7', '\x4B8', '\x6', '>', '\x41', 
		'\x2', '\x4B8', '\x4B9', '\a', '\xA1', '\x2', '\x2', '\x4B9', '\x4BA', 
		'\a', '\x6', '\x2', '\x2', '\x4BA', '\x4BB', '\x5', 'N', '(', '\x2', '\x4BB', 
		'\x4BC', '\a', '\a', '\x2', '\x2', '\x4BC', '\x4C4', '\x3', '\x2', '\x2', 
		'\x2', '\x4BD', '\x4BE', '\x6', '>', '\x42', '\x2', '\x4BE', '\x4BF', 
		'\a', 'u', '\x2', '\x2', '\x4BF', '\x4C0', '\a', '\x6', '\x2', '\x2', 
		'\x4C0', '\x4C1', '\x5', 'N', '(', '\x2', '\x4C1', '\x4C2', '\a', '\a', 
		'\x2', '\x2', '\x4C2', '\x4C4', '\x3', '\x2', '\x2', '\x2', '\x4C3', '\x488', 
		'\x3', '\x2', '\x2', '\x2', '\x4C3', '\x48D', '\x3', '\x2', '\x2', '\x2', 
		'\x4C3', '\x495', '\x3', '\x2', '\x2', '\x2', '\x4C3', '\x49F', '\x3', 
		'\x2', '\x2', '\x2', '\x4C3', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4C3', 
		'\x4AB', '\x3', '\x2', '\x2', '\x2', '\x4C3', '\x4B1', '\x3', '\x2', '\x2', 
		'\x2', '\x4C3', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4C3', '\x4BD', 
		'\x3', '\x2', '\x2', '\x2', '\x4C4', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x4C5', '\x4C6', '\x5', '\x82', '\x42', '\x2', '\x4C6', '\x4C8', '\a', 
		'\x6', '\x2', '\x2', '\x4C7', '\x4C9', '\t', '\x3', '\x2', '\x2', '\x4C8', 
		'\x4C7', '\x3', '\x2', '\x2', '\x2', '\x4C8', '\x4C9', '\x3', '\x2', '\x2', 
		'\x2', '\x4C9', '\x4CC', '\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4CD', 
		'\x5', 'P', ')', '\x2', '\x4CB', '\x4CD', '\a', '\n', '\x2', '\x2', '\x4CC', 
		'\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4CC', '\x4CB', '\x3', '\x2', '\x2', 
		'\x2', '\x4CC', '\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4CE', 
		'\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4CF', '\a', '\a', '\x2', '\x2', 
		'\x4CF', '\x4D0', '\a', '\x8B', '\x2', '\x2', '\x4D0', '\x4D2', '\a', 
		'\x6', '\x2', '\x2', '\x4D1', '\x4D3', '\x5', '^', '\x30', '\x2', '\x4D2', 
		'\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4D3', '\x3', '\x2', '\x2', 
		'\x2', '\x4D3', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4D5', 
		'\x5', 'Z', '.', '\x2', '\x4D5', '\x4D6', '\a', '\a', '\x2', '\x2', '\x4D6', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x4D7', '\x4D8', '\x5', '\x82', '\x42', 
		'\x2', '\x4D8', '\x4DA', '\a', '\x6', '\x2', '\x2', '\x4D9', '\x4DB', 
		'\x5', 'P', ')', '\x2', '\x4DA', '\x4D9', '\x3', '\x2', '\x2', '\x2', 
		'\x4DA', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4DC', '\x3', 
		'\x2', '\x2', '\x2', '\x4DC', '\x4DD', '\a', '\a', '\x2', '\x2', '\x4DD', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x4DE', '\x4DF', '\x5', '\x9E', 'P', 
		'\x2', '\x4DF', '\x4E0', '\a', '\x5', '\x2', '\x2', '\x4E0', '\x4E2', 
		'\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4DE', '\x3', '\x2', '\x2', '\x2', 
		'\x4E1', '\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E3', '\x3', 
		'\x2', '\x2', '\x2', '\x4E3', '\x4E4', '\x5', '\x9E', 'P', '\x2', '\x4E4', 
		'\x4E5', '\a', '\x5', '\x2', '\x2', '\x4E5', '\x4E7', '\x3', '\x2', '\x2', 
		'\x2', '\x4E6', '\x4E1', '\x3', '\x2', '\x2', '\x2', '\x4E6', '\x4E7', 
		'\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E8', '\x3', '\x2', '\x2', '\x2', 
		'\x4E8', '\x4E9', '\x5', '\x9E', 'P', '\x2', '\x4E9', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x4EA', '\x4EB', '\x5', '\x80', '\x41', '\x2', '\x4EB', 
		'\x4EC', '\a', '\x5', '\x2', '\x2', '\x4EC', '\x4EE', '\x3', '\x2', '\x2', 
		'\x2', '\x4ED', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4ED', '\x4EE', 
		'\x3', '\x2', '\x2', '\x2', '\x4EE', '\x4EF', '\x3', '\x2', '\x2', '\x2', 
		'\x4EF', '\x4F0', '\x5', '\x9E', 'P', '\x2', '\x4F0', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x4F1', '\x4F2', '\x5', '\x80', '\x41', '\x2', '\x4F2', 
		'\x4F3', '\a', '\x5', '\x2', '\x2', '\x4F3', '\x4F5', '\x3', '\x2', '\x2', 
		'\x2', '\x4F4', '\x4F1', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F5', 
		'\x3', '\x2', '\x2', '\x2', '\x4F5', '\x4F6', '\x3', '\x2', '\x2', '\x2', 
		'\x4F6', '\x4F7', '\x5', '\x9E', 'P', '\x2', '\x4F7', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x4F8', '\x4F9', '\x5', '\x80', '\x41', '\x2', '\x4F9', 
		'\x4FA', '\a', '\x5', '\x2', '\x2', '\x4FA', '\x4FC', '\x3', '\x2', '\x2', 
		'\x2', '\x4FB', '\x4F8', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FC', 
		'\x3', '\x2', '\x2', '\x2', '\x4FC', '\x4FD', '\x3', '\x2', '\x2', '\x2', 
		'\x4FD', '\x4FE', '\x5', '\x9E', 'P', '\x2', '\x4FE', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x4FF', '\x500', '\x5', '\x86', '\x44', '\x2', '\x500', 
		'\x501', '\a', '\x5', '\x2', '\x2', '\x501', '\x503', '\x3', '\x2', '\x2', 
		'\x2', '\x502', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x502', '\x503', 
		'\x3', '\x2', '\x2', '\x2', '\x503', '\x504', '\x3', '\x2', '\x2', '\x2', 
		'\x504', '\x505', '\x5', '\x9E', 'P', '\x2', '\x505', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x506', '\x507', '\x5', '\x9E', 'P', '\x2', '\x507', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x508', '\x50D', '\x5', '\x86', '\x44', '\x2', 
		'\x509', '\x50B', '\a', '\x32', '\x2', '\x2', '\x50A', '\x509', '\x3', 
		'\x2', '\x2', '\x2', '\x50A', '\x50B', '\x3', '\x2', '\x2', '\x2', '\x50B', 
		'\x50C', '\x3', '\x2', '\x2', '\x2', '\x50C', '\x50E', '\x5', '\x9A', 
		'N', '\x2', '\x50D', '\x50A', '\x3', '\x2', '\x2', '\x2', '\x50D', '\x50E', 
		'\x3', '\x2', '\x2', '\x2', '\x50E', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x50F', '\x511', '\x5', '\x86', '\x44', '\x2', '\x510', '\x512', '\x5', 
		'\x92', 'J', '\x2', '\x511', '\x510', '\x3', '\x2', '\x2', '\x2', '\x511', 
		'\x512', '\x3', '\x2', '\x2', '\x2', '\x512', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x513', '\x515', '\x5', '\x8C', 'G', '\x2', '\x514', '\x516', 
		'\x5', '\x92', 'J', '\x2', '\x515', '\x514', '\x3', '\x2', '\x2', '\x2', 
		'\x515', '\x516', '\x3', '\x2', '\x2', '\x2', '\x516', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x517', '\x51D', '\x6', 'J', '\x43', '\x2', '\x518', 
		'\x519', '\a', '\x65', '\x2', '\x2', '\x519', '\x51A', '\a', '\x37', '\x2', 
		'\x2', '\x51A', '\x51E', '\x5', '\x84', '\x43', '\x2', '\x51B', '\x51C', 
		'\a', '~', '\x2', '\x2', '\x51C', '\x51E', '\a', '\x65', '\x2', '\x2', 
		'\x51D', '\x518', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x51B', '\x3', 
		'\x2', '\x2', '\x2', '\x51E', '\x525', '\x3', '\x2', '\x2', '\x2', '\x51F', 
		'\x520', '\x6', 'J', '\x44', '\x2', '\x520', '\x521', '\a', '\xBB', '\x2', 
		'\x2', '\x521', '\x522', '\a', '\x6', '\x2', '\x2', '\x522', '\x523', 
		'\t', '\x1A', '\x2', '\x2', '\x523', '\x525', '\a', '\a', '\x2', '\x2', 
		'\x524', '\x517', '\x3', '\x2', '\x2', '\x2', '\x524', '\x51F', '\x3', 
		'\x2', '\x2', '\x2', '\x525', '\x93', '\x3', '\x2', '\x2', '\x2', '\x526', 
		'\x52F', '\x5', '\x9E', 'P', '\x2', '\x527', '\x528', '\a', '\x6', '\x2', 
		'\x2', '\x528', '\x529', '\a', '&', '\x2', '\x2', '\x529', '\x530', '\a', 
		'\a', '\x2', '\x2', '\x52A', '\x52B', '\a', '\x6', '\x2', '\x2', '\x52B', 
		'\x52C', '\a', '&', '\x2', '\x2', '\x52C', '\x52D', '\a', '\b', '\x2', 
		'\x2', '\x52D', '\x52E', '\a', '&', '\x2', '\x2', '\x52E', '\x530', '\a', 
		'\a', '\x2', '\x2', '\x52F', '\x527', '\x3', '\x2', '\x2', '\x2', '\x52F', 
		'\x52A', '\x3', '\x2', '\x2', '\x2', '\x52F', '\x530', '\x3', '\x2', '\x2', 
		'\x2', '\x530', '\x95', '\x3', '\x2', '\x2', '\x2', '\x531', '\x532', 
		'\x5', '\x9E', 'P', '\x2', '\x532', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x533', '\x534', '\x5', '\x9E', 'P', '\x2', '\x534', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x535', '\x536', '\a', '\xBF', '\x2', '\x2', '\x536', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x537', '\x538', '\x5', '\x9E', 'P', '\x2', 
		'\x538', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x539', '\x53C', '\a', '\xBF', 
		'\x2', '\x2', '\x53A', '\x53C', '\x5', '\xA0', 'Q', '\x2', '\x53B', '\x539', 
		'\x3', '\x2', '\x2', '\x2', '\x53B', '\x53A', '\x3', '\x2', '\x2', '\x2', 
		'\x53C', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x53D', '\x53E', '\t', '\x1B', 
		'\x2', '\x2', '\x53E', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x540', 
		'\t', '\x1C', '\x2', '\x2', '\x540', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\x541', '\x542', '\t', '\x1D', '\x2', '\x2', '\x542', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xB7', '\xC3', '\xC7', '\xCC', '\xD4', '\xE5', 
		'\xE8', '\xEC', '\xEF', '\x101', '\x107', '\x10E', '\x112', '\x115', '\x119', 
		'\x134', '\x139', '\x13C', '\x141', '\x149', '\x151', '\x154', '\x156', 
		'\x159', '\x15D', '\x161', '\x166', '\x169', '\x16D', '\x173', '\x178', 
		'\x17C', '\x17F', '\x183', '\x189', '\x193', '\x197', '\x19B', '\x19D', 
		'\x1AC', '\x1B5', '\x1BB', '\x1C2', '\x1C8', '\x1CE', '\x1D5', '\x1DD', 
		'\x1E3', '\x1E5', '\x1F6', '\x1FB', '\x206', '\x20E', '\x215', '\x21A', 
		'\x223', '\x226', '\x22B', '\x234', '\x236', '\x23B', '\x23E', '\x242', 
		'\x246', '\x24B', '\x24D', '\x25E', '\x261', '\x266', '\x26B', '\x270', 
		'\x277', '\x27A', '\x281', '\x28A', '\x28D', '\x28F', '\x29B', '\x2A4', 
		'\x2AF', '\x2B9', '\x2C2', '\x2C9', '\x2D0', '\x2D5', '\x2DC', '\x2E6', 
		'\x2E9', '\x2EB', '\x2F4', '\x2F6', '\x2F8', '\x300', '\x304', '\x308', 
		'\x30C', '\x310', '\x314', '\x323', '\x329', '\x32C', '\x330', '\x339', 
		'\x33F', '\x345', '\x34B', '\x350', '\x354', '\x359', '\x35F', '\x369', 
		'\x373', '\x37A', '\x37C', '\x383', '\x389', '\x38B', '\x391', '\x396', 
		'\x39A', '\x3A2', '\x3B7', '\x3BD', '\x3C2', '\x3C9', '\x3CF', '\x3D8', 
		'\x3DE', '\x3F4', '\x3FF', '\x401', '\x40D', '\x42F', '\x433', '\x43F', 
		'\x443', '\x447', '\x45E', '\x460', '\x46A', '\x47C', '\x480', '\x484', 
		'\x49B', '\x4C3', '\x4C8', '\x4CC', '\x4D2', '\x4DA', '\x4E1', '\x4E6', 
		'\x4ED', '\x4F4', '\x4FB', '\x502', '\x50A', '\x50D', '\x511', '\x515', 
		'\x51D', '\x524', '\x52F', '\x53B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
