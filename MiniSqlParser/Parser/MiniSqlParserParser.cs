//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniSqlParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class MiniSqlParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SCOL=1, DOT=2, LPAR=3, RPAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, MINUS=9, 
		TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, LT=18, 
		LT_EQ=19, GT=20, GT_EQ=21, EQ=22, NOT_EQ1=23, NOT_EQ2=24, OUTER_JOIN=25, 
		UINTEGER_LITERAL=26, UNUMERIC_LITERAL=27, DATE_LITERAL=28, TIME_LITERAL=29, 
		TIMESTAMP_LITERAL=30, INTERVAL_LITERAL=31, STRING_LITERAL=32, BLOB_LITERAL=33, 
		K_ABORT=34, K_ALL=35, K_AND=36, K_ANY=37, K_AS=38, K_ASC=39, K_AVG=40, 
		K_BEGIN=41, K_BETWEEN=42, K_BY=43, K_CALL=44, K_CASE=45, K_CAST=46, K_COLLATE=47, 
		K_CORR=48, K_COUNT=49, K_COUNT_BIG=50, K_CROSS=51, K_CURRENT_DATE=52, 
		K_CURRENT_TIME=53, K_CURRENT_TIMESTAMP=54, K_DATE=55, K_DAY=56, K_DECLARE=57, 
		K_DEFAULT=58, K_DELETE=59, K_DESC=60, K_DISTINCT=61, K_ELSE=62, K_ELSIF=63, 
		K_END=64, K_ESCAPE=65, K_EXCEPT=66, K_EXEC=67, K_EXECUTE=68, K_EXISTS=69, 
		K_EXTRACT=70, K_FAIL=71, K_FETCH=72, K_FIRST=73, K_FOR=74, K_FROM=75, 
		K_FULL=76, K_GLOB=77, K_GROUP=78, K_GROUP_CONCAT=79, K_HAVING=80, K_HOUR=81, 
		K_IF=82, K_IGNORE=83, K_IN=84, K_INDEXED=85, K_INNER=86, K_INSERT=87, 
		K_INTERSECT=88, K_INTERVAL=89, K_INTO=90, K_IS=91, K_JOIN=92, K_LAST=93, 
		K_LEFT=94, K_LIKE=95, K_LIMIT=96, K_LOCKED=97, K_MATCH=98, K_MATCHED=99, 
		K_MAX=100, K_MEDIAN=101, K_MERGE=102, K_MIN=103, K_MINUS=104, K_MINUTE=105, 
		K_MONTH=106, K_NATURAL=107, K_NEXT=108, K_NOT=109, K_NOWAIT=110, K_NULL=111, 
		K_NULLS=112, K_OF=113, K_OFFSET=114, K_ON=115, K_ONLY=116, K_OR=117, K_ORDER=118, 
		K_OUTER=119, K_OUTPUT=120, K_OVER=121, K_PRAGMA=122, K_PARTITION=123, 
		K_RECURSIVE=124, K_REGEXP=125, K_REPLACE=126, K_PERCENT=127, K_RIGHT=128, 
		K_ROLLBACK=129, K_ROW=130, K_ROWS=131, K_SECOND=132, K_SELECT=133, K_SET=134, 
		K_SKIP=135, K_SOME=136, K_SUM=137, K_STDEVP=138, K_STDDEV=139, K_STDDEV_POP=140, 
		K_STDEV=141, K_SUBSTR=142, K_SUBSTRING=143, K_TABLE=144, K_TABLE_INFO=145, 
		K_THEN=146, K_TIES=147, K_TIME=148, K_TIMESTAMP=149, K_TO=150, K_TOP=151, 
		K_TOTAL=152, K_TRUNCATE=153, K_UNION=154, K_UPDATE=155, K_USING=156, K_VALUES=157, 
		K_VAR=158, K_VARIANCE=159, K_VARP=160, K_VAR_POP=161, K_WAIT=162, K_WHEN=163, 
		K_WHERE=164, K_WITH=165, K_YEAR=166, PLACEHOLDER1=167, PLACEHOLDER2=168, 
		IDENTIFIER=169, INVALID_IDENTIFIER=170, SINGLE_LINE_COMMENT=171, PH_ASSIGN_COMMENT=172, 
		AUTO_WHERE_COMMENT=173, TABLE_ALIAS_COMMENT=174, MULTILINE_COMMENT=175, 
		SPACES=176, UNEXPECTED_CHAR=177;
	public const int
		RULE_stmts_root = 0, RULE_stmt_root = 1, RULE_query_root = 2, RULE_predicate_root = 3, 
		RULE_expr_root = 4, RULE_placeholder_root = 5, RULE_stmts = 6, RULE_scols = 7, 
		RULE_error = 8, RULE_stmt = 9, RULE_stmt_sub = 10, RULE_select_stmt = 11, 
		RULE_update_stmt = 12, RULE_insert_stmt = 13, RULE_delete_stmt = 14, RULE_merge_stmt = 15, 
		RULE_merge_update_clause = 16, RULE_merge_insert_clause = 17, RULE_call_stmt = 18, 
		RULE_truncate_stmt = 19, RULE_if_stmt = 20, RULE_sqlite_pragma_stmt = 21, 
		RULE_null_stmt = 22, RULE_with_clause = 23, RULE_with_definition = 24, 
		RULE_query = 25, RULE_query_clause = 26, RULE_aliased_query = 27, RULE_result_columns = 28, 
		RULE_result_column = 29, RULE_assignments = 30, RULE_column_names = 31, 
		RULE_unqualified_column_names = 32, RULE_values_clauses = 33, RULE_value_columns = 34, 
		RULE_value_column = 35, RULE_exprs = 36, RULE_join_clause = 37, RULE_join_constraint = 38, 
		RULE_join_operator = 39, RULE_groupBy_clause = 40, RULE_orderBy_clause = 41, 
		RULE_ordering_term = 42, RULE_partitionBy_clause = 43, RULE_partitioning_term = 44, 
		RULE_declare = 45, RULE_params = 46, RULE_param = 47, RULE_out_param = 48, 
		RULE_limit_clause = 49, RULE_for_update_clause = 50, RULE_for_update_of_clause = 51, 
		RULE_predicate = 52, RULE_expr = 53, RULE_substring_function = 54, RULE_extract_function = 55, 
		RULE_aggregate_function1 = 56, RULE_aggregate_function2 = 57, RULE_window_function = 58, 
		RULE_generic_function = 59, RULE_qualified_schema_name = 60, RULE_function_name = 61, 
		RULE_index_name = 62, RULE_table_name = 63, RULE_column_name = 64, RULE_unqualified_column_name = 65, 
		RULE_aliased_table_name = 66, RULE_indexed_table_name = 67, RULE_indexed_aliased_table_name = 68, 
		RULE_type_name = 69, RULE_collation_name = 70, RULE_table_alias = 71, 
		RULE_column_alias = 72, RULE_identifier = 73, RULE_identifiable_keyword = 74, 
		RULE_literal_value = 75, RULE_datetimeField = 76;
	public static readonly string[] ruleNames = {
		"stmts_root", "stmt_root", "query_root", "predicate_root", "expr_root", 
		"placeholder_root", "stmts", "scols", "error", "stmt", "stmt_sub", "select_stmt", 
		"update_stmt", "insert_stmt", "delete_stmt", "merge_stmt", "merge_update_clause", 
		"merge_insert_clause", "call_stmt", "truncate_stmt", "if_stmt", "sqlite_pragma_stmt", 
		"null_stmt", "with_clause", "with_definition", "query", "query_clause", 
		"aliased_query", "result_columns", "result_column", "assignments", "column_names", 
		"unqualified_column_names", "values_clauses", "value_columns", "value_column", 
		"exprs", "join_clause", "join_constraint", "join_operator", "groupBy_clause", 
		"orderBy_clause", "ordering_term", "partitionBy_clause", "partitioning_term", 
		"declare", "params", "param", "out_param", "limit_clause", "for_update_clause", 
		"for_update_of_clause", "predicate", "expr", "substring_function", "extract_function", 
		"aggregate_function1", "aggregate_function2", "window_function", "generic_function", 
		"qualified_schema_name", "function_name", "index_name", "table_name", 
		"column_name", "unqualified_column_name", "aliased_table_name", "indexed_table_name", 
		"indexed_aliased_table_name", "type_name", "collation_name", "table_alias", 
		"column_alias", "identifier", "identifiable_keyword", "literal_value", 
		"datetimeField"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'<>'", "'(+)'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "LPAR", "RPAR", "COMMA", "ASSIGN", "STAR", "PLUS", 
		"MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
		"LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "OUTER_JOIN", 
		"UINTEGER_LITERAL", "UNUMERIC_LITERAL", "DATE_LITERAL", "TIME_LITERAL", 
		"TIMESTAMP_LITERAL", "INTERVAL_LITERAL", "STRING_LITERAL", "BLOB_LITERAL", 
		"K_ABORT", "K_ALL", "K_AND", "K_ANY", "K_AS", "K_ASC", "K_AVG", "K_BEGIN", 
		"K_BETWEEN", "K_BY", "K_CALL", "K_CASE", "K_CAST", "K_COLLATE", "K_CORR", 
		"K_COUNT", "K_COUNT_BIG", "K_CROSS", "K_CURRENT_DATE", "K_CURRENT_TIME", 
		"K_CURRENT_TIMESTAMP", "K_DATE", "K_DAY", "K_DECLARE", "K_DEFAULT", "K_DELETE", 
		"K_DESC", "K_DISTINCT", "K_ELSE", "K_ELSIF", "K_END", "K_ESCAPE", "K_EXCEPT", 
		"K_EXEC", "K_EXECUTE", "K_EXISTS", "K_EXTRACT", "K_FAIL", "K_FETCH", "K_FIRST", 
		"K_FOR", "K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_GROUP_CONCAT", "K_HAVING", 
		"K_HOUR", "K_IF", "K_IGNORE", "K_IN", "K_INDEXED", "K_INNER", "K_INSERT", 
		"K_INTERSECT", "K_INTERVAL", "K_INTO", "K_IS", "K_JOIN", "K_LAST", "K_LEFT", 
		"K_LIKE", "K_LIMIT", "K_LOCKED", "K_MATCH", "K_MATCHED", "K_MAX", "K_MEDIAN", 
		"K_MERGE", "K_MIN", "K_MINUS", "K_MINUTE", "K_MONTH", "K_NATURAL", "K_NEXT", 
		"K_NOT", "K_NOWAIT", "K_NULL", "K_NULLS", "K_OF", "K_OFFSET", "K_ON", 
		"K_ONLY", "K_OR", "K_ORDER", "K_OUTER", "K_OUTPUT", "K_OVER", "K_PRAGMA", 
		"K_PARTITION", "K_RECURSIVE", "K_REGEXP", "K_REPLACE", "K_PERCENT", "K_RIGHT", 
		"K_ROLLBACK", "K_ROW", "K_ROWS", "K_SECOND", "K_SELECT", "K_SET", "K_SKIP", 
		"K_SOME", "K_SUM", "K_STDEVP", "K_STDDEV", "K_STDDEV_POP", "K_STDEV", 
		"K_SUBSTR", "K_SUBSTRING", "K_TABLE", "K_TABLE_INFO", "K_THEN", "K_TIES", 
		"K_TIME", "K_TIMESTAMP", "K_TO", "K_TOP", "K_TOTAL", "K_TRUNCATE", "K_UNION", 
		"K_UPDATE", "K_USING", "K_VALUES", "K_VAR", "K_VARIANCE", "K_VARP", "K_VAR_POP", 
		"K_WAIT", "K_WHEN", "K_WHERE", "K_WITH", "K_YEAR", "PLACEHOLDER1", "PLACEHOLDER2", 
		"IDENTIFIER", "INVALID_IDENTIFIER", "SINGLE_LINE_COMMENT", "PH_ASSIGN_COMMENT", 
		"AUTO_WHERE_COMMENT", "TABLE_ALIAS_COMMENT", "MULTILINE_COMMENT", "SPACES", 
		"UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniSqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MiniSqlParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	  public bool IsOracle{ get; set; }
	  public bool IsMySql { get; set; }
	  public bool IsSQLite{ get; set; }
	  public bool IsMsSql { get; set; }
	  public bool IsPostgreSql{ get; set; }
	  public bool IsPervasive { get; set; }

		public MiniSqlParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniSqlParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Stmts_rootContext : ParserRuleContext {
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		public Stmts_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterStmts_root(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitStmts_root(this);
		}
	}

	[RuleVersion(0)]
	public Stmts_rootContext stmts_root() {
		Stmts_rootContext _localctx = new Stmts_rootContext(Context, State);
		EnterRule(_localctx, 0, RULE_stmts_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; stmts();
			State = 155; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_rootContext : ParserRuleContext {
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		public Stmt_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterStmt_root(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitStmt_root(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_rootContext stmt_root() {
		Stmt_rootContext _localctx = new Stmt_rootContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmt_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; stmt();
			State = 158; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_rootContext : ParserRuleContext {
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		public Query_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery_root(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery_root(this);
		}
	}

	[RuleVersion(0)]
	public Query_rootContext query_root() {
		Query_rootContext _localctx = new Query_rootContext(Context, State);
		EnterRule(_localctx, 4, RULE_query_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; query();
			State = 161; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predicate_rootContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		public Predicate_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate_root(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate_root(this);
		}
	}

	[RuleVersion(0)]
	public Predicate_rootContext predicate_root() {
		Predicate_rootContext _localctx = new Predicate_rootContext(Context, State);
		EnterRule(_localctx, 6, RULE_predicate_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; predicate(0);
			State = 164; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_rootContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		public Expr_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterExpr_root(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitExpr_root(this);
		}
	}

	[RuleVersion(0)]
	public Expr_rootContext expr_root() {
		Expr_rootContext _localctx = new Expr_rootContext(Context, State);
		EnterRule(_localctx, 8, RULE_expr_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; expr(0);
			State = 167; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Placeholder_rootContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MiniSqlParserParser.Eof, 0); }
		public Value_columnContext value_column() {
			return GetRuleContext<Value_columnContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Placeholder_rootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholder_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPlaceholder_root(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPlaceholder_root(this);
		}
	}

	[RuleVersion(0)]
	public Placeholder_rootContext placeholder_root() {
		Placeholder_rootContext _localctx = new Placeholder_rootContext(Context, State);
		EnterRule(_localctx, 10, RULE_placeholder_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 169; value_column();
				}
				break;
			case 2:
				{
				State = 170; predicate(0);
				}
				break;
			}
			State = 173; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public ScolsContext c1;
		public ScolsContext _scols;
		public IList<ScolsContext> _c2 = new List<ScolsContext>();
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ScolsContext[] scols() {
			return GetRuleContexts<ScolsContext>();
		}
		public ScolsContext scols(int i) {
			return GetRuleContext<ScolsContext>(i);
		}
		public ITerminalNode[] SCOL() { return GetTokens(MiniSqlParserParser.SCOL); }
		public ITerminalNode SCOL(int i) {
			return GetToken(MiniSqlParserParser.SCOL, i);
		}
		public Stmt_subContext[] stmt_sub() {
			return GetRuleContexts<Stmt_subContext>();
		}
		public Stmt_subContext stmt_sub(int i) {
			return GetRuleContext<Stmt_subContext>(i);
		}
		public ErrorContext error() {
			return GetRuleContext<ErrorContext>(0);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 12, RULE_stmts);
		int _la;
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; stmt();
				State = 176; _localctx.c1 = scols();
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SCOL) {
					{
					{
					State = 177; Match(SCOL);
					State = 178; stmt_sub();
					State = 179; _localctx._scols = scols();
					_localctx._c2.Add(_localctx._scols);
					}
					}
					State = 185;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; error();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScolsContext : ParserRuleContext {
		public ITerminalNode[] SCOL() { return GetTokens(MiniSqlParserParser.SCOL); }
		public ITerminalNode SCOL(int i) {
			return GetToken(MiniSqlParserParser.SCOL, i);
		}
		public ScolsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scols; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterScols(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitScols(this);
		}
	}

	[RuleVersion(0)]
	public ScolsContext scols() {
		ScolsContext _localctx = new ScolsContext(Context, State);
		EnterRule(_localctx, 14, RULE_scols);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 189; Match(SCOL);
					}
					} 
				}
				State = 194;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public IToken _UNEXPECTED_CHAR;
		public ITerminalNode UNEXPECTED_CHAR() { return GetToken(MiniSqlParserParser.UNEXPECTED_CHAR, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(Context, State);
		EnterRule(_localctx, 16, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; _localctx._UNEXPECTED_CHAR = Match(UNEXPECTED_CHAR);
			 
			     throw new RecognitionException("UNEXPECTED_CHAR=" + (_localctx._UNEXPECTED_CHAR!=null?_localctx._UNEXPECTED_CHAR.Text:null)
			                                    ,this, this.InputStream, _localctx); 
			   
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public Stmt_subContext stmt_sub() {
			return GetRuleContext<Stmt_subContext>(0);
		}
		public Null_stmtContext null_stmt() {
			return GetRuleContext<Null_stmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_stmt);
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; stmt_sub();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; null_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_subContext : ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		public Merge_stmtContext merge_stmt() {
			return GetRuleContext<Merge_stmtContext>(0);
		}
		public Call_stmtContext call_stmt() {
			return GetRuleContext<Call_stmtContext>(0);
		}
		public Truncate_stmtContext truncate_stmt() {
			return GetRuleContext<Truncate_stmtContext>(0);
		}
		public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		public Sqlite_pragma_stmtContext sqlite_pragma_stmt() {
			return GetRuleContext<Sqlite_pragma_stmtContext>(0);
		}
		public Stmt_subContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterStmt_sub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitStmt_sub(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_subContext stmt_sub() {
		Stmt_subContext _localctx = new Stmt_subContext(Context, State);
		EnterRule(_localctx, 20, RULE_stmt_sub);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202; select_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; update_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 204; insert_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 205; delete_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 206;
				if (!(IsOracle || IsMsSql)) throw new FailedPredicateException(this, "IsOracle || IsMsSql");
				State = 207; merge_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 208;
				if (!(IsOracle || IsMySql || IsMsSql || IsPervasive)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsMsSql || IsPervasive");
				State = 209; call_stmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 210;
				if (!(IsOracle || IsMySql || IsMsSql || IsPostgreSql)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsMsSql || IsPostgreSql");
				State = 211; truncate_stmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 212; if_stmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 213;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 214; sqlite_pragma_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public For_update_clauseContext for_update_clause() {
			return GetRuleContext<For_update_clauseContext>(0);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 217; with_clause();
				}
			}

			State = 220; query();
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 221; for_update_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		public ITerminalNode K_UPDATE() { return GetToken(MiniSqlParserParser.K_UPDATE, 0); }
		public ITerminalNode K_SET() { return GetToken(MiniSqlParserParser.K_SET, 0); }
		public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		public Indexed_table_nameContext indexed_table_name() {
			return GetRuleContext<Indexed_table_nameContext>(0);
		}
		public Aliased_table_nameContext[] aliased_table_name() {
			return GetRuleContexts<Aliased_table_nameContext>();
		}
		public Aliased_table_nameContext aliased_table_name(int i) {
			return GetRuleContext<Aliased_table_nameContext>(i);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_OR() { return GetToken(MiniSqlParserParser.K_OR, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(MiniSqlParserParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(MiniSqlParserParser.K_ABORT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(MiniSqlParserParser.K_REPLACE, 0); }
		public ITerminalNode K_FAIL() { return GetToken(MiniSqlParserParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(MiniSqlParserParser.K_IGNORE, 0); }
		public ITerminalNode K_FROM() { return GetToken(MiniSqlParserParser.K_FROM, 0); }
		public ITerminalNode K_WHERE() { return GetToken(MiniSqlParserParser.K_WHERE, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 224; with_clause();
				}
			}

			State = 227; Match(K_UPDATE);
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 228;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 229; Match(K_OR);
				State = 230; Match(K_ROLLBACK);
				}
				break;
			case 2:
				{
				State = 231;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 232; Match(K_OR);
				State = 233; Match(K_ABORT);
				}
				break;
			case 3:
				{
				State = 234;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 235; Match(K_OR);
				State = 236; Match(K_REPLACE);
				}
				break;
			case 4:
				{
				State = 237;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 238; Match(K_OR);
				State = 239; Match(K_FAIL);
				}
				break;
			case 5:
				{
				State = 240;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 241; Match(K_OR);
				State = 242; Match(K_IGNORE);
				}
				break;
			}
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 245;
				if (!(IsSQLite || IsMsSql)) throw new FailedPredicateException(this, "IsSQLite || IsMsSql");
				State = 246; indexed_table_name();
				}
				break;
			case 2:
				{
				State = 247;
				if (!(IsOracle || IsMySql || IsPostgreSql || IsPervasive)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsPostgreSql || IsPervasive");
				State = 248; aliased_table_name();
				}
				break;
			}
			State = 251; Match(K_SET);
			State = 252; assignments();
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 253;
				if (!(IsMsSql || IsPostgreSql)) throw new FailedPredicateException(this, "IsMsSql || IsPostgreSql");
				State = 254; Match(K_FROM);
				State = 255; aliased_table_name();
				}
				break;
			}
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 258; Match(K_WHERE);
				State = 259; predicate(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_INSERT() { return GetToken(MiniSqlParserParser.K_INSERT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(MiniSqlParserParser.K_REPLACE, 0); }
		public ITerminalNode K_OR() { return GetToken(MiniSqlParserParser.K_OR, 0); }
		public ITerminalNode K_INTO() { return GetToken(MiniSqlParserParser.K_INTO, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(MiniSqlParserParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(MiniSqlParserParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(MiniSqlParserParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(MiniSqlParserParser.K_IGNORE, 0); }
		public ITerminalNode K_VALUES() { return GetToken(MiniSqlParserParser.K_VALUES, 0); }
		public Values_clausesContext values_clauses() {
			return GetRuleContext<Values_clausesContext>(0);
		}
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Unqualified_column_namesContext unqualified_column_names() {
			return GetRuleContext<Unqualified_column_namesContext>(0);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterInsert_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitInsert_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_insert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 262; with_clause();
				}
				break;
			}
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 265; Match(K_INSERT);
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_INTO) {
					{
					State = 266; Match(K_INTO);
					}
				}

				}
				break;
			case 2:
				{
				State = 269;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 270; Match(K_REPLACE);
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_INTO) {
					{
					State = 271; Match(K_INTO);
					}
				}

				}
				break;
			case 3:
				{
				State = 274;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 275; Match(K_INSERT);
				State = 276; Match(K_OR);
				State = 277; Match(K_REPLACE);
				State = 278; Match(K_INTO);
				}
				break;
			case 4:
				{
				State = 279;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 280; Match(K_INSERT);
				State = 281; Match(K_OR);
				State = 282; Match(K_ROLLBACK);
				State = 283; Match(K_INTO);
				}
				break;
			case 5:
				{
				State = 284;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 285; Match(K_INSERT);
				State = 286; Match(K_OR);
				State = 287; Match(K_ABORT);
				State = 288; Match(K_INTO);
				}
				break;
			case 6:
				{
				State = 289;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 290; Match(K_INSERT);
				State = 291; Match(K_OR);
				State = 292; Match(K_FAIL);
				State = 293; Match(K_INTO);
				}
				break;
			case 7:
				{
				State = 294;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 295; Match(K_INSERT);
				State = 296; Match(K_OR);
				State = 297; Match(K_IGNORE);
				State = 298; Match(K_INTO);
				}
				break;
			}
			State = 301; table_name();
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 302; unqualified_column_names();
				}
				break;
			}
			State = 308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 305; Match(K_VALUES);
				State = 306; values_clauses();
				}
				break;
			case 2:
				{
				State = 307; query();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		public IToken f1;
		public IToken f2;
		public ITerminalNode K_DELETE() { return GetToken(MiniSqlParserParser.K_DELETE, 0); }
		public Indexed_table_nameContext indexed_table_name() {
			return GetRuleContext<Indexed_table_nameContext>(0);
		}
		public Aliased_table_nameContext[] aliased_table_name() {
			return GetRuleContexts<Aliased_table_nameContext>();
		}
		public Aliased_table_nameContext aliased_table_name(int i) {
			return GetRuleContext<Aliased_table_nameContext>(i);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(MiniSqlParserParser.K_WHERE, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode[] K_FROM() { return GetTokens(MiniSqlParserParser.K_FROM); }
		public ITerminalNode K_FROM(int i) {
			return GetToken(MiniSqlParserParser.K_FROM, i);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 310; with_clause();
				}
			}

			State = 313; Match(K_DELETE);
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 314; _localctx.f1 = Match(K_FROM);
				}
				break;
			}
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 317;
				if (!(IsMySql  || IsSQLite     || IsMsSql)) throw new FailedPredicateException(this, "IsMySql  || IsSQLite     || IsMsSql");
				State = 318; indexed_table_name();
				}
				break;
			case 2:
				{
				State = 319;
				if (!(IsOracle || IsPostgreSql || IsPervasive)) throw new FailedPredicateException(this, "IsOracle || IsPostgreSql || IsPervasive");
				State = 320; aliased_table_name();
				}
				break;
			}
			State = 326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 323;
				if (!(IsMsSql)) throw new FailedPredicateException(this, "IsMsSql");
				State = 324; _localctx.f2 = Match(K_FROM);
				State = 325; aliased_table_name();
				}
				break;
			}
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 328; Match(K_WHERE);
				State = 329; predicate(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_stmtContext : ParserRuleContext {
		public Merge_update_clauseContext primary;
		public Merge_insert_clauseContext secondary;
		public ITerminalNode K_MERGE() { return GetToken(MiniSqlParserParser.K_MERGE, 0); }
		public ITerminalNode K_INTO() { return GetToken(MiniSqlParserParser.K_INTO, 0); }
		public Aliased_table_nameContext[] aliased_table_name() {
			return GetRuleContexts<Aliased_table_nameContext>();
		}
		public Aliased_table_nameContext aliased_table_name(int i) {
			return GetRuleContext<Aliased_table_nameContext>(i);
		}
		public ITerminalNode K_USING() { return GetToken(MiniSqlParserParser.K_USING, 0); }
		public ITerminalNode K_ON() { return GetToken(MiniSqlParserParser.K_ON, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Aliased_queryContext aliased_query() {
			return GetRuleContext<Aliased_queryContext>(0);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return GetRuleContext<Merge_update_clauseContext>(0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return GetRuleContext<Merge_insert_clauseContext>(0);
		}
		public Merge_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Merge_stmtContext merge_stmt() {
		Merge_stmtContext _localctx = new Merge_stmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_merge_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 332; with_clause();
				}
			}

			State = 335; Match(K_MERGE);
			State = 336; Match(K_INTO);
			State = 337; aliased_table_name();
			State = 338; Match(K_USING);
			State = 341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_ABORT:
			case K_ANY:
			case K_ASC:
			case K_AVG:
			case K_BEGIN:
			case K_CAST:
			case K_COLLATE:
			case K_CORR:
			case K_COUNT:
			case K_COUNT_BIG:
			case K_CROSS:
			case K_DATE:
			case K_DAY:
			case K_DECLARE:
			case K_DEFAULT:
			case K_DESC:
			case K_ESCAPE:
			case K_EXEC:
			case K_EXECUTE:
			case K_EXTRACT:
			case K_FAIL:
			case K_FETCH:
			case K_FIRST:
			case K_FOR:
			case K_FULL:
			case K_GLOB:
			case K_GROUP_CONCAT:
			case K_HOUR:
			case K_IGNORE:
			case K_INDEXED:
			case K_INNER:
			case K_INTERVAL:
			case K_LAST:
			case K_LEFT:
			case K_LIMIT:
			case K_LOCKED:
			case K_MATCH:
			case K_MATCHED:
			case K_MAX:
			case K_MEDIAN:
			case K_MIN:
			case K_MINUS:
			case K_MINUTE:
			case K_MONTH:
			case K_NATURAL:
			case K_NEXT:
			case K_NOWAIT:
			case K_NULLS:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_ONLY:
			case K_OUTER:
			case K_OUTPUT:
			case K_OVER:
			case K_PRAGMA:
			case K_PARTITION:
			case K_RECURSIVE:
			case K_REGEXP:
			case K_REPLACE:
			case K_PERCENT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_ROWS:
			case K_SECOND:
			case K_SKIP:
			case K_SOME:
			case K_SUM:
			case K_STDEVP:
			case K_STDDEV:
			case K_STDDEV_POP:
			case K_STDEV:
			case K_SUBSTR:
			case K_SUBSTRING:
			case K_TABLE:
			case K_TABLE_INFO:
			case K_TIES:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TO:
			case K_TOP:
			case K_TOTAL:
			case K_USING:
			case K_VAR:
			case K_VARIANCE:
			case K_VARP:
			case K_VAR_POP:
			case K_WAIT:
			case K_WITH:
			case K_YEAR:
			case IDENTIFIER:
				{
				State = 339; aliased_table_name();
				}
				break;
			case LPAR:
				{
				State = 340; aliased_query();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 343; Match(K_ON);
			State = 344; Match(LPAR);
			State = 345; predicate(0);
			State = 346; Match(RPAR);
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 347; _localctx.primary = merge_update_clause();
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_WHEN) {
					{
					State = 348; merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				State = 351; _localctx.secondary = merge_insert_clause();
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_WHEN) {
					{
					State = 352; merge_update_clause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_clauseContext : ParserRuleContext {
		public ITerminalNode K_WHEN() { return GetToken(MiniSqlParserParser.K_WHEN, 0); }
		public ITerminalNode K_MATCHED() { return GetToken(MiniSqlParserParser.K_MATCHED, 0); }
		public ITerminalNode K_THEN() { return GetToken(MiniSqlParserParser.K_THEN, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(MiniSqlParserParser.K_UPDATE, 0); }
		public ITerminalNode K_SET() { return GetToken(MiniSqlParserParser.K_SET, 0); }
		public AssignmentsContext assignments() {
			return GetRuleContext<AssignmentsContext>(0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_update_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_update_clause(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_clauseContext merge_update_clause() {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_merge_update_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(K_WHEN);
			State = 358; Match(K_MATCHED);
			State = 359; Match(K_THEN);
			State = 360; Match(K_UPDATE);
			State = 361; Match(K_SET);
			State = 362; assignments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_insert_clauseContext : ParserRuleContext {
		public ITerminalNode K_WHEN() { return GetToken(MiniSqlParserParser.K_WHEN, 0); }
		public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public ITerminalNode K_MATCHED() { return GetToken(MiniSqlParserParser.K_MATCHED, 0); }
		public ITerminalNode K_THEN() { return GetToken(MiniSqlParserParser.K_THEN, 0); }
		public ITerminalNode K_INSERT() { return GetToken(MiniSqlParserParser.K_INSERT, 0); }
		public ITerminalNode K_VALUES() { return GetToken(MiniSqlParserParser.K_VALUES, 0); }
		public Value_columnsContext value_columns() {
			return GetRuleContext<Value_columnsContext>(0);
		}
		public Column_namesContext column_names() {
			return GetRuleContext<Column_namesContext>(0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_insert_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterMerge_insert_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitMerge_insert_clause(this);
		}
	}

	[RuleVersion(0)]
	public Merge_insert_clauseContext merge_insert_clause() {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_merge_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(K_WHEN);
			State = 365; Match(K_NOT);
			State = 366; Match(K_MATCHED);
			State = 367; Match(K_THEN);
			State = 368; Match(K_INSERT);
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 369; column_names();
				}
			}

			State = 372; Match(K_VALUES);
			State = 373; value_columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_stmtContext : ParserRuleContext {
		public ITerminalNode K_BEGIN() { return GetToken(MiniSqlParserParser.K_BEGIN, 0); }
		public ITerminalNode K_CALL() { return GetToken(MiniSqlParserParser.K_CALL, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode K_END() { return GetToken(MiniSqlParserParser.K_END, 0); }
		public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public ITerminalNode K_EXEC() { return GetToken(MiniSqlParserParser.K_EXEC, 0); }
		public ITerminalNode K_EXECUTE() { return GetToken(MiniSqlParserParser.K_EXECUTE, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public Call_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCall_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCall_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Call_stmtContext call_stmt() {
		Call_stmtContext _localctx = new Call_stmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_call_stmt);
		int _la;
		try {
			int _alt;
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 375;
				if (!(IsOracle)) throw new FailedPredicateException(this, "IsOracle");
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==K_DECLARE) {
					{
					{
					State = 376; declare();
					}
					}
					State = 381;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 382; Match(SCOL);
					}
					}
					State = 385;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SCOL );
				State = 387; Match(K_BEGIN);
				State = 388; Match(K_CALL);
				State = 389; function_name();
				State = 390; Match(LPAR);
				State = 392;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 391; exprs();
					}
					break;
				}
				State = 394; Match(RPAR);
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 395; Match(SCOL);
					}
					}
					State = 398;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SCOL );
				State = 400; Match(K_END);
				State = 402;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 401; Match(SCOL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 404;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406;
				if (!(IsMySql || IsPervasive)) throw new FailedPredicateException(this, "IsMySql || IsPervasive");
				State = 407; Match(K_CALL);
				State = 408; function_name();
				State = 409; Match(LPAR);
				State = 411;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 410; exprs();
					}
					break;
				}
				State = 413; Match(RPAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 415;
				if (!(IsMsSql)) throw new FailedPredicateException(this, "IsMsSql");
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==K_DECLARE) {
					{
					{
					State = 416; declare();
					}
					}
					State = 421;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 422;
				_la = TokenStream.LA(1);
				if ( !(_la==K_EXEC || _la==K_EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 423; function_name();
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UINTEGER_LITERAL) | (1L << UNUMERIC_LITERAL) | (1L << DATE_LITERAL) | (1L << TIME_LITERAL) | (1L << TIMESTAMP_LITERAL) | (1L << INTERVAL_LITERAL) | (1L << STRING_LITERAL) | (1L << BLOB_LITERAL))) != 0) || _la==K_NULL || _la==PLACEHOLDER1) {
					{
					State = 424; @params();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truncate_stmtContext : ParserRuleContext {
		public ITerminalNode K_TRUNCATE() { return GetToken(MiniSqlParserParser.K_TRUNCATE, 0); }
		public ITerminalNode K_TABLE() { return GetToken(MiniSqlParserParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Truncate_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncate_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterTruncate_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitTruncate_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Truncate_stmtContext truncate_stmt() {
		Truncate_stmtContext _localctx = new Truncate_stmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_truncate_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; Match(K_TRUNCATE);
			State = 430; Match(K_TABLE);
			State = 431; table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public ITerminalNode[] K_IF() { return GetTokens(MiniSqlParserParser.K_IF); }
		public ITerminalNode K_IF(int i) {
			return GetToken(MiniSqlParserParser.K_IF, i);
		}
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode[] K_THEN() { return GetTokens(MiniSqlParserParser.K_THEN); }
		public ITerminalNode K_THEN(int i) {
			return GetToken(MiniSqlParserParser.K_THEN, i);
		}
		public StmtsContext[] stmts() {
			return GetRuleContexts<StmtsContext>();
		}
		public StmtsContext stmts(int i) {
			return GetRuleContext<StmtsContext>(i);
		}
		public ITerminalNode K_END() { return GetToken(MiniSqlParserParser.K_END, 0); }
		public ITerminalNode[] K_ELSIF() { return GetTokens(MiniSqlParserParser.K_ELSIF); }
		public ITerminalNode K_ELSIF(int i) {
			return GetToken(MiniSqlParserParser.K_ELSIF, i);
		}
		public ITerminalNode K_ELSE() { return GetToken(MiniSqlParserParser.K_ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; Match(K_IF);
			State = 434; predicate(0);
			State = 435; Match(K_THEN);
			State = 436; stmts();
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_ELSIF) {
				{
				{
				State = 437; Match(K_ELSIF);
				State = 438; predicate(0);
				State = 439; Match(K_THEN);
				State = 440; stmts();
				}
				}
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ELSE) {
				{
				State = 447; Match(K_ELSE);
				State = 448; stmts();
				}
			}

			State = 451; Match(K_END);
			State = 452; Match(K_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sqlite_pragma_stmtContext : ParserRuleContext {
		public ITerminalNode K_PRAGMA() { return GetToken(MiniSqlParserParser.K_PRAGMA, 0); }
		public ITerminalNode K_TABLE_INFO() { return GetToken(MiniSqlParserParser.K_TABLE_INFO, 0); }
		public ITerminalNode PLACEHOLDER1() { return GetToken(MiniSqlParserParser.PLACEHOLDER1, 0); }
		public ITerminalNode PLACEHOLDER2() { return GetToken(MiniSqlParserParser.PLACEHOLDER2, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Sqlite_pragma_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlite_pragma_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSqlite_pragma_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSqlite_pragma_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Sqlite_pragma_stmtContext sqlite_pragma_stmt() {
		Sqlite_pragma_stmtContext _localctx = new Sqlite_pragma_stmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_sqlite_pragma_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(K_PRAGMA);
			State = 455; Match(K_TABLE_INFO);
			State = 456; Match(LPAR);
			State = 460;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLACEHOLDER1:
				{
				State = 457; Match(PLACEHOLDER1);
				}
				break;
			case PLACEHOLDER2:
				{
				State = 458; Match(PLACEHOLDER2);
				}
				break;
			case K_ABORT:
			case K_ANY:
			case K_ASC:
			case K_AVG:
			case K_BEGIN:
			case K_CAST:
			case K_COLLATE:
			case K_CORR:
			case K_COUNT:
			case K_COUNT_BIG:
			case K_CROSS:
			case K_DATE:
			case K_DAY:
			case K_DECLARE:
			case K_DEFAULT:
			case K_DESC:
			case K_ESCAPE:
			case K_EXEC:
			case K_EXECUTE:
			case K_EXTRACT:
			case K_FAIL:
			case K_FETCH:
			case K_FIRST:
			case K_FOR:
			case K_FULL:
			case K_GLOB:
			case K_GROUP_CONCAT:
			case K_HOUR:
			case K_IGNORE:
			case K_INDEXED:
			case K_INNER:
			case K_INTERVAL:
			case K_LAST:
			case K_LEFT:
			case K_LIMIT:
			case K_LOCKED:
			case K_MATCH:
			case K_MATCHED:
			case K_MAX:
			case K_MEDIAN:
			case K_MIN:
			case K_MINUS:
			case K_MINUTE:
			case K_MONTH:
			case K_NATURAL:
			case K_NEXT:
			case K_NOWAIT:
			case K_NULLS:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_ONLY:
			case K_OUTER:
			case K_OUTPUT:
			case K_OVER:
			case K_PRAGMA:
			case K_PARTITION:
			case K_RECURSIVE:
			case K_REGEXP:
			case K_REPLACE:
			case K_PERCENT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_ROWS:
			case K_SECOND:
			case K_SKIP:
			case K_SOME:
			case K_SUM:
			case K_STDEVP:
			case K_STDDEV:
			case K_STDDEV_POP:
			case K_STDEV:
			case K_SUBSTR:
			case K_SUBSTRING:
			case K_TABLE:
			case K_TABLE_INFO:
			case K_TIES:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TO:
			case K_TOP:
			case K_TOTAL:
			case K_USING:
			case K_VAR:
			case K_VARIANCE:
			case K_VARP:
			case K_VAR_POP:
			case K_WAIT:
			case K_WITH:
			case K_YEAR:
			case IDENTIFIER:
				{
				State = 459; table_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 462; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_stmtContext : ParserRuleContext {
		public Null_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterNull_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitNull_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Null_stmtContext null_stmt() {
		Null_stmtContext _localctx = new Null_stmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_null_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		public ITerminalNode K_WITH() { return GetToken(MiniSqlParserParser.K_WITH, 0); }
		public With_definitionContext[] with_definition() {
			return GetRuleContexts<With_definitionContext>();
		}
		public With_definitionContext with_definition(int i) {
			return GetRuleContext<With_definitionContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(MiniSqlParserParser.K_RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(Context, State);
		EnterRule(_localctx, 46, RULE_with_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; Match(K_WITH);
			State = 468;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 467; Match(K_RECURSIVE);
				}
				break;
			}
			State = 470; with_definition();
			State = 475;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 471; Match(COMMA);
					State = 472; with_definition();
					}
					} 
				}
				State = 477;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_definitionContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public Unqualified_column_namesContext unqualified_column_names() {
			return GetRuleContext<Unqualified_column_namesContext>(0);
		}
		public With_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterWith_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitWith_definition(this);
		}
	}

	[RuleVersion(0)]
	public With_definitionContext with_definition() {
		With_definitionContext _localctx = new With_definitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_with_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478; table_name();
			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 479; unqualified_column_names();
				}
			}

			State = 482; Match(K_AS);
			State = 483; Match(LPAR);
			State = 484; query();
			State = 485; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		public Query_clauseContext query_clause() {
			return GetRuleContext<Query_clauseContext>(0);
		}
		public OrderBy_clauseContext orderBy_clause() {
			return GetRuleContext<OrderBy_clauseContext>(0);
		}
		public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 50, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; query_clause(0);
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 488; orderBy_clause();
				}
				break;
			}
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 491; limit_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_clauseContext : ParserRuleContext {
		public Query_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_clause; } }
	 
		public Query_clauseContext() { }
		public virtual void CopyFrom(Query_clauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueQueryClauseContext : Query_clauseContext {
		public ITerminalNode K_VALUES() { return GetToken(MiniSqlParserParser.K_VALUES, 0); }
		public ExprsContext[] exprs() {
			return GetRuleContexts<ExprsContext>();
		}
		public ExprsContext exprs(int i) {
			return GetRuleContext<ExprsContext>(i);
		}
		public ValueQueryClauseContext(Query_clauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterValueQueryClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitValueQueryClause(this);
		}
	}
	public partial class CompoundQueryClauseContext : Query_clauseContext {
		public Query_clauseContext[] query_clause() {
			return GetRuleContexts<Query_clauseContext>();
		}
		public Query_clauseContext query_clause(int i) {
			return GetRuleContext<Query_clauseContext>(i);
		}
		public ITerminalNode K_UNION() { return GetToken(MiniSqlParserParser.K_UNION, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(MiniSqlParserParser.K_INTERSECT, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(MiniSqlParserParser.K_EXCEPT, 0); }
		public ITerminalNode K_MINUS() { return GetToken(MiniSqlParserParser.K_MINUS, 0); }
		public ITerminalNode K_ALL() { return GetToken(MiniSqlParserParser.K_ALL, 0); }
		public CompoundQueryClauseContext(Query_clauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCompoundQueryClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCompoundQueryClause(this);
		}
	}
	public partial class BracketedQueryClauseContext : Query_clauseContext {
		public Query_clauseContext query_clause() {
			return GetRuleContext<Query_clauseContext>(0);
		}
		public BracketedQueryClauseContext(Query_clauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBracketedQueryClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBracketedQueryClause(this);
		}
	}
	public partial class SingleQueryClauseContext : Query_clauseContext {
		public ITerminalNode K_SELECT() { return GetToken(MiniSqlParserParser.K_SELECT, 0); }
		public ITerminalNode STAR() { return GetToken(MiniSqlParserParser.STAR, 0); }
		public Result_columnsContext result_columns() {
			return GetRuleContext<Result_columnsContext>(0);
		}
		public ITerminalNode K_TOP() { return GetToken(MiniSqlParserParser.K_TOP, 0); }
		public ITerminalNode K_FROM() { return GetToken(MiniSqlParserParser.K_FROM, 0); }
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(MiniSqlParserParser.K_WHERE, 0); }
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public GroupBy_clauseContext groupBy_clause() {
			return GetRuleContext<GroupBy_clauseContext>(0);
		}
		public ITerminalNode K_DISTINCT() { return GetToken(MiniSqlParserParser.K_DISTINCT, 0); }
		public ITerminalNode K_ALL() { return GetToken(MiniSqlParserParser.K_ALL, 0); }
		public ITerminalNode UINTEGER_LITERAL() { return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, 0); }
		public ITerminalNode K_HAVING() { return GetToken(MiniSqlParserParser.K_HAVING, 0); }
		public SingleQueryClauseContext(Query_clauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSingleQueryClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSingleQueryClause(this);
		}
	}

	[RuleVersion(0)]
	public Query_clauseContext query_clause() {
		return query_clause(0);
	}

	private Query_clauseContext query_clause(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Query_clauseContext _localctx = new Query_clauseContext(Context, _parentState);
		Query_clauseContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_query_clause, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_SELECT:
				{
				_localctx = new SingleQueryClauseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 495; Match(K_SELECT);
				State = 497;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 496;
					_la = TokenStream.LA(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 508;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 499;
					if (!(IsMsSql || IsPervasive)) throw new FailedPredicateException(this, "IsMsSql || IsPervasive");
					State = 500; Match(K_TOP);
					State = 506;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
					case 1:
						{
						State = 501; Match(UINTEGER_LITERAL);
						}
						break;
					case 2:
						{
						State = 502;
						if (!(IsMsSql)) throw new FailedPredicateException(this, "IsMsSql");
						State = 503; Match(LPAR);
						State = 504; Match(UINTEGER_LITERAL);
						State = 505; Match(RPAR);
						}
						break;
					}
					}
					break;
				}
				State = 512;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 510; Match(STAR);
					}
					break;
				case 2:
					{
					State = 511; result_columns();
					}
					break;
				}
				State = 516;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 514; Match(K_FROM);
					State = 515; join_clause(0);
					}
					break;
				}
				State = 520;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 518; Match(K_WHERE);
					State = 519; predicate(0);
					}
					break;
				}
				State = 527;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 522; groupBy_clause();
					State = 525;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						State = 523; Match(K_HAVING);
						State = 524; predicate(0);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case LPAR:
				{
				_localctx = new BracketedQueryClauseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 529; Match(LPAR);
				State = 530; query_clause(0);
				State = 531; Match(RPAR);
				}
				break;
			case K_VALUES:
				{
				_localctx = new ValueQueryClauseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 533; Match(K_VALUES);
				State = 534; Match(LPAR);
				State = 535; exprs();
				State = 536; Match(RPAR);
				State = 544;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 537; Match(COMMA);
						State = 538; Match(LPAR);
						State = 539; exprs();
						State = 540; Match(RPAR);
						}
						} 
					}
					State = 546;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 562;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CompoundQueryClauseContext(new Query_clauseContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_query_clause);
					State = 549;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 557;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case K_UNION:
						{
						State = 550; Match(K_UNION);
						State = 552;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_ALL) {
							{
							State = 551; Match(K_ALL);
							}
						}

						}
						break;
					case K_INTERSECT:
						{
						State = 554; Match(K_INTERSECT);
						}
						break;
					case K_EXCEPT:
						{
						State = 555; Match(K_EXCEPT);
						}
						break;
					case K_MINUS:
						{
						State = 556; Match(K_MINUS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 559; query_clause(4);
					}
					} 
				}
				State = 564;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Aliased_queryContext : ParserRuleContext {
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		public Aliased_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliased_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAliased_query(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAliased_query(this);
		}
	}

	[RuleVersion(0)]
	public Aliased_queryContext aliased_query() {
		Aliased_queryContext _localctx = new Aliased_queryContext(Context, State);
		EnterRule(_localctx, 54, RULE_aliased_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565; Match(LPAR);
			State = 566; query();
			State = 567; Match(RPAR);
			State = 572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_AS) {
					{
					State = 568; Match(K_AS);
					}
				}

				State = 571; table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnsContext : ParserRuleContext {
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public Result_columnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_columns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterResult_columns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitResult_columns(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnsContext result_columns() {
		Result_columnsContext _localctx = new Result_columnsContext(Context, State);
		EnterRule(_localctx, 56, RULE_result_columns);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; result_column();
			State = 579;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 575; Match(COMMA);
					State = 576; result_column();
					}
					} 
				}
				State = 581;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(MiniSqlParserParser.STAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(Context, State);
		EnterRule(_localctx, 58, RULE_result_column);
		int _la;
		try {
			State = 593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 582; table_name();
				State = 583; Match(DOT);
				State = 584; Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586; expr(0);
				State = 591;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 588;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_AS) {
						{
						State = 587; Match(K_AS);
						}
					}

					State = 590; column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentsContext : ParserRuleContext {
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(MiniSqlParserParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(MiniSqlParserParser.ASSIGN, i);
		}
		public Value_columnContext[] value_column() {
			return GetRuleContexts<Value_columnContext>();
		}
		public Value_columnContext value_column(int i) {
			return GetRuleContext<Value_columnContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public AssignmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAssignments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAssignments(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentsContext assignments() {
		AssignmentsContext _localctx = new AssignmentsContext(Context, State);
		EnterRule(_localctx, 60, RULE_assignments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 595; column_name();
			State = 596; Match(ASSIGN);
			State = 597; value_column();
			State = 605;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 598; Match(COMMA);
					State = 599; column_name();
					State = 600; Match(ASSIGN);
					State = 601; value_column();
					}
					} 
				}
				State = 607;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_namesContext : ParserRuleContext {
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public Column_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_names; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_names(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_names(this);
		}
	}

	[RuleVersion(0)]
	public Column_namesContext column_names() {
		Column_namesContext _localctx = new Column_namesContext(Context, State);
		EnterRule(_localctx, 62, RULE_column_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; Match(LPAR);
			State = 609; column_name();
			State = 614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 610; Match(COMMA);
				State = 611; column_name();
				}
				}
				State = 616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 617; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unqualified_column_namesContext : ParserRuleContext {
		public Unqualified_column_nameContext[] unqualified_column_name() {
			return GetRuleContexts<Unqualified_column_nameContext>();
		}
		public Unqualified_column_nameContext unqualified_column_name(int i) {
			return GetRuleContext<Unqualified_column_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public Unqualified_column_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualified_column_names; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterUnqualified_column_names(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitUnqualified_column_names(this);
		}
	}

	[RuleVersion(0)]
	public Unqualified_column_namesContext unqualified_column_names() {
		Unqualified_column_namesContext _localctx = new Unqualified_column_namesContext(Context, State);
		EnterRule(_localctx, 64, RULE_unqualified_column_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; Match(LPAR);
			State = 620; unqualified_column_name();
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 621; Match(COMMA);
				State = 622; unqualified_column_name();
				}
				}
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 628; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_clausesContext : ParserRuleContext {
		public Value_columnsContext[] value_columns() {
			return GetRuleContexts<Value_columnsContext>();
		}
		public Value_columnsContext value_columns(int i) {
			return GetRuleContext<Value_columnsContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public Values_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterValues_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitValues_clauses(this);
		}
	}

	[RuleVersion(0)]
	public Values_clausesContext values_clauses() {
		Values_clausesContext _localctx = new Values_clausesContext(Context, State);
		EnterRule(_localctx, 66, RULE_values_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630; value_columns();
			State = 635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 631; Match(COMMA);
				State = 632; value_columns();
				}
				}
				State = 637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_columnsContext : ParserRuleContext {
		public Value_columnContext[] value_column() {
			return GetRuleContexts<Value_columnContext>();
		}
		public Value_columnContext value_column(int i) {
			return GetRuleContext<Value_columnContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public Value_columnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_columns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_columns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_columns(this);
		}
	}

	[RuleVersion(0)]
	public Value_columnsContext value_columns() {
		Value_columnsContext _localctx = new Value_columnsContext(Context, State);
		EnterRule(_localctx, 68, RULE_value_columns);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; Match(LPAR);
			State = 639; value_column();
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 640; Match(COMMA);
				State = 641; value_column();
				}
				}
				State = 646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 647; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_columnContext : ParserRuleContext {
		public ITerminalNode K_DEFAULT() { return GetToken(MiniSqlParserParser.K_DEFAULT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Value_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterValue_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitValue_column(this);
		}
	}

	[RuleVersion(0)]
	public Value_columnContext value_column() {
		Value_columnContext _localctx = new Value_columnContext(Context, State);
		EnterRule(_localctx, 70, RULE_value_column);
		try {
			State = 651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 649; Match(K_DEFAULT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 650; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterExprs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitExprs(this);
		}
	}

	[RuleVersion(0)]
	public ExprsContext exprs() {
		ExprsContext _localctx = new ExprsContext(Context, State);
		EnterRule(_localctx, 72, RULE_exprs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 653; expr(0);
			State = 658;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 654; Match(COMMA);
					State = 655; expr(0);
					}
					} 
				}
				State = 660;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
	 
		public Join_clauseContext() { }
		public virtual void CopyFrom(Join_clauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JoinSourceContext : Join_clauseContext {
		public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		public Join_operatorContext join_operator() {
			return GetRuleContext<Join_operatorContext>(0);
		}
		public Join_constraintContext join_constraint() {
			return GetRuleContext<Join_constraintContext>(0);
		}
		public JoinSourceContext(Join_clauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterJoinSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitJoinSource(this);
		}
	}
	public partial class TableSourceContext : Join_clauseContext {
		public Indexed_aliased_table_nameContext indexed_aliased_table_name() {
			return GetRuleContext<Indexed_aliased_table_nameContext>(0);
		}
		public TableSourceContext(Join_clauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterTableSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitTableSource(this);
		}
	}
	public partial class SubQuerySourceContext : Join_clauseContext {
		public Aliased_queryContext aliased_query() {
			return GetRuleContext<Aliased_queryContext>(0);
		}
		public SubQuerySourceContext(Join_clauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSubQuerySource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSubQuerySource(this);
		}
	}
	public partial class BracketedSourceContext : Join_clauseContext {
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		public BracketedSourceContext(Join_clauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBracketedSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBracketedSource(this);
		}
	}
	public partial class CommaJoinSourceContext : Join_clauseContext {
		public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(MiniSqlParserParser.COMMA, 0); }
		public CommaJoinSourceContext(Join_clauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCommaJoinSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCommaJoinSource(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		return join_clause(0);
	}

	private Join_clauseContext join_clause(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Join_clauseContext _localctx = new Join_clauseContext(Context, _parentState);
		Join_clauseContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_join_clause, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				_localctx = new TableSourceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 662; indexed_aliased_table_name();
				}
				break;
			case 2:
				{
				_localctx = new SubQuerySourceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 663; aliased_query();
				}
				break;
			case 3:
				{
				_localctx = new BracketedSourceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 664; Match(LPAR);
				State = 665; join_clause(0);
				State = 666; Match(RPAR);
				State = 671;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 668;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_AS) {
						{
						State = 667; Match(K_AS);
						}
					}

					State = 670; table_alias();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 686;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 684;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
					case 1:
						{
						_localctx = new CommaJoinSourceContext(new Join_clauseContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_join_clause);
						State = 675;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 676; Match(COMMA);
						State = 677; join_clause(2);
						}
						break;
					case 2:
						{
						_localctx = new JoinSourceContext(new Join_clauseContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_join_clause);
						State = 678;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 679; join_operator();
						State = 680; join_clause(0);
						State = 682;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
						case 1:
							{
							State = 681; join_constraint();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 688;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		public ITerminalNode K_ON() { return GetToken(MiniSqlParserParser.K_ON, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode K_USING() { return GetToken(MiniSqlParserParser.K_USING, 0); }
		public Unqualified_column_namesContext unqualified_column_names() {
			return GetRuleContext<Unqualified_column_namesContext>(0);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(Context, State);
		EnterRule(_localctx, 76, RULE_join_constraint);
		try {
			State = 694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 689; Match(K_ON);
				State = 690; predicate(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 691;
				if (!(IsOracle || IsMySql || IsSQLite || IsPostgreSql || IsPervasive)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsSQLite || IsPostgreSql || IsPervasive");
				State = 692; Match(K_USING);
				State = 693; unqualified_column_names();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		public ITerminalNode K_JOIN() { return GetToken(MiniSqlParserParser.K_JOIN, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(MiniSqlParserParser.K_NATURAL, 0); }
		public ITerminalNode K_LEFT() { return GetToken(MiniSqlParserParser.K_LEFT, 0); }
		public ITerminalNode K_RIGHT() { return GetToken(MiniSqlParserParser.K_RIGHT, 0); }
		public ITerminalNode K_FULL() { return GetToken(MiniSqlParserParser.K_FULL, 0); }
		public ITerminalNode K_INNER() { return GetToken(MiniSqlParserParser.K_INNER, 0); }
		public ITerminalNode K_CROSS() { return GetToken(MiniSqlParserParser.K_CROSS, 0); }
		public ITerminalNode K_OUTER() { return GetToken(MiniSqlParserParser.K_OUTER, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(Context, State);
		EnterRule(_localctx, 78, RULE_join_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 696;
				if (!(IsOracle || IsMySql || IsSQLite || IsPostgreSql)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsSQLite || IsPostgreSql");
				State = 697; Match(K_NATURAL);
				}
				break;
			}
			State = 714;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_LEFT:
				{
				State = 700; Match(K_LEFT);
				State = 702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_OUTER) {
					{
					State = 701; Match(K_OUTER);
					}
				}

				}
				break;
			case K_RIGHT:
				{
				State = 704; Match(K_RIGHT);
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_OUTER) {
					{
					State = 705; Match(K_OUTER);
					}
				}

				}
				break;
			case K_FULL:
				{
				State = 708; Match(K_FULL);
				State = 710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_OUTER) {
					{
					State = 709; Match(K_OUTER);
					}
				}

				}
				break;
			case K_INNER:
				{
				State = 712; Match(K_INNER);
				}
				break;
			case K_CROSS:
				{
				State = 713; Match(K_CROSS);
				}
				break;
			case K_JOIN:
				break;
			default:
				break;
			}
			State = 716; Match(K_JOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupBy_clauseContext : ParserRuleContext {
		public ITerminalNode K_GROUP() { return GetToken(MiniSqlParserParser.K_GROUP, 0); }
		public ITerminalNode K_BY() { return GetToken(MiniSqlParserParser.K_BY, 0); }
		public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public GroupBy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupBy_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterGroupBy_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitGroupBy_clause(this);
		}
	}

	[RuleVersion(0)]
	public GroupBy_clauseContext groupBy_clause() {
		GroupBy_clauseContext _localctx = new GroupBy_clauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_groupBy_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718; Match(K_GROUP);
			State = 719; Match(K_BY);
			State = 720; exprs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderBy_clauseContext : ParserRuleContext {
		public ITerminalNode K_ORDER() { return GetToken(MiniSqlParserParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(MiniSqlParserParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public OrderBy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderBy_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterOrderBy_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitOrderBy_clause(this);
		}
	}

	[RuleVersion(0)]
	public OrderBy_clauseContext orderBy_clause() {
		OrderBy_clauseContext _localctx = new OrderBy_clauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_orderBy_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 722; Match(K_ORDER);
			State = 723; Match(K_BY);
			State = 724; ordering_term();
			State = 729;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 725; Match(COMMA);
					State = 726; ordering_term();
					}
					} 
				}
				State = 731;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(MiniSqlParserParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_NULLS() { return GetToken(MiniSqlParserParser.K_NULLS, 0); }
		public ITerminalNode K_ASC() { return GetToken(MiniSqlParserParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(MiniSqlParserParser.K_DESC, 0); }
		public ITerminalNode K_FIRST() { return GetToken(MiniSqlParserParser.K_FIRST, 0); }
		public ITerminalNode K_LAST() { return GetToken(MiniSqlParserParser.K_LAST, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterOrdering_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitOrdering_term(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(Context, State);
		EnterRule(_localctx, 84, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; expr(0);
			State = 735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 733; Match(K_COLLATE);
				State = 734; collation_name();
				}
				break;
			}
			State = 738;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 737;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 742;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 740; Match(K_NULLS);
				State = 741;
				_la = TokenStream.LA(1);
				if ( !(_la==K_FIRST || _la==K_LAST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionBy_clauseContext : ParserRuleContext {
		public ITerminalNode K_PARTITION() { return GetToken(MiniSqlParserParser.K_PARTITION, 0); }
		public ITerminalNode K_BY() { return GetToken(MiniSqlParserParser.K_BY, 0); }
		public Partitioning_termContext[] partitioning_term() {
			return GetRuleContexts<Partitioning_termContext>();
		}
		public Partitioning_termContext partitioning_term(int i) {
			return GetRuleContext<Partitioning_termContext>(i);
		}
		public PartitionBy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionBy_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionBy_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionBy_clause(this);
		}
	}

	[RuleVersion(0)]
	public PartitionBy_clauseContext partitionBy_clause() {
		PartitionBy_clauseContext _localctx = new PartitionBy_clauseContext(Context, State);
		EnterRule(_localctx, 86, RULE_partitionBy_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744; Match(K_PARTITION);
			State = 745; Match(K_BY);
			State = 746; partitioning_term();
			State = 751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 747; Match(COMMA);
				State = 748; partitioning_term();
				}
				}
				State = 753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partitioning_termContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(MiniSqlParserParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Partitioning_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitioning_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPartitioning_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPartitioning_term(this);
		}
	}

	[RuleVersion(0)]
	public Partitioning_termContext partitioning_term() {
		Partitioning_termContext _localctx = new Partitioning_termContext(Context, State);
		EnterRule(_localctx, 88, RULE_partitioning_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754; expr(0);
			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_COLLATE) {
				{
				State = 755; Match(K_COLLATE);
				State = 756; collation_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode K_DECLARE() { return GetToken(MiniSqlParserParser.K_DECLARE, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode PLACEHOLDER1() { return GetToken(MiniSqlParserParser.PLACEHOLDER1, 0); }
		public Unqualified_column_nameContext unqualified_column_name() {
			return GetRuleContext<Unqualified_column_nameContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 90, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759; Match(K_DECLARE);
			State = 763;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 760;
				if (!(IsMsSql)) throw new FailedPredicateException(this, "IsMsSql");
				State = 761; Match(PLACEHOLDER1);
				}
				break;
			case 2:
				{
				State = 762; unqualified_column_name();
				}
				break;
			}
			State = 765; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public Out_paramContext[] out_param() {
			return GetRuleContexts<Out_paramContext>();
		}
		public Out_paramContext out_param(int i) {
			return GetRuleContext<Out_paramContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniSqlParserParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniSqlParserParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 92, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 767; param();
				}
				break;
			case 2:
				{
				State = 768; out_param();
				}
				break;
			}
			State = 778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 771; Match(COMMA);
				State = 774;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
				case 1:
					{
					State = 772; param();
					}
					break;
				case 2:
					{
					State = 773; out_param();
					}
					break;
				}
				}
				}
				State = 780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public ITerminalNode PLACEHOLDER1() { return GetToken(MiniSqlParserParser.PLACEHOLDER1, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 94, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLACEHOLDER1) {
				{
				State = 781; Match(PLACEHOLDER1);
				State = 782; Match(ASSIGN);
				}
			}

			State = 785; literal_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Out_paramContext : ParserRuleContext {
		public ITerminalNode[] PLACEHOLDER1() { return GetTokens(MiniSqlParserParser.PLACEHOLDER1); }
		public ITerminalNode PLACEHOLDER1(int i) {
			return GetToken(MiniSqlParserParser.PLACEHOLDER1, i);
		}
		public ITerminalNode K_OUTPUT() { return GetToken(MiniSqlParserParser.K_OUTPUT, 0); }
		public Out_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_out_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterOut_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitOut_param(this);
		}
	}

	[RuleVersion(0)]
	public Out_paramContext out_param() {
		Out_paramContext _localctx = new Out_paramContext(Context, State);
		EnterRule(_localctx, 96, RULE_out_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 787; Match(PLACEHOLDER1);
				State = 788; Match(ASSIGN);
				}
				break;
			}
			State = 791; Match(PLACEHOLDER1);
			State = 792; Match(K_OUTPUT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		public IToken uint0;
		public IToken row0;
		public IToken uint1;
		public IToken row1;
		public ITerminalNode K_LIMIT() { return GetToken(MiniSqlParserParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(MiniSqlParserParser.K_OFFSET, 0); }
		public ITerminalNode COMMA() { return GetToken(MiniSqlParserParser.COMMA, 0); }
		public ITerminalNode[] UINTEGER_LITERAL() { return GetTokens(MiniSqlParserParser.UINTEGER_LITERAL); }
		public ITerminalNode UINTEGER_LITERAL(int i) {
			return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, i);
		}
		public ITerminalNode[] K_ROW() { return GetTokens(MiniSqlParserParser.K_ROW); }
		public ITerminalNode K_ROW(int i) {
			return GetToken(MiniSqlParserParser.K_ROW, i);
		}
		public ITerminalNode[] K_ROWS() { return GetTokens(MiniSqlParserParser.K_ROWS); }
		public ITerminalNode K_ROWS(int i) {
			return GetToken(MiniSqlParserParser.K_ROWS, i);
		}
		public ITerminalNode K_FETCH() { return GetToken(MiniSqlParserParser.K_FETCH, 0); }
		public ITerminalNode K_FIRST() { return GetToken(MiniSqlParserParser.K_FIRST, 0); }
		public ITerminalNode K_NEXT() { return GetToken(MiniSqlParserParser.K_NEXT, 0); }
		public ITerminalNode K_ONLY() { return GetToken(MiniSqlParserParser.K_ONLY, 0); }
		public ITerminalNode K_WITH() { return GetToken(MiniSqlParserParser.K_WITH, 0); }
		public ITerminalNode K_TIES() { return GetToken(MiniSqlParserParser.K_TIES, 0); }
		public ITerminalNode K_PERCENT() { return GetToken(MiniSqlParserParser.K_PERCENT, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(Context, State);
		EnterRule(_localctx, 98, RULE_limit_clause);
		int _la;
		try {
			State = 833;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 794;
				if (!(IsMySql || IsSQLite || IsPostgreSql || IsPervasive)) throw new FailedPredicateException(this, "IsMySql || IsSQLite || IsPostgreSql || IsPervasive");
				State = 795; Match(K_LIMIT);
				State = 796; expr(0);
				State = 799;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 797;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 798; expr(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 801;
				if (!(IsOracle || IsMsSql)) throw new FailedPredicateException(this, "IsOracle || IsMsSql");
				State = 802; Match(K_OFFSET);
				State = 803; _localctx.uint0 = Match(UINTEGER_LITERAL);
				State = 804;
				_localctx.row0 = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==K_ROW || _la==K_ROWS) ) {
					_localctx.row0 = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 818;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
				case 1:
					{
					State = 805; Match(K_FETCH);
					State = 806;
					_la = TokenStream.LA(1);
					if ( !(_la==K_FIRST || _la==K_NEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 807; _localctx.uint1 = Match(UINTEGER_LITERAL);
					State = 809;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_PERCENT) {
						{
						State = 808; Match(K_PERCENT);
						}
					}

					State = 811;
					_localctx.row1 = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==K_ROW || _la==K_ROWS) ) {
						_localctx.row1 = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 816;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
					case 1:
						{
						State = 812; Match(K_ONLY);
						}
						break;
					case 2:
						{
						State = 813;
						if (!(IsOracle)) throw new FailedPredicateException(this, "IsOracle");
						State = 814; Match(K_WITH);
						State = 815; Match(K_TIES);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 820;
				if (!(IsOracle)) throw new FailedPredicateException(this, "IsOracle");
				{
				State = 821; Match(K_FETCH);
				State = 822;
				_la = TokenStream.LA(1);
				if ( !(_la==K_FIRST || _la==K_NEXT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 823; _localctx.uint1 = Match(UINTEGER_LITERAL);
				State = 825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_PERCENT) {
					{
					State = 824; Match(K_PERCENT);
					}
				}

				State = 827;
				_localctx.row1 = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==K_ROW || _la==K_ROWS) ) {
					_localctx.row1 = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 831;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_ONLY:
					{
					State = 828; Match(K_ONLY);
					}
					break;
				case K_WITH:
					{
					State = 829; Match(K_WITH);
					State = 830; Match(K_TIES);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_clauseContext : ParserRuleContext {
		public ITerminalNode K_FOR() { return GetToken(MiniSqlParserParser.K_FOR, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(MiniSqlParserParser.K_UPDATE, 0); }
		public For_update_of_clauseContext for_update_of_clause() {
			return GetRuleContext<For_update_of_clauseContext>(0);
		}
		public ITerminalNode K_NOWAIT() { return GetToken(MiniSqlParserParser.K_NOWAIT, 0); }
		public ITerminalNode K_WAIT() { return GetToken(MiniSqlParserParser.K_WAIT, 0); }
		public ITerminalNode K_SKIP() { return GetToken(MiniSqlParserParser.K_SKIP, 0); }
		public ITerminalNode K_LOCKED() { return GetToken(MiniSqlParserParser.K_LOCKED, 0); }
		public ITerminalNode UINTEGER_LITERAL() { return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, 0); }
		public For_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterFor_update_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitFor_update_clause(this);
		}
	}

	[RuleVersion(0)]
	public For_update_clauseContext for_update_clause() {
		For_update_clauseContext _localctx = new For_update_clauseContext(Context, State);
		EnterRule(_localctx, 100, RULE_for_update_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835;
			if (!(IsOracle || IsMySql || IsPostgreSql)) throw new FailedPredicateException(this, "IsOracle || IsMySql || IsPostgreSql");
			State = 836; Match(K_FOR);
			State = 837; Match(K_UPDATE);
			State = 839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_OF) {
				{
				State = 838; for_update_of_clause();
				}
			}

			State = 848;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_NOWAIT:
				{
				State = 841; Match(K_NOWAIT);
				}
				break;
			case K_WAIT:
				{
				State = 842; Match(K_WAIT);
				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UINTEGER_LITERAL) {
					{
					State = 843; Match(UINTEGER_LITERAL);
					}
				}

				}
				break;
			case K_SKIP:
				{
				State = 846; Match(K_SKIP);
				State = 847; Match(K_LOCKED);
				}
				break;
			case Eof:
			case SCOL:
			case K_ELSE:
			case K_ELSIF:
			case K_END:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_of_clauseContext : ParserRuleContext {
		public ITerminalNode K_OF() { return GetToken(MiniSqlParserParser.K_OF, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public For_update_of_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_of_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterFor_update_of_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitFor_update_of_clause(this);
		}
	}

	[RuleVersion(0)]
	public For_update_of_clauseContext for_update_of_clause() {
		For_update_of_clauseContext _localctx = new For_update_of_clauseContext(Context, State);
		EnterRule(_localctx, 102, RULE_for_update_of_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850; Match(K_OF);
			State = 851; column_name();
			State = 856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 852; Match(COMMA);
				State = 853; column_name();
				}
				}
				State = 858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsPredicateContext : PredicateContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_IS() { return GetToken(MiniSqlParserParser.K_IS, 0); }
		public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public IsPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIsPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIsPredicate(this);
		}
	}
	public partial class BetweenPredicateContext : PredicateContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_BETWEEN() { return GetToken(MiniSqlParserParser.K_BETWEEN, 0); }
		public ITerminalNode K_AND() { return GetToken(MiniSqlParserParser.K_AND, 0); }
		public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public BetweenPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBetweenPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBetweenPredicate(this);
		}
	}
	public partial class ExistsPredicateContext : PredicateContext {
		public ITerminalNode K_EXISTS() { return GetToken(MiniSqlParserParser.K_EXISTS, 0); }
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ExistsPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterExistsPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitExistsPredicate(this);
		}
	}
	public partial class SubQueryPredicateContext : PredicateContext {
		public IToken op1;
		public IToken op2;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ITerminalNode K_ANY() { return GetToken(MiniSqlParserParser.K_ANY, 0); }
		public ITerminalNode K_SOME() { return GetToken(MiniSqlParserParser.K_SOME, 0); }
		public ITerminalNode K_ALL() { return GetToken(MiniSqlParserParser.K_ALL, 0); }
		public SubQueryPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSubQueryPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSubQueryPredicate(this);
		}
	}
	public partial class AndPredicateContext : PredicateContext {
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode K_AND() { return GetToken(MiniSqlParserParser.K_AND, 0); }
		public AndPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAndPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAndPredicate(this);
		}
	}
	public partial class LikePredicateContext : PredicateContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_LIKE() { return GetToken(MiniSqlParserParser.K_LIKE, 0); }
		public ITerminalNode K_GLOB() { return GetToken(MiniSqlParserParser.K_GLOB, 0); }
		public ITerminalNode K_MATCH() { return GetToken(MiniSqlParserParser.K_MATCH, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(MiniSqlParserParser.K_REGEXP, 0); }
		public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public ITerminalNode K_ESCAPE() { return GetToken(MiniSqlParserParser.K_ESCAPE, 0); }
		public LikePredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterLikePredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitLikePredicate(this);
		}
	}
	public partial class InPredicateContext : PredicateContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_IN() { return GetToken(MiniSqlParserParser.K_IN, 0); }
		public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public InPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterInPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitInPredicate(this);
		}
	}
	public partial class NotPredicateContext : PredicateContext {
		public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public NotPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterNotPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitNotPredicate(this);
		}
	}
	public partial class OrPredicateContext : PredicateContext {
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode K_OR() { return GetToken(MiniSqlParserParser.K_OR, 0); }
		public OrPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterOrPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitOrPredicate(this);
		}
	}
	public partial class BracketedPredicateContext : PredicateContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public BracketedPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBracketedPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBracketedPredicate(this);
		}
	}
	public partial class BinaryOpPredicateContext : PredicateContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BinaryOpPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBinaryOpPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBinaryOpPredicate(this);
		}
	}
	public partial class PhPredicateContext : PredicateContext {
		public ITerminalNode PLACEHOLDER1() { return GetToken(MiniSqlParserParser.PLACEHOLDER1, 0); }
		public ITerminalNode PLACEHOLDER2() { return GetToken(MiniSqlParserParser.PLACEHOLDER2, 0); }
		public PhPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPhPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPhPredicate(this);
		}
	}
	public partial class IsNullPredicateContext : PredicateContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_IS() { return GetToken(MiniSqlParserParser.K_IS, 0); }
		public ITerminalNode K_NULL() { return GetToken(MiniSqlParserParser.K_NULL, 0); }
		public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public IsNullPredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIsNullPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIsNullPredicate(this);
		}
	}
	public partial class CollatePredicateContext : PredicateContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(MiniSqlParserParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public CollatePredicateContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCollatePredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCollatePredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 104;
		EnterRecursionRule(_localctx, 104, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				_localctx = new PhPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 860; Match(PLACEHOLDER1);
				}
				break;
			case 2:
				{
				_localctx = new PhPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 861; Match(PLACEHOLDER2);
				}
				break;
			case 3:
				{
				_localctx = new BinaryOpPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 862; expr(0);
				State = 863;
				((BinaryOpPredicateContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ))) != 0)) ) {
					((BinaryOpPredicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 864; expr(0);
				}
				break;
			case 4:
				{
				_localctx = new BinaryOpPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 866; expr(0);
				State = 867;
				((BinaryOpPredicateContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << EQ) | (1L << NOT_EQ1) | (1L << NOT_EQ2))) != 0)) ) {
					((BinaryOpPredicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 868; expr(0);
				}
				break;
			case 5:
				{
				_localctx = new LikePredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 870; expr(0);
				State = 872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 871; Match(K_NOT);
					}
				}

				State = 874;
				((LikePredicateContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (K_GLOB - 77)) | (1L << (K_LIKE - 77)) | (1L << (K_MATCH - 77)) | (1L << (K_REGEXP - 77)))) != 0)) ) {
					((LikePredicateContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 875; expr(0);
				State = 878;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 876; Match(K_ESCAPE);
					State = 877; expr(0);
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new IsNullPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 880; expr(0);
				State = 881; Match(K_IS);
				State = 883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 882; Match(K_NOT);
					}
				}

				State = 885; Match(K_NULL);
				}
				break;
			case 7:
				{
				_localctx = new IsPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 887; expr(0);
				State = 888; Match(K_IS);
				State = 890;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
				case 1:
					{
					State = 889; Match(K_NOT);
					}
					break;
				}
				State = 892; expr(0);
				}
				break;
			case 8:
				{
				_localctx = new BetweenPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 894; expr(0);
				State = 896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 895; Match(K_NOT);
					}
				}

				State = 898; Match(K_BETWEEN);
				State = 899; expr(0);
				State = 900; Match(K_AND);
				State = 901; expr(0);
				}
				break;
			case 9:
				{
				_localctx = new InPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 903; expr(0);
				State = 905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 904; Match(K_NOT);
					}
				}

				State = 907; Match(K_IN);
				State = 908; Match(LPAR);
				State = 911;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 909; exprs();
					}
					break;
				case 2:
					{
					State = 910; query();
					}
					break;
				}
				State = 913; Match(RPAR);
				}
				break;
			case 10:
				{
				_localctx = new SubQueryPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 915; expr(0);
				State = 916;
				((SubQueryPredicateContext)_localctx).op1 = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ) | (1L << EQ) | (1L << NOT_EQ1) | (1L << NOT_EQ2))) != 0)) ) {
					((SubQueryPredicateContext)_localctx).op1 = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 917;
				((SubQueryPredicateContext)_localctx).op2 = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==K_ALL || _la==K_ANY || _la==K_SOME) ) {
					((SubQueryPredicateContext)_localctx).op2 = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 918; Match(LPAR);
				State = 919; query();
				State = 920; Match(RPAR);
				}
				break;
			case 11:
				{
				_localctx = new ExistsPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 922; Match(K_EXISTS);
				State = 923; Match(LPAR);
				State = 924; query();
				State = 925; Match(RPAR);
				}
				break;
			case 12:
				{
				_localctx = new NotPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 927; Match(K_NOT);
				State = 928; predicate(4);
				}
				break;
			case 13:
				{
				_localctx = new BracketedPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 929; Match(LPAR);
				State = 930; predicate(0);
				State = 931; Match(RPAR);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 946;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 944;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
					case 1:
						{
						_localctx = new AndPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 935;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 936; Match(K_AND);
						State = 937; predicate(4);
						}
						break;
					case 2:
						{
						_localctx = new OrPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 938;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 939; Match(K_OR);
						State = 940; predicate(3);
						}
						break;
					case 3:
						{
						_localctx = new CollatePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 941;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 942; Match(K_COLLATE);
						State = 943; collation_name();
						}
						break;
					}
					} 
				}
				State = 948;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExtractFuncExprContext : ExprContext {
		public Extract_functionContext extract_function() {
			return GetRuleContext<Extract_functionContext>(0);
		}
		public ExtractFuncExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterExtractFuncExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitExtractFuncExpr(this);
		}
	}
	public partial class Case1ExprContext : ExprContext {
		public ITerminalNode K_CASE() { return GetToken(MiniSqlParserParser.K_CASE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_END() { return GetToken(MiniSqlParserParser.K_END, 0); }
		public ITerminalNode[] K_WHEN() { return GetTokens(MiniSqlParserParser.K_WHEN); }
		public ITerminalNode K_WHEN(int i) {
			return GetToken(MiniSqlParserParser.K_WHEN, i);
		}
		public ITerminalNode[] K_THEN() { return GetTokens(MiniSqlParserParser.K_THEN); }
		public ITerminalNode K_THEN(int i) {
			return GetToken(MiniSqlParserParser.K_THEN, i);
		}
		public ITerminalNode K_ELSE() { return GetToken(MiniSqlParserParser.K_ELSE, 0); }
		public Case1ExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCase1Expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCase1Expr(this);
		}
	}
	public partial class ColumnExprContext : ExprContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode OUTER_JOIN() { return GetToken(MiniSqlParserParser.OUTER_JOIN, 0); }
		public ColumnExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterColumnExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitColumnExpr(this);
		}
	}
	public partial class SubQueryExprContext : ExprContext {
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public SubQueryExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSubQueryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSubQueryExpr(this);
		}
	}
	public partial class WindowFuncExprContext : ExprContext {
		public Window_functionContext window_function() {
			return GetRuleContext<Window_functionContext>(0);
		}
		public WindowFuncExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFuncExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFuncExpr(this);
		}
	}
	public partial class BracketedExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BracketedExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBracketedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBracketedExpr(this);
		}
	}
	public partial class GenericFuncExprContext : ExprContext {
		public Generic_functionContext generic_function() {
			return GetRuleContext<Generic_functionContext>(0);
		}
		public GenericFuncExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterGenericFuncExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitGenericFuncExpr(this);
		}
	}
	public partial class SignedNumberExprContext : ExprContext {
		public IToken op;
		public ITerminalNode UINTEGER_LITERAL() { return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, 0); }
		public ITerminalNode UNUMERIC_LITERAL() { return GetToken(MiniSqlParserParser.UNUMERIC_LITERAL, 0); }
		public SignedNumberExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSignedNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSignedNumberExpr(this);
		}
	}
	public partial class PhExprContext : ExprContext {
		public ITerminalNode PLACEHOLDER1() { return GetToken(MiniSqlParserParser.PLACEHOLDER1, 0); }
		public ITerminalNode PLACEHOLDER2() { return GetToken(MiniSqlParserParser.PLACEHOLDER2, 0); }
		public PhExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterPhExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitPhExpr(this);
		}
	}
	public partial class AggregateFuncExprContext : ExprContext {
		public Aggregate_function1Context aggregate_function1() {
			return GetRuleContext<Aggregate_function1Context>(0);
		}
		public Aggregate_function2Context aggregate_function2() {
			return GetRuleContext<Aggregate_function2Context>(0);
		}
		public AggregateFuncExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregateFuncExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregateFuncExpr(this);
		}
	}
	public partial class Case2ExprContext : ExprContext {
		public ITerminalNode K_CASE() { return GetToken(MiniSqlParserParser.K_CASE, 0); }
		public ITerminalNode K_END() { return GetToken(MiniSqlParserParser.K_END, 0); }
		public ITerminalNode[] K_WHEN() { return GetTokens(MiniSqlParserParser.K_WHEN); }
		public ITerminalNode K_WHEN(int i) {
			return GetToken(MiniSqlParserParser.K_WHEN, i);
		}
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode[] K_THEN() { return GetTokens(MiniSqlParserParser.K_THEN); }
		public ITerminalNode K_THEN(int i) {
			return GetToken(MiniSqlParserParser.K_THEN, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_ELSE() { return GetToken(MiniSqlParserParser.K_ELSE, 0); }
		public Case2ExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCase2Expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCase2Expr(this);
		}
	}
	public partial class BitwiseNotExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BitwiseNotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBitwiseNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBitwiseNotExpr(this);
		}
	}
	public partial class SubstrFuncExprContext : ExprContext {
		public Substring_functionContext substring_function() {
			return GetRuleContext<Substring_functionContext>(0);
		}
		public SubstrFuncExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSubstrFuncExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSubstrFuncExpr(this);
		}
	}
	public partial class CastExprContext : ExprContext {
		public ITerminalNode K_CAST() { return GetToken(MiniSqlParserParser.K_CAST, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public CastExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCastExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCastExpr(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
	}
	public partial class BinaryOpExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BinaryOpExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterBinaryOpExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitBinaryOpExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 106;
		EnterRecursionRule(_localctx, 106, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1016;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				_localctx = new SignedNumberExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 950;
				((SignedNumberExprContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((SignedNumberExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 951;
				_la = TokenStream.LA(1);
				if ( !(_la==UINTEGER_LITERAL || _la==UNUMERIC_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 952; literal_value();
				}
				break;
			case 3:
				{
				_localctx = new PhExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 953; Match(PLACEHOLDER1);
				}
				break;
			case 4:
				{
				_localctx = new PhExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 954; Match(PLACEHOLDER2);
				}
				break;
			case 5:
				{
				_localctx = new ColumnExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 955; column_name();
				State = 958;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
				case 1:
					{
					State = 956;
					if (!(IsOracle)) throw new FailedPredicateException(this, "IsOracle");
					State = 957; Match(OUTER_JOIN);
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new SubQueryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 960; Match(LPAR);
				State = 961; query();
				State = 962; Match(RPAR);
				}
				break;
			case 7:
				{
				_localctx = new BitwiseNotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 964; Match(TILDE);
				State = 965; expr(15);
				}
				break;
			case 8:
				{
				_localctx = new SubstrFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 966; substring_function();
				}
				break;
			case 9:
				{
				_localctx = new ExtractFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 967; extract_function();
				}
				break;
			case 10:
				{
				_localctx = new AggregateFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 968; aggregate_function1();
				}
				break;
			case 11:
				{
				_localctx = new AggregateFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 969; aggregate_function2();
				}
				break;
			case 12:
				{
				_localctx = new WindowFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 970; window_function();
				}
				break;
			case 13:
				{
				_localctx = new GenericFuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 971; generic_function();
				}
				break;
			case 14:
				{
				_localctx = new BracketedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 972; Match(LPAR);
				State = 973; expr(0);
				State = 974; Match(RPAR);
				}
				break;
			case 15:
				{
				_localctx = new CastExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 976; Match(K_CAST);
				State = 977; Match(LPAR);
				State = 978; expr(0);
				State = 979; Match(K_AS);
				State = 980; type_name();
				State = 981; Match(RPAR);
				}
				break;
			case 16:
				{
				_localctx = new Case1ExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 983; Match(K_CASE);
				State = 984; expr(0);
				State = 990;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 985; Match(K_WHEN);
					State = 986; expr(0);
					State = 987; Match(K_THEN);
					State = 988; expr(0);
					}
					}
					State = 992;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==K_WHEN );
				State = 996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_ELSE) {
					{
					State = 994; Match(K_ELSE);
					State = 995; expr(0);
					}
				}

				State = 998; Match(K_END);
				}
				break;
			case 17:
				{
				_localctx = new Case2ExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1000; Match(K_CASE);
				State = 1006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1001; Match(K_WHEN);
					State = 1002; predicate(0);
					State = 1003; Match(K_THEN);
					State = 1004; expr(0);
					}
					}
					State = 1008;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==K_WHEN );
				State = 1012;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_ELSE) {
					{
					State = 1010; Match(K_ELSE);
					State = 1011; expr(0);
					}
				}

				State = 1014; Match(K_END);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1033;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1031;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
					case 1:
						{
						_localctx = new BinaryOpExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1018;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1019;
						if (!(IsOracle || IsSQLite || IsPostgreSql)) throw new FailedPredicateException(this, "IsOracle || IsSQLite || IsPostgreSql");
						State = 1020; ((BinaryOpExprContext)_localctx).op = Match(PIPE2);
						State = 1021; expr(15);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOpExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1022;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1023;
						((BinaryOpExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((BinaryOpExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1024; expr(14);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOpExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1025;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1026;
						((BinaryOpExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((BinaryOpExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1027; expr(13);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOpExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1028;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1029;
						((BinaryOpExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT2) | (1L << GT2) | (1L << AMP) | (1L << PIPE))) != 0)) ) {
							((BinaryOpExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1030; expr(12);
						}
						break;
					}
					} 
				}
				State = 1035;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Substring_functionContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_SUBSTRING() { return GetToken(MiniSqlParserParser.K_SUBSTRING, 0); }
		public ITerminalNode K_SUBSTR() { return GetToken(MiniSqlParserParser.K_SUBSTR, 0); }
		public ITerminalNode K_FROM() { return GetToken(MiniSqlParserParser.K_FROM, 0); }
		public ITerminalNode K_FOR() { return GetToken(MiniSqlParserParser.K_FOR, 0); }
		public Substring_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substring_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterSubstring_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitSubstring_function(this);
		}
	}

	[RuleVersion(0)]
	public Substring_functionContext substring_function() {
		Substring_functionContext _localctx = new Substring_functionContext(Context, State);
		EnterRule(_localctx, 108, RULE_substring_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036;
			_la = TokenStream.LA(1);
			if ( !(_la==K_SUBSTR || _la==K_SUBSTRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1037; Match(LPAR);
			State = 1038; expr(0);
			State = 1039;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMA || _la==K_FROM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1040; expr(0);
			State = 1043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA || _la==K_FOR) {
				{
				State = 1041;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMA || _la==K_FOR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1042; expr(0);
				}
			}

			State = 1045; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_functionContext : ParserRuleContext {
		public ITerminalNode K_EXTRACT() { return GetToken(MiniSqlParserParser.K_EXTRACT, 0); }
		public DatetimeFieldContext datetimeField() {
			return GetRuleContext<DatetimeFieldContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_FROM() { return GetToken(MiniSqlParserParser.K_FROM, 0); }
		public Extract_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterExtract_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitExtract_function(this);
		}
	}

	[RuleVersion(0)]
	public Extract_functionContext extract_function() {
		Extract_functionContext _localctx = new Extract_functionContext(Context, State);
		EnterRule(_localctx, 110, RULE_extract_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1047; Match(K_EXTRACT);
			State = 1048; Match(LPAR);
			State = 1049; datetimeField();
			State = 1050;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMA || _la==K_FROM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1051; expr(0);
			State = 1052; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_function1Context : ParserRuleContext {
		public ITerminalNode K_COUNT() { return GetToken(MiniSqlParserParser.K_COUNT, 0); }
		public ITerminalNode K_SUM() { return GetToken(MiniSqlParserParser.K_SUM, 0); }
		public ITerminalNode K_AVG() { return GetToken(MiniSqlParserParser.K_AVG, 0); }
		public ITerminalNode K_TOTAL() { return GetToken(MiniSqlParserParser.K_TOTAL, 0); }
		public ITerminalNode K_COUNT_BIG() { return GetToken(MiniSqlParserParser.K_COUNT_BIG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(MiniSqlParserParser.STAR, 0); }
		public ITerminalNode K_ALL() { return GetToken(MiniSqlParserParser.K_ALL, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(MiniSqlParserParser.K_DISTINCT, 0); }
		public Aggregate_function1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_function1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_function1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_function1(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_function1Context aggregate_function1() {
		Aggregate_function1Context _localctx = new Aggregate_function1Context(Context, State);
		EnterRule(_localctx, 112, RULE_aggregate_function1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 1054; Match(K_COUNT);
				}
				break;
			case 2:
				{
				State = 1055; Match(K_SUM);
				}
				break;
			case 3:
				{
				State = 1056; Match(K_AVG);
				}
				break;
			case 4:
				{
				State = 1057;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 1058; Match(K_TOTAL);
				}
				break;
			case 5:
				{
				State = 1059;
				if (!(IsMsSql || IsPervasive)) throw new FailedPredicateException(this, "IsMsSql || IsPervasive");
				State = 1060; Match(K_COUNT_BIG);
				}
				break;
			}
			State = 1063; Match(LPAR);
			State = 1065;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 1064;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1069;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				{
				State = 1067; expr(0);
				}
				break;
			case 2:
				{
				State = 1068; Match(STAR);
				}
				break;
			}
			State = 1071; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_function2Context : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_MAX() { return GetToken(MiniSqlParserParser.K_MAX, 0); }
		public ITerminalNode K_MIN() { return GetToken(MiniSqlParserParser.K_MIN, 0); }
		public ITerminalNode K_CORR() { return GetToken(MiniSqlParserParser.K_CORR, 0); }
		public ITerminalNode K_GROUP_CONCAT() { return GetToken(MiniSqlParserParser.K_GROUP_CONCAT, 0); }
		public ITerminalNode K_STDDEV_POP() { return GetToken(MiniSqlParserParser.K_STDDEV_POP, 0); }
		public ITerminalNode K_VAR_POP() { return GetToken(MiniSqlParserParser.K_VAR_POP, 0); }
		public ITerminalNode K_STDEVP() { return GetToken(MiniSqlParserParser.K_STDEVP, 0); }
		public ITerminalNode K_VAR() { return GetToken(MiniSqlParserParser.K_VAR, 0); }
		public ITerminalNode K_VARP() { return GetToken(MiniSqlParserParser.K_VARP, 0); }
		public ITerminalNode K_STDEV() { return GetToken(MiniSqlParserParser.K_STDEV, 0); }
		public ITerminalNode K_VARIANCE() { return GetToken(MiniSqlParserParser.K_VARIANCE, 0); }
		public ITerminalNode K_STDDEV() { return GetToken(MiniSqlParserParser.K_STDDEV, 0); }
		public ITerminalNode K_MEDIAN() { return GetToken(MiniSqlParserParser.K_MEDIAN, 0); }
		public Aggregate_function2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_function2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAggregate_function2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAggregate_function2(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_function2Context aggregate_function2() {
		Aggregate_function2Context _localctx = new Aggregate_function2Context(Context, State);
		EnterRule(_localctx, 114, RULE_aggregate_function2);
		int _la;
		try {
			State = 1132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1073;
				_la = TokenStream.LA(1);
				if ( !(_la==K_MAX || _la==K_MIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1074; Match(LPAR);
				State = 1075; expr(0);
				State = 1076; Match(RPAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1078;
				if (!(IsOracle || IsPostgreSql)) throw new FailedPredicateException(this, "IsOracle || IsPostgreSql");
				State = 1079; Match(K_CORR);
				State = 1080; Match(LPAR);
				State = 1081; expr(0);
				State = 1082; Match(COMMA);
				State = 1083; expr(0);
				State = 1084; Match(RPAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1086;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 1087; Match(K_GROUP_CONCAT);
				State = 1088; Match(LPAR);
				State = 1089; expr(0);
				State = 1092;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1090; Match(COMMA);
					State = 1091; expr(0);
					}
				}

				State = 1094; Match(RPAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1096;
				if (!(IsOracle || IsPostgreSql || IsMySql)) throw new FailedPredicateException(this, "IsOracle || IsPostgreSql || IsMySql");
				State = 1097;
				_la = TokenStream.LA(1);
				if ( !(_la==K_STDDEV_POP || _la==K_VAR_POP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1098; Match(LPAR);
				State = 1099; expr(0);
				State = 1100; Match(RPAR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1102;
				if (!(IsMsSql  || IsPervasive )) throw new FailedPredicateException(this, "IsMsSql  || IsPervasive ");
				State = 1103;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (K_STDEVP - 138)) | (1L << (K_VAR - 138)) | (1L << (K_VARP - 138)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1104; Match(LPAR);
				State = 1105; expr(0);
				State = 1106; Match(RPAR);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1108;
				if (!(IsMsSql  || IsPervasive )) throw new FailedPredicateException(this, "IsMsSql  || IsPervasive ");
				State = 1109; Match(K_STDEV);
				State = 1110; Match(LPAR);
				State = 1111; expr(0);
				State = 1112; Match(RPAR);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1114;
				if (!(IsOracle || IsPostgreSql || IsMySql)) throw new FailedPredicateException(this, "IsOracle || IsPostgreSql || IsMySql");
				State = 1115; Match(K_VARIANCE);
				State = 1116; Match(LPAR);
				State = 1117; expr(0);
				State = 1118; Match(RPAR);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1120;
				if (!(IsOracle || IsPostgreSql || IsMySql)) throw new FailedPredicateException(this, "IsOracle || IsPostgreSql || IsMySql");
				State = 1121; Match(K_STDDEV);
				State = 1122; Match(LPAR);
				State = 1123; expr(0);
				State = 1124; Match(RPAR);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1126;
				if (!(IsOracle)) throw new FailedPredicateException(this, "IsOracle");
				State = 1127; Match(K_MEDIAN);
				State = 1128; Match(LPAR);
				State = 1129; expr(0);
				State = 1130; Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_functionContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode K_OVER() { return GetToken(MiniSqlParserParser.K_OVER, 0); }
		public OrderBy_clauseContext orderBy_clause() {
			return GetRuleContext<OrderBy_clauseContext>(0);
		}
		public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(MiniSqlParserParser.STAR, 0); }
		public PartitionBy_clauseContext partitionBy_clause() {
			return GetRuleContext<PartitionBy_clauseContext>(0);
		}
		public ITerminalNode K_ALL() { return GetToken(MiniSqlParserParser.K_ALL, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(MiniSqlParserParser.K_DISTINCT, 0); }
		public Window_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterWindow_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitWindow_function(this);
		}
	}

	[RuleVersion(0)]
	public Window_functionContext window_function() {
		Window_functionContext _localctx = new Window_functionContext(Context, State);
		EnterRule(_localctx, 116, RULE_window_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134; function_name();
			State = 1135; Match(LPAR);
			State = 1137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 1136;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				{
				State = 1139; exprs();
				}
				break;
			case 2:
				{
				State = 1140; Match(STAR);
				}
				break;
			}
			State = 1143; Match(RPAR);
			State = 1144; Match(K_OVER);
			State = 1145; Match(LPAR);
			State = 1147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_PARTITION) {
				{
				State = 1146; partitionBy_clause();
				}
			}

			State = 1149; orderBy_clause();
			State = 1150; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_functionContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public Generic_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterGeneric_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitGeneric_function(this);
		}
	}

	[RuleVersion(0)]
	public Generic_functionContext generic_function() {
		Generic_functionContext _localctx = new Generic_functionContext(Context, State);
		EnterRule(_localctx, 118, RULE_generic_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1152; function_name();
			State = 1153; Match(LPAR);
			State = 1155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				{
				State = 1154; exprs();
				}
				break;
			}
			State = 1157; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_schema_nameContext : ParserRuleContext {
		public IdentifierContext s;
		public IdentifierContext d;
		public IdentifierContext n;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Qualified_schema_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_schema_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterQualified_schema_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitQualified_schema_name(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_schema_nameContext qualified_schema_name() {
		Qualified_schema_nameContext _localctx = new Qualified_schema_nameContext(Context, State);
		EnterRule(_localctx, 120, RULE_qualified_schema_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				{
				State = 1162;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
				case 1:
					{
					State = 1159; _localctx.s = identifier();
					State = 1160; Match(DOT);
					}
					break;
				}
				State = 1164; _localctx.d = identifier();
				State = 1165; Match(DOT);
				}
				break;
			}
			State = 1169; _localctx.n = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Qualified_schema_nameContext qualified_schema_name() {
			return GetRuleContext<Qualified_schema_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 122, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				{
				State = 1171; qualified_schema_name();
				State = 1172; Match(DOT);
				}
				break;
			}
			State = 1176; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Qualified_schema_nameContext qualified_schema_name() {
			return GetRuleContext<Qualified_schema_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 124, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				{
				State = 1178; qualified_schema_name();
				State = 1179; Match(DOT);
				}
				break;
			}
			State = 1183; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Qualified_schema_nameContext qualified_schema_name() {
			return GetRuleContext<Qualified_schema_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 126, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 1185; qualified_schema_name();
				State = 1186; Match(DOT);
				}
				break;
			}
			State = 1190; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 128, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				{
				State = 1192; table_name();
				State = 1193; Match(DOT);
				}
				break;
			}
			State = 1197; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unqualified_column_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Unqualified_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualified_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterUnqualified_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitUnqualified_column_name(this);
		}
	}

	[RuleVersion(0)]
	public Unqualified_column_nameContext unqualified_column_name() {
		Unqualified_column_nameContext _localctx = new Unqualified_column_nameContext(Context, State);
		EnterRule(_localctx, 130, RULE_unqualified_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1199; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aliased_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(MiniSqlParserParser.K_AS, 0); }
		public Aliased_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliased_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterAliased_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitAliased_table_name(this);
		}
	}

	[RuleVersion(0)]
	public Aliased_table_nameContext aliased_table_name() {
		Aliased_table_nameContext _localctx = new Aliased_table_nameContext(Context, State);
		EnterRule(_localctx, 132, RULE_aliased_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1201; table_name();
			State = 1206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				{
				State = 1203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_AS) {
					{
					State = 1202; Match(K_AS);
					}
				}

				State = 1205; table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_INDEXED() { return GetToken(MiniSqlParserParser.K_INDEXED, 0); }
		public ITerminalNode K_BY() { return GetToken(MiniSqlParserParser.K_BY, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public Indexed_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIndexed_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIndexed_table_name(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_table_nameContext indexed_table_name() {
		Indexed_table_nameContext _localctx = new Indexed_table_nameContext(Context, State);
		EnterRule(_localctx, 134, RULE_indexed_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208; table_name();
			State = 1217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1209;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 1215;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_INDEXED:
					{
					State = 1210; Match(K_INDEXED);
					State = 1211; Match(K_BY);
					State = 1212; index_name();
					}
					break;
				case K_NOT:
					{
					State = 1213; Match(K_NOT);
					State = 1214; Match(K_INDEXED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_aliased_table_nameContext : ParserRuleContext {
		public Aliased_table_nameContext aliased_table_name() {
			return GetRuleContext<Aliased_table_nameContext>(0);
		}
		public ITerminalNode K_INDEXED() { return GetToken(MiniSqlParserParser.K_INDEXED, 0); }
		public ITerminalNode K_BY() { return GetToken(MiniSqlParserParser.K_BY, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(MiniSqlParserParser.K_NOT, 0); }
		public Indexed_aliased_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_aliased_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIndexed_aliased_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIndexed_aliased_table_name(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_aliased_table_nameContext indexed_aliased_table_name() {
		Indexed_aliased_table_nameContext _localctx = new Indexed_aliased_table_nameContext(Context, State);
		EnterRule(_localctx, 136, RULE_indexed_aliased_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219; aliased_table_name();
			State = 1228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				{
				State = 1220;
				if (!(IsSQLite)) throw new FailedPredicateException(this, "IsSQLite");
				State = 1226;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_INDEXED:
					{
					State = 1221; Match(K_INDEXED);
					State = 1222; Match(K_BY);
					State = 1223; index_name();
					}
					break;
				case K_NOT:
					{
					State = 1224; Match(K_NOT);
					State = 1225; Match(K_INDEXED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode[] UINTEGER_LITERAL() { return GetTokens(MiniSqlParserParser.UINTEGER_LITERAL); }
		public ITerminalNode UINTEGER_LITERAL(int i) {
			return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 138, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1230; identifier();
			State = 1239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 1231; Match(LPAR);
				State = 1232; Match(UINTEGER_LITERAL);
				State = 1233; Match(RPAR);
				}
				break;
			case 2:
				{
				State = 1234; Match(LPAR);
				State = 1235; Match(UINTEGER_LITERAL);
				State = 1236; Match(COMMA);
				State = 1237; Match(UINTEGER_LITERAL);
				State = 1238; Match(RPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterCollation_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitCollation_name(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(Context, State);
		EnterRule(_localctx, 140, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1241; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(MiniSqlParserParser.IDENTIFIER, 0); }
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 142, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(MiniSqlParserParser.IDENTIFIER, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 144, RULE_column_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(MiniSqlParserParser.IDENTIFIER, 0); }
		public Identifiable_keywordContext identifiable_keyword() {
			return GetRuleContext<Identifiable_keywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 146, RULE_identifier);
		try {
			State = 1249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1247; Match(IDENTIFIER);
				}
				break;
			case K_ABORT:
			case K_ANY:
			case K_ASC:
			case K_AVG:
			case K_BEGIN:
			case K_CAST:
			case K_COLLATE:
			case K_CORR:
			case K_COUNT:
			case K_COUNT_BIG:
			case K_CROSS:
			case K_DATE:
			case K_DAY:
			case K_DECLARE:
			case K_DEFAULT:
			case K_DESC:
			case K_ESCAPE:
			case K_EXEC:
			case K_EXECUTE:
			case K_EXTRACT:
			case K_FAIL:
			case K_FETCH:
			case K_FIRST:
			case K_FOR:
			case K_FULL:
			case K_GLOB:
			case K_GROUP_CONCAT:
			case K_HOUR:
			case K_IGNORE:
			case K_INDEXED:
			case K_INNER:
			case K_INTERVAL:
			case K_LAST:
			case K_LEFT:
			case K_LIMIT:
			case K_LOCKED:
			case K_MATCH:
			case K_MATCHED:
			case K_MAX:
			case K_MEDIAN:
			case K_MIN:
			case K_MINUS:
			case K_MINUTE:
			case K_MONTH:
			case K_NATURAL:
			case K_NEXT:
			case K_NOWAIT:
			case K_NULLS:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_ONLY:
			case K_OUTER:
			case K_OUTPUT:
			case K_OVER:
			case K_PRAGMA:
			case K_PARTITION:
			case K_RECURSIVE:
			case K_REGEXP:
			case K_REPLACE:
			case K_PERCENT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_ROWS:
			case K_SECOND:
			case K_SKIP:
			case K_SOME:
			case K_SUM:
			case K_STDEVP:
			case K_STDDEV:
			case K_STDDEV_POP:
			case K_STDEV:
			case K_SUBSTR:
			case K_SUBSTRING:
			case K_TABLE:
			case K_TABLE_INFO:
			case K_TIES:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TO:
			case K_TOP:
			case K_TOTAL:
			case K_USING:
			case K_VAR:
			case K_VARIANCE:
			case K_VARP:
			case K_VAR_POP:
			case K_WAIT:
			case K_WITH:
			case K_YEAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1248; identifiable_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifiable_keywordContext : ParserRuleContext {
		public ITerminalNode K_ABORT() { return GetToken(MiniSqlParserParser.K_ABORT, 0); }
		public ITerminalNode K_ANY() { return GetToken(MiniSqlParserParser.K_ANY, 0); }
		public ITerminalNode K_ASC() { return GetToken(MiniSqlParserParser.K_ASC, 0); }
		public ITerminalNode K_AVG() { return GetToken(MiniSqlParserParser.K_AVG, 0); }
		public ITerminalNode K_BEGIN() { return GetToken(MiniSqlParserParser.K_BEGIN, 0); }
		public ITerminalNode K_CAST() { return GetToken(MiniSqlParserParser.K_CAST, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(MiniSqlParserParser.K_COLLATE, 0); }
		public ITerminalNode K_CORR() { return GetToken(MiniSqlParserParser.K_CORR, 0); }
		public ITerminalNode K_COUNT() { return GetToken(MiniSqlParserParser.K_COUNT, 0); }
		public ITerminalNode K_COUNT_BIG() { return GetToken(MiniSqlParserParser.K_COUNT_BIG, 0); }
		public ITerminalNode K_CROSS() { return GetToken(MiniSqlParserParser.K_CROSS, 0); }
		public ITerminalNode K_DATE() { return GetToken(MiniSqlParserParser.K_DATE, 0); }
		public ITerminalNode K_DAY() { return GetToken(MiniSqlParserParser.K_DAY, 0); }
		public ITerminalNode K_DECLARE() { return GetToken(MiniSqlParserParser.K_DECLARE, 0); }
		public ITerminalNode K_DEFAULT() { return GetToken(MiniSqlParserParser.K_DEFAULT, 0); }
		public ITerminalNode K_DESC() { return GetToken(MiniSqlParserParser.K_DESC, 0); }
		public ITerminalNode K_ESCAPE() { return GetToken(MiniSqlParserParser.K_ESCAPE, 0); }
		public ITerminalNode K_EXEC() { return GetToken(MiniSqlParserParser.K_EXEC, 0); }
		public ITerminalNode K_EXECUTE() { return GetToken(MiniSqlParserParser.K_EXECUTE, 0); }
		public ITerminalNode K_EXTRACT() { return GetToken(MiniSqlParserParser.K_EXTRACT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(MiniSqlParserParser.K_FAIL, 0); }
		public ITerminalNode K_FETCH() { return GetToken(MiniSqlParserParser.K_FETCH, 0); }
		public ITerminalNode K_FIRST() { return GetToken(MiniSqlParserParser.K_FIRST, 0); }
		public ITerminalNode K_FOR() { return GetToken(MiniSqlParserParser.K_FOR, 0); }
		public ITerminalNode K_FULL() { return GetToken(MiniSqlParserParser.K_FULL, 0); }
		public ITerminalNode K_GLOB() { return GetToken(MiniSqlParserParser.K_GLOB, 0); }
		public ITerminalNode K_GROUP_CONCAT() { return GetToken(MiniSqlParserParser.K_GROUP_CONCAT, 0); }
		public ITerminalNode K_HOUR() { return GetToken(MiniSqlParserParser.K_HOUR, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(MiniSqlParserParser.K_IGNORE, 0); }
		public ITerminalNode K_INDEXED() { return GetToken(MiniSqlParserParser.K_INDEXED, 0); }
		public ITerminalNode K_INNER() { return GetToken(MiniSqlParserParser.K_INNER, 0); }
		public ITerminalNode K_INTERVAL() { return GetToken(MiniSqlParserParser.K_INTERVAL, 0); }
		public ITerminalNode K_LAST() { return GetToken(MiniSqlParserParser.K_LAST, 0); }
		public ITerminalNode K_LEFT() { return GetToken(MiniSqlParserParser.K_LEFT, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(MiniSqlParserParser.K_LIMIT, 0); }
		public ITerminalNode K_LOCKED() { return GetToken(MiniSqlParserParser.K_LOCKED, 0); }
		public ITerminalNode K_MATCH() { return GetToken(MiniSqlParserParser.K_MATCH, 0); }
		public ITerminalNode K_MATCHED() { return GetToken(MiniSqlParserParser.K_MATCHED, 0); }
		public ITerminalNode K_MAX() { return GetToken(MiniSqlParserParser.K_MAX, 0); }
		public ITerminalNode K_MEDIAN() { return GetToken(MiniSqlParserParser.K_MEDIAN, 0); }
		public ITerminalNode K_MIN() { return GetToken(MiniSqlParserParser.K_MIN, 0); }
		public ITerminalNode K_MINUS() { return GetToken(MiniSqlParserParser.K_MINUS, 0); }
		public ITerminalNode K_MINUTE() { return GetToken(MiniSqlParserParser.K_MINUTE, 0); }
		public ITerminalNode K_MONTH() { return GetToken(MiniSqlParserParser.K_MONTH, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(MiniSqlParserParser.K_NATURAL, 0); }
		public ITerminalNode K_NEXT() { return GetToken(MiniSqlParserParser.K_NEXT, 0); }
		public ITerminalNode K_NOWAIT() { return GetToken(MiniSqlParserParser.K_NOWAIT, 0); }
		public ITerminalNode K_NULLS() { return GetToken(MiniSqlParserParser.K_NULLS, 0); }
		public ITerminalNode K_OF() { return GetToken(MiniSqlParserParser.K_OF, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(MiniSqlParserParser.K_OFFSET, 0); }
		public ITerminalNode K_ON() { return GetToken(MiniSqlParserParser.K_ON, 0); }
		public ITerminalNode K_ONLY() { return GetToken(MiniSqlParserParser.K_ONLY, 0); }
		public ITerminalNode K_OUTER() { return GetToken(MiniSqlParserParser.K_OUTER, 0); }
		public ITerminalNode K_OUTPUT() { return GetToken(MiniSqlParserParser.K_OUTPUT, 0); }
		public ITerminalNode K_OVER() { return GetToken(MiniSqlParserParser.K_OVER, 0); }
		public ITerminalNode K_PRAGMA() { return GetToken(MiniSqlParserParser.K_PRAGMA, 0); }
		public ITerminalNode K_PARTITION() { return GetToken(MiniSqlParserParser.K_PARTITION, 0); }
		public ITerminalNode K_RECURSIVE() { return GetToken(MiniSqlParserParser.K_RECURSIVE, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(MiniSqlParserParser.K_REGEXP, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(MiniSqlParserParser.K_REPLACE, 0); }
		public ITerminalNode K_PERCENT() { return GetToken(MiniSqlParserParser.K_PERCENT, 0); }
		public ITerminalNode K_RIGHT() { return GetToken(MiniSqlParserParser.K_RIGHT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(MiniSqlParserParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ROW() { return GetToken(MiniSqlParserParser.K_ROW, 0); }
		public ITerminalNode K_ROWS() { return GetToken(MiniSqlParserParser.K_ROWS, 0); }
		public ITerminalNode K_SECOND() { return GetToken(MiniSqlParserParser.K_SECOND, 0); }
		public ITerminalNode K_SKIP() { return GetToken(MiniSqlParserParser.K_SKIP, 0); }
		public ITerminalNode K_SOME() { return GetToken(MiniSqlParserParser.K_SOME, 0); }
		public ITerminalNode K_SUM() { return GetToken(MiniSqlParserParser.K_SUM, 0); }
		public ITerminalNode K_STDEVP() { return GetToken(MiniSqlParserParser.K_STDEVP, 0); }
		public ITerminalNode K_STDDEV() { return GetToken(MiniSqlParserParser.K_STDDEV, 0); }
		public ITerminalNode K_STDDEV_POP() { return GetToken(MiniSqlParserParser.K_STDDEV_POP, 0); }
		public ITerminalNode K_STDEV() { return GetToken(MiniSqlParserParser.K_STDEV, 0); }
		public ITerminalNode K_SUBSTR() { return GetToken(MiniSqlParserParser.K_SUBSTR, 0); }
		public ITerminalNode K_SUBSTRING() { return GetToken(MiniSqlParserParser.K_SUBSTRING, 0); }
		public ITerminalNode K_TABLE() { return GetToken(MiniSqlParserParser.K_TABLE, 0); }
		public ITerminalNode K_TABLE_INFO() { return GetToken(MiniSqlParserParser.K_TABLE_INFO, 0); }
		public ITerminalNode K_TIES() { return GetToken(MiniSqlParserParser.K_TIES, 0); }
		public ITerminalNode K_TIME() { return GetToken(MiniSqlParserParser.K_TIME, 0); }
		public ITerminalNode K_TIMESTAMP() { return GetToken(MiniSqlParserParser.K_TIMESTAMP, 0); }
		public ITerminalNode K_TO() { return GetToken(MiniSqlParserParser.K_TO, 0); }
		public ITerminalNode K_TOP() { return GetToken(MiniSqlParserParser.K_TOP, 0); }
		public ITerminalNode K_TOTAL() { return GetToken(MiniSqlParserParser.K_TOTAL, 0); }
		public ITerminalNode K_USING() { return GetToken(MiniSqlParserParser.K_USING, 0); }
		public ITerminalNode K_VAR() { return GetToken(MiniSqlParserParser.K_VAR, 0); }
		public ITerminalNode K_VARIANCE() { return GetToken(MiniSqlParserParser.K_VARIANCE, 0); }
		public ITerminalNode K_VARP() { return GetToken(MiniSqlParserParser.K_VARP, 0); }
		public ITerminalNode K_VAR_POP() { return GetToken(MiniSqlParserParser.K_VAR_POP, 0); }
		public ITerminalNode K_WAIT() { return GetToken(MiniSqlParserParser.K_WAIT, 0); }
		public ITerminalNode K_WITH() { return GetToken(MiniSqlParserParser.K_WITH, 0); }
		public ITerminalNode K_YEAR() { return GetToken(MiniSqlParserParser.K_YEAR, 0); }
		public Identifiable_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiable_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifiable_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifiable_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Identifiable_keywordContext identifiable_keyword() {
		Identifiable_keywordContext _localctx = new Identifiable_keywordContext(Context, State);
		EnterRule(_localctx, 148, RULE_identifiable_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_ABORT) | (1L << K_ANY) | (1L << K_ASC) | (1L << K_AVG) | (1L << K_BEGIN) | (1L << K_CAST) | (1L << K_COLLATE) | (1L << K_CORR) | (1L << K_COUNT) | (1L << K_COUNT_BIG) | (1L << K_CROSS) | (1L << K_DATE) | (1L << K_DAY) | (1L << K_DECLARE) | (1L << K_DEFAULT) | (1L << K_DESC))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (K_ESCAPE - 65)) | (1L << (K_EXEC - 65)) | (1L << (K_EXECUTE - 65)) | (1L << (K_EXTRACT - 65)) | (1L << (K_FAIL - 65)) | (1L << (K_FETCH - 65)) | (1L << (K_FIRST - 65)) | (1L << (K_FOR - 65)) | (1L << (K_FULL - 65)) | (1L << (K_GLOB - 65)) | (1L << (K_GROUP_CONCAT - 65)) | (1L << (K_HOUR - 65)) | (1L << (K_IGNORE - 65)) | (1L << (K_INDEXED - 65)) | (1L << (K_INNER - 65)) | (1L << (K_INTERVAL - 65)) | (1L << (K_LAST - 65)) | (1L << (K_LEFT - 65)) | (1L << (K_LIMIT - 65)) | (1L << (K_LOCKED - 65)) | (1L << (K_MATCH - 65)) | (1L << (K_MATCHED - 65)) | (1L << (K_MAX - 65)) | (1L << (K_MEDIAN - 65)) | (1L << (K_MIN - 65)) | (1L << (K_MINUS - 65)) | (1L << (K_MINUTE - 65)) | (1L << (K_MONTH - 65)) | (1L << (K_NATURAL - 65)) | (1L << (K_NEXT - 65)) | (1L << (K_NOWAIT - 65)) | (1L << (K_NULLS - 65)) | (1L << (K_OF - 65)) | (1L << (K_OFFSET - 65)) | (1L << (K_ON - 65)) | (1L << (K_ONLY - 65)) | (1L << (K_OUTER - 65)) | (1L << (K_OUTPUT - 65)) | (1L << (K_OVER - 65)) | (1L << (K_PRAGMA - 65)) | (1L << (K_PARTITION - 65)) | (1L << (K_RECURSIVE - 65)) | (1L << (K_REGEXP - 65)) | (1L << (K_REPLACE - 65)) | (1L << (K_PERCENT - 65)) | (1L << (K_RIGHT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (K_ROLLBACK - 129)) | (1L << (K_ROW - 129)) | (1L << (K_ROWS - 129)) | (1L << (K_SECOND - 129)) | (1L << (K_SKIP - 129)) | (1L << (K_SOME - 129)) | (1L << (K_SUM - 129)) | (1L << (K_STDEVP - 129)) | (1L << (K_STDDEV - 129)) | (1L << (K_STDDEV_POP - 129)) | (1L << (K_STDEV - 129)) | (1L << (K_SUBSTR - 129)) | (1L << (K_SUBSTRING - 129)) | (1L << (K_TABLE - 129)) | (1L << (K_TABLE_INFO - 129)) | (1L << (K_TIES - 129)) | (1L << (K_TIME - 129)) | (1L << (K_TIMESTAMP - 129)) | (1L << (K_TO - 129)) | (1L << (K_TOP - 129)) | (1L << (K_TOTAL - 129)) | (1L << (K_USING - 129)) | (1L << (K_VAR - 129)) | (1L << (K_VARIANCE - 129)) | (1L << (K_VARP - 129)) | (1L << (K_VAR_POP - 129)) | (1L << (K_WAIT - 129)) | (1L << (K_WITH - 129)) | (1L << (K_YEAR - 129)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(MiniSqlParserParser.STRING_LITERAL, 0); }
		public ITerminalNode UINTEGER_LITERAL() { return GetToken(MiniSqlParserParser.UINTEGER_LITERAL, 0); }
		public ITerminalNode K_NULL() { return GetToken(MiniSqlParserParser.K_NULL, 0); }
		public ITerminalNode DATE_LITERAL() { return GetToken(MiniSqlParserParser.DATE_LITERAL, 0); }
		public ITerminalNode TIME_LITERAL() { return GetToken(MiniSqlParserParser.TIME_LITERAL, 0); }
		public ITerminalNode TIMESTAMP_LITERAL() { return GetToken(MiniSqlParserParser.TIMESTAMP_LITERAL, 0); }
		public ITerminalNode INTERVAL_LITERAL() { return GetToken(MiniSqlParserParser.INTERVAL_LITERAL, 0); }
		public ITerminalNode UNUMERIC_LITERAL() { return GetToken(MiniSqlParserParser.UNUMERIC_LITERAL, 0); }
		public ITerminalNode BLOB_LITERAL() { return GetToken(MiniSqlParserParser.BLOB_LITERAL, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 150, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UINTEGER_LITERAL) | (1L << UNUMERIC_LITERAL) | (1L << DATE_LITERAL) | (1L << TIME_LITERAL) | (1L << TIMESTAMP_LITERAL) | (1L << INTERVAL_LITERAL) | (1L << STRING_LITERAL) | (1L << BLOB_LITERAL))) != 0) || _la==K_NULL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeFieldContext : ParserRuleContext {
		public ITerminalNode K_YEAR() { return GetToken(MiniSqlParserParser.K_YEAR, 0); }
		public ITerminalNode K_MONTH() { return GetToken(MiniSqlParserParser.K_MONTH, 0); }
		public ITerminalNode K_DAY() { return GetToken(MiniSqlParserParser.K_DAY, 0); }
		public ITerminalNode K_HOUR() { return GetToken(MiniSqlParserParser.K_HOUR, 0); }
		public ITerminalNode K_MINUTE() { return GetToken(MiniSqlParserParser.K_MINUTE, 0); }
		public ITerminalNode K_SECOND() { return GetToken(MiniSqlParserParser.K_SECOND, 0); }
		public DatetimeFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetimeField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.EnterDatetimeField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSqlParserListener typedListener = listener as IMiniSqlParserListener;
			if (typedListener != null) typedListener.ExitDatetimeField(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeFieldContext datetimeField() {
		DatetimeFieldContext _localctx = new DatetimeFieldContext(Context, State);
		EnterRule(_localctx, 152, RULE_datetimeField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (K_DAY - 56)) | (1L << (K_HOUR - 56)) | (1L << (K_MINUTE - 56)) | (1L << (K_MONTH - 56)))) != 0) || _la==K_SECOND || _la==K_YEAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return stmt_sub_sempred((Stmt_subContext)_localctx, predIndex);
		case 12: return update_stmt_sempred((Update_stmtContext)_localctx, predIndex);
		case 13: return insert_stmt_sempred((Insert_stmtContext)_localctx, predIndex);
		case 14: return delete_stmt_sempred((Delete_stmtContext)_localctx, predIndex);
		case 18: return call_stmt_sempred((Call_stmtContext)_localctx, predIndex);
		case 26: return query_clause_sempred((Query_clauseContext)_localctx, predIndex);
		case 37: return join_clause_sempred((Join_clauseContext)_localctx, predIndex);
		case 38: return join_constraint_sempred((Join_constraintContext)_localctx, predIndex);
		case 39: return join_operator_sempred((Join_operatorContext)_localctx, predIndex);
		case 45: return declare_sempred((DeclareContext)_localctx, predIndex);
		case 49: return limit_clause_sempred((Limit_clauseContext)_localctx, predIndex);
		case 50: return for_update_clause_sempred((For_update_clauseContext)_localctx, predIndex);
		case 52: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 53: return expr_sempred((ExprContext)_localctx, predIndex);
		case 56: return aggregate_function1_sempred((Aggregate_function1Context)_localctx, predIndex);
		case 57: return aggregate_function2_sempred((Aggregate_function2Context)_localctx, predIndex);
		case 67: return indexed_table_name_sempred((Indexed_table_nameContext)_localctx, predIndex);
		case 68: return indexed_aliased_table_name_sempred((Indexed_aliased_table_nameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool stmt_sub_sempred(Stmt_subContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return IsOracle || IsMsSql;
		case 1: return IsOracle || IsMySql || IsMsSql || IsPervasive;
		case 2: return IsOracle || IsMySql || IsMsSql || IsPostgreSql;
		case 3: return IsSQLite;
		}
		return true;
	}
	private bool update_stmt_sempred(Update_stmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return IsSQLite;
		case 5: return IsSQLite;
		case 6: return IsSQLite;
		case 7: return IsSQLite;
		case 8: return IsSQLite;
		case 9: return IsSQLite || IsMsSql;
		case 10: return IsOracle || IsMySql || IsPostgreSql || IsPervasive;
		case 11: return IsMsSql || IsPostgreSql;
		}
		return true;
	}
	private bool insert_stmt_sempred(Insert_stmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return IsSQLite;
		case 13: return IsSQLite;
		case 14: return IsSQLite;
		case 15: return IsSQLite;
		case 16: return IsSQLite;
		case 17: return IsSQLite;
		}
		return true;
	}
	private bool delete_stmt_sempred(Delete_stmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return IsMySql  || IsSQLite     || IsMsSql;
		case 19: return IsOracle || IsPostgreSql || IsPervasive;
		case 20: return IsMsSql;
		}
		return true;
	}
	private bool call_stmt_sempred(Call_stmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return IsOracle;
		case 22: return IsMySql || IsPervasive;
		case 23: return IsMsSql;
		}
		return true;
	}
	private bool query_clause_sempred(Query_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return IsMsSql || IsPervasive;
		case 25: return IsMsSql;
		case 26: return Precpred(Context, 3);
		}
		return true;
	}
	private bool join_clause_sempred(Join_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return Precpred(Context, 1);
		case 28: return Precpred(Context, 3);
		}
		return true;
	}
	private bool join_constraint_sempred(Join_constraintContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return IsOracle || IsMySql || IsSQLite || IsPostgreSql || IsPervasive;
		}
		return true;
	}
	private bool join_operator_sempred(Join_operatorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return IsOracle || IsMySql || IsSQLite || IsPostgreSql;
		}
		return true;
	}
	private bool declare_sempred(DeclareContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return IsMsSql;
		}
		return true;
	}
	private bool limit_clause_sempred(Limit_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return IsMySql || IsSQLite || IsPostgreSql || IsPervasive;
		case 33: return IsOracle || IsMsSql;
		case 34: return IsOracle;
		case 35: return IsOracle;
		}
		return true;
	}
	private bool for_update_clause_sempred(For_update_clauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return IsOracle || IsMySql || IsPostgreSql;
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 3);
		case 38: return Precpred(Context, 2);
		case 39: return Precpred(Context, 5);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return IsOracle;
		case 41: return Precpred(Context, 14);
		case 42: return IsOracle || IsSQLite || IsPostgreSql;
		case 43: return Precpred(Context, 13);
		case 44: return Precpred(Context, 12);
		case 45: return Precpred(Context, 11);
		}
		return true;
	}
	private bool aggregate_function1_sempred(Aggregate_function1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return IsSQLite;
		case 47: return IsMsSql || IsPervasive;
		}
		return true;
	}
	private bool aggregate_function2_sempred(Aggregate_function2Context _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return IsOracle || IsPostgreSql;
		case 49: return IsSQLite;
		case 50: return IsOracle || IsPostgreSql || IsMySql;
		case 51: return IsMsSql  || IsPervasive ;
		case 52: return IsMsSql  || IsPervasive ;
		case 53: return IsOracle || IsPostgreSql || IsMySql;
		case 54: return IsOracle || IsPostgreSql || IsMySql;
		case 55: return IsOracle;
		}
		return true;
	}
	private bool indexed_table_name_sempred(Indexed_table_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return IsSQLite;
		}
		return true;
	}
	private bool indexed_aliased_table_name_sempred(Indexed_aliased_table_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return IsSQLite;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xB3', '\x4EC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\xAE', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\xB8', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\xBB', '\v', '\b', '\x3', '\b', '\x5', '\b', '\xBE', '\n', '\b', 
		'\x3', '\t', '\a', '\t', '\xC1', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'\xC4', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xCB', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\xDA', '\n', '\f', '\x3', '\r', '\x5', '\r', '\xDD', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xE1', '\n', '\r', '\x3', 
		'\xE', '\x5', '\xE', '\xE4', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\xF6', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\xFC', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x103', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x107', '\n', '\xE', 
		'\x3', '\xF', '\x5', '\xF', '\x10A', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x10E', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x113', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x12E', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x132', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x137', 
		'\n', '\xF', '\x3', '\x10', '\x5', '\x10', '\x13A', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x13E', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x144', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x149', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x14D', '\n', 
		'\x10', '\x3', '\x11', '\x5', '\x11', '\x150', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x158', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x160', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x164', '\n', 
		'\x11', '\x5', '\x11', '\x166', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x175', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x17C', 
		'\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x17F', '\v', '\x14', '\x3', 
		'\x14', '\x6', '\x14', '\x182', '\n', '\x14', '\r', '\x14', '\xE', '\x14', 
		'\x183', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\x18B', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x6', '\x14', '\x18F', '\n', '\x14', '\r', '\x14', '\xE', '\x14', '\x190', 
		'\x3', '\x14', '\x3', '\x14', '\x6', '\x14', '\x195', '\n', '\x14', '\r', 
		'\x14', '\xE', '\x14', '\x196', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x19E', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x1A4', 
		'\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x1A7', '\v', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x1AC', '\n', '\x14', 
		'\x5', '\x14', '\x1AE', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\a', '\x16', '\x1BD', '\n', '\x16', '\f', '\x16', '\xE', '\x16', 
		'\x1C0', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x1C4', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x1CF', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x1D7', 
		'\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\x1DC', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x1DF', '\v', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x1E3', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x1EC', '\n', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x1EF', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x1F4', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\x1FD', '\n', '\x1C', '\x5', '\x1C', '\x1FF', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x203', '\n', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x207', '\n', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x20B', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x210', '\n', '\x1C', '\x5', '\x1C', 
		'\x212', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', 
		'\x1C', '\x221', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x224', '\v', 
		'\x1C', '\x5', '\x1C', '\x226', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x22B', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x230', '\n', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x233', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x236', 
		'\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x23C', '\n', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x23F', 
		'\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', 
		'\x244', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x247', '\v', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x24F', '\n', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x252', '\n', '\x1F', '\x5', '\x1F', '\x254', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\a', ' ', '\x25E', '\n', ' ', '\f', ' ', '\xE', ' ', 
		'\x261', '\v', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', 
		'!', '\x267', '\n', '!', '\f', '!', '\xE', '!', '\x26A', '\v', '!', '\x3', 
		'!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', 
		'\"', '\x272', '\n', '\"', '\f', '\"', '\xE', '\"', '\x275', '\v', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\a', '#', 
		'\x27C', '\n', '#', '\f', '#', '\xE', '#', '\x27F', '\v', '#', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', '\x285', '\n', '$', 
		'\f', '$', '\xE', '$', '\x288', '\v', '$', '\x3', '$', '\x3', '$', '\x3', 
		'%', '\x3', '%', '\x5', '%', '\x28E', '\n', '%', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\a', '&', '\x293', '\n', '&', '\f', '&', '\xE', '&', '\x296', 
		'\v', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x29F', '\n', '\'', '\x3', 
		'\'', '\x5', '\'', '\x2A2', '\n', '\'', '\x5', '\'', '\x2A4', '\n', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x5', '\'', '\x2AD', '\n', '\'', '\a', '\'', '\x2AF', 
		'\n', '\'', '\f', '\'', '\xE', '\'', '\x2B2', '\v', '\'', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x2B9', '\n', 
		'(', '\x3', ')', '\x3', ')', '\x5', ')', '\x2BD', '\n', ')', '\x3', ')', 
		'\x3', ')', '\x5', ')', '\x2C1', '\n', ')', '\x3', ')', '\x3', ')', '\x5', 
		')', '\x2C5', '\n', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x2C9', 
		'\n', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x2CD', '\n', ')', '\x3', 
		')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x2DA', 
		'\n', '+', '\f', '+', '\xE', '+', '\x2DD', '\v', '+', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x5', ',', '\x2E2', '\n', ',', '\x3', ',', '\x5', ',', 
		'\x2E5', '\n', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x2E9', '\n', 
		',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\a', 
		'-', '\x2F0', '\n', '-', '\f', '-', '\xE', '-', '\x2F3', '\v', '-', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x2F8', '\n', '.', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x2FE', '\n', '/', '\x3', 
		'/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x304', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', 
		'\x309', '\n', '\x30', '\a', '\x30', '\x30B', '\n', '\x30', '\f', '\x30', 
		'\xE', '\x30', '\x30E', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', '\x5', 
		'\x31', '\x312', '\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x5', '\x32', '\x318', '\n', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x5', '\x33', '\x322', '\n', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x32C', '\n', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', 
		'\x33', '\x333', '\n', '\x33', '\x5', '\x33', '\x335', '\n', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', 
		'\x33', '\x33C', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x5', '\x33', '\x342', '\n', '\x33', '\x5', '\x33', '\x344', 
		'\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x5', '\x34', '\x34A', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x34F', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x5', '\x34', '\x353', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\a', '\x35', '\x359', '\n', '\x35', '\f', '\x35', 
		'\xE', '\x35', '\x35C', '\v', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x5', '\x36', '\x36B', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x371', '\n', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x376', '\n', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x5', '\x36', '\x37D', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x5', '\x36', '\x383', '\n', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x5', '\x36', '\x38C', '\n', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x392', '\n', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x5', '\x36', '\x3A8', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\a', '\x36', '\x3B3', '\n', '\x36', '\f', '\x36', 
		'\xE', '\x36', '\x3B6', '\v', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x5', '\x37', '\x3C1', '\n', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x6', '\x37', 
		'\x3E1', '\n', '\x37', '\r', '\x37', '\xE', '\x37', '\x3E2', '\x3', '\x37', 
		'\x3', '\x37', '\x5', '\x37', '\x3E7', '\n', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x6', '\x37', '\x3F1', '\n', '\x37', '\r', '\x37', 
		'\xE', '\x37', '\x3F2', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x3F7', 
		'\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x3FB', '\n', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\a', '\x37', '\x40A', 
		'\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x40D', '\v', '\x37', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x5', '\x38', '\x416', '\n', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x428', 
		'\n', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x42C', '\n', ':', '\x3', 
		':', '\x3', ':', '\x5', ':', '\x430', '\n', ':', '\x3', ':', '\x3', ':', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x5', ';', '\x447', '\n', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', 
		';', '\x46F', '\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', 
		'\x474', '\n', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x478', '\n', 
		'<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x47E', 
		'\n', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x5', '=', '\x486', '\n', '=', '\x3', '=', '\x3', '=', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x5', '>', '\x48D', '\n', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x5', '>', '\x492', '\n', '>', '\x3', '>', '\x3', 
		'>', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x499', '\n', '?', 
		'\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', 
		'\x4A0', '\n', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x5', '\x41', '\x4A7', '\n', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x4AE', 
		'\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x4B6', '\n', '\x44', '\x3', 
		'\x44', '\x5', '\x44', '\x4B9', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x5', '\x45', '\x4C2', '\n', '\x45', '\x5', '\x45', '\x4C4', '\n', '\x45', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x4CD', '\n', '\x46', '\x5', 
		'\x46', '\x4CF', '\n', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 
		'G', '\x4DA', '\n', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', 
		'\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x4E4', '\n', 
		'K', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 
		'N', '\x3', 'N', '\x2', '\x6', '\x36', 'L', 'j', 'l', 'O', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', 
		'~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', 
		'\x92', '\x94', '\x96', '\x98', '\x9A', '\x2', '\x1B', '\x3', '\x2', '\x45', 
		'\x46', '\x4', '\x2', '%', '%', '?', '?', '\x4', '\x2', ')', ')', '>', 
		'>', '\x4', '\x2', 'K', 'K', '_', '_', '\x4', '\x2', '\a', '\a', 't', 
		't', '\x3', '\x2', '\x84', '\x85', '\x4', '\x2', 'K', 'K', 'n', 'n', '\x3', 
		'\x2', '\x14', '\x17', '\x4', '\x2', '\b', '\b', '\x18', '\x1A', '\x6', 
		'\x2', 'O', 'O', '\x61', '\x61', '\x64', '\x64', '\x7F', '\x7F', '\x4', 
		'\x2', '\b', '\b', '\x14', '\x1A', '\x5', '\x2', '%', '%', '\'', '\'', 
		'\x8A', '\x8A', '\x3', '\x2', '\n', '\v', '\x3', '\x2', '\x1C', '\x1D', 
		'\x4', '\x2', '\t', '\t', '\xE', '\xF', '\x3', '\x2', '\x10', '\x13', 
		'\x3', '\x2', '\x90', '\x91', '\x4', '\x2', '\a', '\a', 'M', 'M', '\x4', 
		'\x2', '\a', '\a', 'L', 'L', '\x4', '\x2', '\x66', '\x66', 'i', 'i', '\x4', 
		'\x2', '\x8E', '\x8E', '\xA3', '\xA3', '\x5', '\x2', '\x8C', '\x8C', '\xA0', 
		'\xA0', '\xA2', '\xA2', '\x1C', '\x2', '$', '$', '\'', '\'', ')', '+', 
		'\x30', '\x35', '\x39', '<', '>', '>', '\x43', '\x43', '\x45', '\x46', 
		'H', 'L', 'N', 'O', 'Q', 'Q', 'S', 'S', 'U', 'U', 'W', 'X', '[', '[', 
		'_', '`', '\x62', 'g', 'i', 'n', 'p', 'p', 'r', 'v', 'y', '\x86', '\x89', 
		'\x93', '\x95', '\x9A', '\x9E', '\x9E', '\xA0', '\xA4', '\xA7', '\xA8', 
		'\x4', '\x2', '\x1C', '#', 'q', 'q', '\a', '\x2', ':', ':', 'S', 'S', 
		'k', 'l', '\x86', '\x86', '\xA8', '\xA8', '\x2', '\x57C', '\x2', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\xA2', '\x3', '\x2', '\x2', '\x2', '\b', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\xA8', '\x3', '\x2', '\x2', '\x2', '\f', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xC2', '\x3', '\x2', '\x2', '\x2', '\x12', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xCA', '\x3', '\x2', '\x2', '\x2', '\x16', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x109', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x139', '\x3', '\x2', '\x2', '\x2', ' ', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x16E', '\x3', '\x2', '\x2', '\x2', '&', '\x1AD', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x1AF', '\x3', '\x2', '\x2', '\x2', '*', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1D4', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x34', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x225', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x237', '\x3', '\x2', '\x2', '\x2', ':', '\x240', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x253', '\x3', '\x2', '\x2', '\x2', '>', '\x255', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x262', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x44', '\x278', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x280', '\x3', '\x2', '\x2', '\x2', 'H', '\x28D', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x28F', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x2A3', '\x3', '\x2', '\x2', '\x2', 'N', '\x2B8', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x2BC', '\x3', '\x2', '\x2', '\x2', 'R', '\x2D0', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x2D4', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x2DE', '\x3', '\x2', '\x2', '\x2', 'X', '\x2EA', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\\', '\x2F9', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x303', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x311', '\x3', '\x2', '\x2', '\x2', '\x62', '\x317', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x343', '\x3', '\x2', '\x2', '\x2', '\x66', '\x345', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x354', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x3A7', '\x3', '\x2', '\x2', '\x2', 'l', '\x3FA', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x40E', '\x3', '\x2', '\x2', '\x2', 'p', '\x419', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x427', '\x3', '\x2', '\x2', '\x2', 
		't', '\x46E', '\x3', '\x2', '\x2', '\x2', 'v', '\x470', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x482', '\x3', '\x2', '\x2', '\x2', 'z', '\x491', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x498', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x49F', '\x3', '\x2', '\x2', '\x2', '\x80', '\x4A6', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x4AD', '\x3', '\x2', '\x2', '\x2', '\x84', '\x4B1', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x4B3', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x4BA', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x4C5', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x4DB', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x4DD', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x4DF', '\x3', '\x2', '\x2', '\x2', '\x94', '\x4E3', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x4E5', '\x3', '\x2', '\x2', '\x2', '\x98', '\x4E7', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x4E9', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\x5', '\xE', '\b', '\x2', '\x9D', '\x9E', '\a', '\x2', 
		'\x2', '\x3', '\x9E', '\x3', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\x5', '\x14', '\v', '\x2', '\xA0', '\xA1', '\a', '\x2', '\x2', '\x3', 
		'\xA1', '\x5', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x5', '\x34', 
		'\x1B', '\x2', '\xA3', '\xA4', '\a', '\x2', '\x2', '\x3', '\xA4', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x5', 'j', '\x36', '\x2', 
		'\xA6', '\xA7', '\a', '\x2', '\x2', '\x3', '\xA7', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xA9', '\x5', 'l', '\x37', '\x2', '\xA9', '\xAA', 
		'\a', '\x2', '\x2', '\x3', '\xAA', '\v', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAE', '\x5', 'H', '%', '\x2', '\xAC', '\xAE', '\x5', 'j', '\x36', '\x2', 
		'\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', 
		'\a', '\x2', '\x2', '\x3', '\xB0', '\r', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\x5', '\x14', '\v', '\x2', '\xB2', '\xB9', '\x5', '\x10', '\t', 
		'\x2', '\xB3', '\xB4', '\a', '\x3', '\x2', '\x2', '\xB4', '\xB5', '\x5', 
		'\x16', '\f', '\x2', '\xB5', '\xB6', '\x5', '\x10', '\t', '\x2', '\xB6', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBE', '\x5', '\x12', '\n', '\x2', '\xBD', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC1', '\a', '\x3', '\x2', 
		'\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', 
		'\xB3', '\x2', '\x2', '\xC6', '\xC7', '\b', '\n', '\x1', '\x2', '\xC7', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x5', '\x16', '\f', 
		'\x2', '\xC9', '\xCB', '\x5', '.', '\x18', '\x2', '\xCA', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xDA', '\x5', '\x18', '\r', 
		'\x2', '\xCD', '\xDA', '\x5', '\x1A', '\xE', '\x2', '\xCE', '\xDA', '\x5', 
		'\x1C', '\xF', '\x2', '\xCF', '\xDA', '\x5', '\x1E', '\x10', '\x2', '\xD0', 
		'\xD1', '\x6', '\f', '\x2', '\x2', '\xD1', '\xDA', '\x5', ' ', '\x11', 
		'\x2', '\xD2', '\xD3', '\x6', '\f', '\x3', '\x2', '\xD3', '\xDA', '\x5', 
		'&', '\x14', '\x2', '\xD4', '\xD5', '\x6', '\f', '\x4', '\x2', '\xD5', 
		'\xDA', '\x5', '(', '\x15', '\x2', '\xD6', '\xDA', '\x5', '*', '\x16', 
		'\x2', '\xD7', '\xD8', '\x6', '\f', '\x5', '\x2', '\xD8', '\xDA', '\x5', 
		',', '\x17', '\x2', '\xD9', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xDD', '\x5', '\x30', '\x19', '\x2', '\xDC', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE0', '\x5', 
		'\x34', '\x1B', '\x2', '\xDF', '\xE1', '\x5', '\x66', '\x34', '\x2', '\xE0', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\x19', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\x5', 
		'\x30', '\x19', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xF5', '\a', '\x9D', '\x2', '\x2', '\xE6', '\xE7', '\x6', 
		'\xE', '\x6', '\x2', '\xE7', '\xE8', '\a', 'w', '\x2', '\x2', '\xE8', 
		'\xF6', '\a', '\x83', '\x2', '\x2', '\xE9', '\xEA', '\x6', '\xE', '\a', 
		'\x2', '\xEA', '\xEB', '\a', 'w', '\x2', '\x2', '\xEB', '\xF6', '\a', 
		'$', '\x2', '\x2', '\xEC', '\xED', '\x6', '\xE', '\b', '\x2', '\xED', 
		'\xEE', '\a', 'w', '\x2', '\x2', '\xEE', '\xF6', '\a', '\x80', '\x2', 
		'\x2', '\xEF', '\xF0', '\x6', '\xE', '\t', '\x2', '\xF0', '\xF1', '\a', 
		'w', '\x2', '\x2', '\xF1', '\xF6', '\a', 'I', '\x2', '\x2', '\xF2', '\xF3', 
		'\x6', '\xE', '\n', '\x2', '\xF3', '\xF4', '\a', 'w', '\x2', '\x2', '\xF4', 
		'\xF6', '\a', 'U', '\x2', '\x2', '\xF5', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x6', 
		'\xE', '\v', '\x2', '\xF8', '\xFC', '\x5', '\x88', '\x45', '\x2', '\xF9', 
		'\xFA', '\x6', '\xE', '\f', '\x2', '\xFA', '\xFC', '\x5', '\x86', '\x44', 
		'\x2', '\xFB', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\a', '\x88', '\x2', '\x2', '\xFE', '\x102', '\x5', '>', ' ', 
		'\x2', '\xFF', '\x100', '\x6', '\xE', '\r', '\x2', '\x100', '\x101', '\a', 
		'M', '\x2', '\x2', '\x101', '\x103', '\x5', '\x86', '\x44', '\x2', '\x102', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x106', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', 
		'\a', '\xA6', '\x2', '\x2', '\x105', '\x107', '\x5', 'j', '\x36', '\x2', 
		'\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x10A', '\x5', '\x30', '\x19', '\x2', '\x109', '\x108', '\x3', '\x2', 
		'\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10D', '\a', 'Y', '\x2', '\x2', 
		'\x10C', '\x10E', '\a', '\\', '\x2', '\x2', '\x10D', '\x10C', '\x3', '\x2', 
		'\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x6', '\xF', '\xE', '\x2', 
		'\x110', '\x112', '\a', '\x80', '\x2', '\x2', '\x111', '\x113', '\a', 
		'\\', '\x2', '\x2', '\x112', '\x111', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x115', '\x6', '\xF', '\xF', '\x2', '\x115', '\x116', 
		'\a', 'Y', '\x2', '\x2', '\x116', '\x117', '\a', 'w', '\x2', '\x2', '\x117', 
		'\x118', '\a', '\x80', '\x2', '\x2', '\x118', '\x12E', '\a', '\\', '\x2', 
		'\x2', '\x119', '\x11A', '\x6', '\xF', '\x10', '\x2', '\x11A', '\x11B', 
		'\a', 'Y', '\x2', '\x2', '\x11B', '\x11C', '\a', 'w', '\x2', '\x2', '\x11C', 
		'\x11D', '\a', '\x83', '\x2', '\x2', '\x11D', '\x12E', '\a', '\\', '\x2', 
		'\x2', '\x11E', '\x11F', '\x6', '\xF', '\x11', '\x2', '\x11F', '\x120', 
		'\a', 'Y', '\x2', '\x2', '\x120', '\x121', '\a', 'w', '\x2', '\x2', '\x121', 
		'\x122', '\a', '$', '\x2', '\x2', '\x122', '\x12E', '\a', '\\', '\x2', 
		'\x2', '\x123', '\x124', '\x6', '\xF', '\x12', '\x2', '\x124', '\x125', 
		'\a', 'Y', '\x2', '\x2', '\x125', '\x126', '\a', 'w', '\x2', '\x2', '\x126', 
		'\x127', '\a', 'I', '\x2', '\x2', '\x127', '\x12E', '\a', '\\', '\x2', 
		'\x2', '\x128', '\x129', '\x6', '\xF', '\x13', '\x2', '\x129', '\x12A', 
		'\a', 'Y', '\x2', '\x2', '\x12A', '\x12B', '\a', 'w', '\x2', '\x2', '\x12B', 
		'\x12C', '\a', 'U', '\x2', '\x2', '\x12C', '\x12E', '\a', '\\', '\x2', 
		'\x2', '\x12D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x119', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x123', '\x3', '\x2', '\x2', '\x2', '\x12D', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x12F', '\x131', '\x5', '\x80', '\x41', '\x2', '\x130', '\x132', 
		'\x5', '\x42', '\"', '\x2', '\x131', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x132', '\x3', '\x2', '\x2', '\x2', '\x132', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x134', '\a', '\x9F', '\x2', '\x2', '\x134', 
		'\x137', '\x5', '\x44', '#', '\x2', '\x135', '\x137', '\x5', '\x34', '\x1B', 
		'\x2', '\x136', '\x133', '\x3', '\x2', '\x2', '\x2', '\x136', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x13A', '\x5', '\x30', '\x19', '\x2', '\x139', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13D', '\a', '=', '\x2', 
		'\x2', '\x13C', '\x13E', '\a', 'M', '\x2', '\x2', '\x13D', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x6', '\x10', 
		'\x14', '\x2', '\x140', '\x144', '\x5', '\x88', '\x45', '\x2', '\x141', 
		'\x142', '\x6', '\x10', '\x15', '\x2', '\x142', '\x144', '\x5', '\x86', 
		'\x44', '\x2', '\x143', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x144', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x146', '\x6', '\x10', '\x16', '\x2', '\x146', '\x147', 
		'\a', 'M', '\x2', '\x2', '\x147', '\x149', '\x5', '\x86', '\x44', '\x2', 
		'\x148', '\x145', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x14B', '\a', '\xA6', '\x2', '\x2', '\x14B', '\x14D', '\x5', 'j', '\x36', 
		'\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x150', '\x5', '\x30', '\x19', '\x2', '\x14F', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\a', 'h', '\x2', 
		'\x2', '\x152', '\x153', '\a', '\\', '\x2', '\x2', '\x153', '\x154', '\x5', 
		'\x86', '\x44', '\x2', '\x154', '\x157', '\a', '\x9E', '\x2', '\x2', '\x155', 
		'\x158', '\x5', '\x86', '\x44', '\x2', '\x156', '\x158', '\x5', '\x38', 
		'\x1D', '\x2', '\x157', '\x155', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x156', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x15A', '\a', 'u', '\x2', '\x2', '\x15A', '\x15B', '\a', 
		'\x5', '\x2', '\x2', '\x15B', '\x15C', '\x5', 'j', '\x36', '\x2', '\x15C', 
		'\x165', '\a', '\x6', '\x2', '\x2', '\x15D', '\x15F', '\x5', '\"', '\x12', 
		'\x2', '\x15E', '\x160', '\x5', '$', '\x13', '\x2', '\x15F', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x166', '\x3', '\x2', '\x2', '\x2', '\x161', '\x163', '\x5', 
		'$', '\x13', '\x2', '\x162', '\x164', '\x5', '\"', '\x12', '\x2', '\x163', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x166', '\x3', '\x2', '\x2', '\x2', '\x165', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x166', '\x3', '\x2', '\x2', '\x2', '\x166', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x167', '\x168', '\a', '\xA5', '\x2', '\x2', '\x168', '\x169', 
		'\a', '\x65', '\x2', '\x2', '\x169', '\x16A', '\a', '\x94', '\x2', '\x2', 
		'\x16A', '\x16B', '\a', '\x9D', '\x2', '\x2', '\x16B', '\x16C', '\a', 
		'\x88', '\x2', '\x2', '\x16C', '\x16D', '\x5', '>', ' ', '\x2', '\x16D', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\a', '\xA5', '\x2', 
		'\x2', '\x16F', '\x170', '\a', 'o', '\x2', '\x2', '\x170', '\x171', '\a', 
		'\x65', '\x2', '\x2', '\x171', '\x172', '\a', '\x94', '\x2', '\x2', '\x172', 
		'\x174', '\a', 'Y', '\x2', '\x2', '\x173', '\x175', '\x5', '@', '!', '\x2', 
		'\x174', '\x173', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x177', '\a', '\x9F', '\x2', '\x2', '\x177', '\x178', '\x5', '\x46', 
		'$', '\x2', '\x178', '%', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17D', 
		'\x6', '\x14', '\x17', '\x2', '\x17A', '\x17C', '\x5', '\\', '/', '\x2', 
		'\x17B', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17F', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x17E', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x180', '\x182', 
		'\a', '\x3', '\x2', '\x2', '\x181', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x183', '\x3', '\x2', '\x2', '\x2', '\x183', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\a', '+', '\x2', 
		'\x2', '\x186', '\x187', '\a', '.', '\x2', '\x2', '\x187', '\x188', '\x5', 
		'|', '?', '\x2', '\x188', '\x18A', '\a', '\x5', '\x2', '\x2', '\x189', 
		'\x18B', '\x5', 'J', '&', '\x2', '\x18A', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x18E', '\a', '\x6', '\x2', '\x2', 
		'\x18D', '\x18F', '\a', '\x3', '\x2', '\x2', '\x18E', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'\x18E', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\x191', '\x192', '\x3', '\x2', '\x2', '\x2', '\x192', '\x194', 
		'\a', '\x42', '\x2', '\x2', '\x193', '\x195', '\a', '\x3', '\x2', '\x2', 
		'\x194', '\x193', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x194', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x197', '\x1AE', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x199', '\x6', '\x14', '\x18', '\x2', '\x199', '\x19A', 
		'\a', '.', '\x2', '\x2', '\x19A', '\x19B', '\x5', '|', '?', '\x2', '\x19B', 
		'\x19D', '\a', '\x5', '\x2', '\x2', '\x19C', '\x19E', '\x5', 'J', '&', 
		'\x2', '\x19D', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x19F', '\x1A0', '\a', '\x6', '\x2', '\x2', '\x1A0', '\x1AE', '\x3', 
		'\x2', '\x2', '\x2', '\x1A1', '\x1A5', '\x6', '\x14', '\x19', '\x2', '\x1A2', 
		'\x1A4', '\x5', '\\', '/', '\x2', '\x1A3', '\x1A2', '\x3', '\x2', '\x2', 
		'\x2', '\x1A4', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A6', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A5', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\t', '\x2', '\x2', '\x2', '\x1A9', 
		'\x1AB', '\x5', '|', '?', '\x2', '\x1AA', '\x1AC', '\x5', '^', '\x30', 
		'\x2', '\x1AB', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x179', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\a', '\x9B', '\x2', 
		'\x2', '\x1B0', '\x1B1', '\a', '\x92', '\x2', '\x2', '\x1B1', '\x1B2', 
		'\x5', '\x80', '\x41', '\x2', '\x1B2', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B4', '\a', 'T', '\x2', '\x2', '\x1B4', '\x1B5', '\x5', 'j', 
		'\x36', '\x2', '\x1B5', '\x1B6', '\a', '\x94', '\x2', '\x2', '\x1B6', 
		'\x1BE', '\x5', '\xE', '\b', '\x2', '\x1B7', '\x1B8', '\a', '\x41', '\x2', 
		'\x2', '\x1B8', '\x1B9', '\x5', 'j', '\x36', '\x2', '\x1B9', '\x1BA', 
		'\a', '\x94', '\x2', '\x2', '\x1BA', '\x1BB', '\x5', '\xE', '\b', '\x2', 
		'\x1BB', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\x1BD', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\a', '@', '\x2', '\x2', 
		'\x1C2', '\x1C4', '\x5', '\xE', '\b', '\x2', '\x1C3', '\x1C1', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\a', '\x42', '\x2', 
		'\x2', '\x1C6', '\x1C7', '\a', 'T', '\x2', '\x2', '\x1C7', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\a', '|', '\x2', '\x2', '\x1C9', 
		'\x1CA', '\a', '\x93', '\x2', '\x2', '\x1CA', '\x1CE', '\a', '\x5', '\x2', 
		'\x2', '\x1CB', '\x1CF', '\a', '\xA9', '\x2', '\x2', '\x1CC', '\x1CF', 
		'\a', '\xAA', '\x2', '\x2', '\x1CD', '\x1CF', '\x5', '\x80', '\x41', '\x2', 
		'\x1CE', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CC', '\x3', 
		'\x2', '\x2', '\x2', '\x1CE', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CF', 
		'\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\a', '\x6', '\x2', 
		'\x2', '\x1D1', '-', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\x3', 
		'\x2', '\x2', '\x2', '\x1D3', '/', '\x3', '\x2', '\x2', '\x2', '\x1D4', 
		'\x1D6', '\a', '\xA7', '\x2', '\x2', '\x1D5', '\x1D7', '\a', '~', '\x2', 
		'\x2', '\x1D6', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', 
		'\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\x3', '\x2', '\x2', '\x2', 
		'\x1D8', '\x1DD', '\x5', '\x32', '\x1A', '\x2', '\x1D9', '\x1DA', '\a', 
		'\a', '\x2', '\x2', '\x1DA', '\x1DC', '\x5', '\x32', '\x1A', '\x2', '\x1DB', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DF', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E2', '\x5', 
		'\x80', '\x41', '\x2', '\x1E1', '\x1E3', '\x5', '\x42', '\"', '\x2', '\x1E2', 
		'\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E5', 
		'\a', '(', '\x2', '\x2', '\x1E5', '\x1E6', '\a', '\x5', '\x2', '\x2', 
		'\x1E6', '\x1E7', '\x5', '\x34', '\x1B', '\x2', '\x1E7', '\x1E8', '\a', 
		'\x6', '\x2', '\x2', '\x1E8', '\x33', '\x3', '\x2', '\x2', '\x2', '\x1E9', 
		'\x1EB', '\x5', '\x36', '\x1C', '\x2', '\x1EA', '\x1EC', '\x5', 'T', '+', 
		'\x2', '\x1EB', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1EE', '\x3', '\x2', '\x2', '\x2', 
		'\x1ED', '\x1EF', '\x5', '\x64', '\x33', '\x2', '\x1EE', '\x1ED', '\x3', 
		'\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EF', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\b', '\x1C', '\x1', 
		'\x2', '\x1F1', '\x1F3', '\a', '\x87', '\x2', '\x2', '\x1F2', '\x1F4', 
		'\t', '\x3', '\x2', '\x2', '\x1F3', '\x1F2', '\x3', '\x2', '\x2', '\x2', 
		'\x1F3', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1FE', '\x3', 
		'\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\x6', '\x1C', '\x1A', '\x2', '\x1F6', 
		'\x1FC', '\a', '\x99', '\x2', '\x2', '\x1F7', '\x1FD', '\a', '\x1C', '\x2', 
		'\x2', '\x1F8', '\x1F9', '\x6', '\x1C', '\x1B', '\x2', '\x1F9', '\x1FA', 
		'\a', '\x5', '\x2', '\x2', '\x1FA', '\x1FB', '\a', '\x1C', '\x2', '\x2', 
		'\x1FB', '\x1FD', '\a', '\x6', '\x2', '\x2', '\x1FC', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\x1FC', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1F5', '\x3', '\x2', '\x2', 
		'\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x202', 
		'\x3', '\x2', '\x2', '\x2', '\x200', '\x203', '\a', '\t', '\x2', '\x2', 
		'\x201', '\x203', '\x5', ':', '\x1E', '\x2', '\x202', '\x200', '\x3', 
		'\x2', '\x2', '\x2', '\x202', '\x201', '\x3', '\x2', '\x2', '\x2', '\x203', 
		'\x206', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\a', 'M', '\x2', 
		'\x2', '\x205', '\x207', '\x5', 'L', '\'', '\x2', '\x206', '\x204', '\x3', 
		'\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x20A', '\x3', '\x2', '\x2', '\x2', '\x208', '\x209', '\a', '\xA6', '\x2', 
		'\x2', '\x209', '\x20B', '\x5', 'j', '\x36', '\x2', '\x20A', '\x208', 
		'\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', '\x3', '\x2', '\x2', '\x2', 
		'\x20B', '\x211', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20F', '\x5', 
		'R', '*', '\x2', '\x20D', '\x20E', '\a', 'R', '\x2', '\x2', '\x20E', '\x210', 
		'\x5', 'j', '\x36', '\x2', '\x20F', '\x20D', '\x3', '\x2', '\x2', '\x2', 
		'\x20F', '\x210', '\x3', '\x2', '\x2', '\x2', '\x210', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x211', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x211', 
		'\x212', '\x3', '\x2', '\x2', '\x2', '\x212', '\x226', '\x3', '\x2', '\x2', 
		'\x2', '\x213', '\x214', '\a', '\x5', '\x2', '\x2', '\x214', '\x215', 
		'\x5', '\x36', '\x1C', '\x2', '\x215', '\x216', '\a', '\x6', '\x2', '\x2', 
		'\x216', '\x226', '\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\a', 
		'\x9F', '\x2', '\x2', '\x218', '\x219', '\a', '\x5', '\x2', '\x2', '\x219', 
		'\x21A', '\x5', 'J', '&', '\x2', '\x21A', '\x222', '\a', '\x6', '\x2', 
		'\x2', '\x21B', '\x21C', '\a', '\a', '\x2', '\x2', '\x21C', '\x21D', '\a', 
		'\x5', '\x2', '\x2', '\x21D', '\x21E', '\x5', 'J', '&', '\x2', '\x21E', 
		'\x21F', '\a', '\x6', '\x2', '\x2', '\x21F', '\x221', '\x3', '\x2', '\x2', 
		'\x2', '\x220', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x221', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x222', '\x220', '\x3', '\x2', '\x2', '\x2', 
		'\x222', '\x223', '\x3', '\x2', '\x2', '\x2', '\x223', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x224', '\x222', '\x3', '\x2', '\x2', '\x2', '\x225', 
		'\x1F0', '\x3', '\x2', '\x2', '\x2', '\x225', '\x213', '\x3', '\x2', '\x2', 
		'\x2', '\x225', '\x217', '\x3', '\x2', '\x2', '\x2', '\x226', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x227', '\x22F', '\f', '\x5', '\x2', '\x2', 
		'\x228', '\x22A', '\a', '\x9C', '\x2', '\x2', '\x229', '\x22B', '\a', 
		'%', '\x2', '\x2', '\x22A', '\x229', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x230', '\x3', '\x2', '\x2', 
		'\x2', '\x22C', '\x230', '\a', 'Z', '\x2', '\x2', '\x22D', '\x230', '\a', 
		'\x44', '\x2', '\x2', '\x22E', '\x230', '\a', 'j', '\x2', '\x2', '\x22F', 
		'\x228', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x22C', '\x3', '\x2', '\x2', 
		'\x2', '\x22F', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x22E', 
		'\x3', '\x2', '\x2', '\x2', '\x230', '\x231', '\x3', '\x2', '\x2', '\x2', 
		'\x231', '\x233', '\x5', '\x36', '\x1C', '\x6', '\x232', '\x227', '\x3', 
		'\x2', '\x2', '\x2', '\x233', '\x236', '\x3', '\x2', '\x2', '\x2', '\x234', 
		'\x232', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x37', '\x3', '\x2', '\x2', '\x2', '\x236', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\a', '\x5', '\x2', '\x2', 
		'\x238', '\x239', '\x5', '\x34', '\x1B', '\x2', '\x239', '\x23E', '\a', 
		'\x6', '\x2', '\x2', '\x23A', '\x23C', '\a', '(', '\x2', '\x2', '\x23B', 
		'\x23A', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23C', '\x3', '\x2', '\x2', 
		'\x2', '\x23C', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23F', 
		'\x5', '\x90', 'I', '\x2', '\x23E', '\x23B', '\x3', '\x2', '\x2', '\x2', 
		'\x23E', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x240', '\x245', '\x5', '<', '\x1F', '\x2', '\x241', 
		'\x242', '\a', '\a', '\x2', '\x2', '\x242', '\x244', '\x5', '<', '\x1F', 
		'\x2', '\x243', '\x241', '\x3', '\x2', '\x2', '\x2', '\x244', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x245', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x245', '\x246', '\x3', '\x2', '\x2', '\x2', '\x246', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x247', '\x245', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', 
		'\x5', '\x80', '\x41', '\x2', '\x249', '\x24A', '\a', '\x4', '\x2', '\x2', 
		'\x24A', '\x24B', '\a', '\t', '\x2', '\x2', '\x24B', '\x254', '\x3', '\x2', 
		'\x2', '\x2', '\x24C', '\x251', '\x5', 'l', '\x37', '\x2', '\x24D', '\x24F', 
		'\a', '(', '\x2', '\x2', '\x24E', '\x24D', '\x3', '\x2', '\x2', '\x2', 
		'\x24E', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\x3', 
		'\x2', '\x2', '\x2', '\x250', '\x252', '\x5', '\x92', 'J', '\x2', '\x251', 
		'\x24E', '\x3', '\x2', '\x2', '\x2', '\x251', '\x252', '\x3', '\x2', '\x2', 
		'\x2', '\x252', '\x254', '\x3', '\x2', '\x2', '\x2', '\x253', '\x248', 
		'\x3', '\x2', '\x2', '\x2', '\x253', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '=', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', '\x5', '\x82', 
		'\x42', '\x2', '\x256', '\x257', '\a', '\b', '\x2', '\x2', '\x257', '\x25F', 
		'\x5', 'H', '%', '\x2', '\x258', '\x259', '\a', '\a', '\x2', '\x2', '\x259', 
		'\x25A', '\x5', '\x82', '\x42', '\x2', '\x25A', '\x25B', '\a', '\b', '\x2', 
		'\x2', '\x25B', '\x25C', '\x5', 'H', '%', '\x2', '\x25C', '\x25E', '\x3', 
		'\x2', '\x2', '\x2', '\x25D', '\x258', '\x3', '\x2', '\x2', '\x2', '\x25E', 
		'\x261', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x25D', '\x3', '\x2', '\x2', 
		'\x2', '\x25F', '\x260', '\x3', '\x2', '\x2', '\x2', '\x260', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x261', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x262', 
		'\x263', '\a', '\x5', '\x2', '\x2', '\x263', '\x268', '\x5', '\x82', '\x42', 
		'\x2', '\x264', '\x265', '\a', '\a', '\x2', '\x2', '\x265', '\x267', '\x5', 
		'\x82', '\x42', '\x2', '\x266', '\x264', '\x3', '\x2', '\x2', '\x2', '\x267', 
		'\x26A', '\x3', '\x2', '\x2', '\x2', '\x268', '\x266', '\x3', '\x2', '\x2', 
		'\x2', '\x268', '\x269', '\x3', '\x2', '\x2', '\x2', '\x269', '\x26B', 
		'\x3', '\x2', '\x2', '\x2', '\x26A', '\x268', '\x3', '\x2', '\x2', '\x2', 
		'\x26B', '\x26C', '\a', '\x6', '\x2', '\x2', '\x26C', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x26D', '\x26E', '\a', '\x5', '\x2', '\x2', '\x26E', '\x273', 
		'\x5', '\x84', '\x43', '\x2', '\x26F', '\x270', '\a', '\a', '\x2', '\x2', 
		'\x270', '\x272', '\x5', '\x84', '\x43', '\x2', '\x271', '\x26F', '\x3', 
		'\x2', '\x2', '\x2', '\x272', '\x275', '\x3', '\x2', '\x2', '\x2', '\x273', 
		'\x271', '\x3', '\x2', '\x2', '\x2', '\x273', '\x274', '\x3', '\x2', '\x2', 
		'\x2', '\x274', '\x276', '\x3', '\x2', '\x2', '\x2', '\x275', '\x273', 
		'\x3', '\x2', '\x2', '\x2', '\x276', '\x277', '\a', '\x6', '\x2', '\x2', 
		'\x277', '\x43', '\x3', '\x2', '\x2', '\x2', '\x278', '\x27D', '\x5', 
		'\x46', '$', '\x2', '\x279', '\x27A', '\a', '\a', '\x2', '\x2', '\x27A', 
		'\x27C', '\x5', '\x46', '$', '\x2', '\x27B', '\x279', '\x3', '\x2', '\x2', 
		'\x2', '\x27C', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27B', 
		'\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', '\x3', '\x2', '\x2', '\x2', 
		'\x27E', '\x45', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x27D', '\x3', 
		'\x2', '\x2', '\x2', '\x280', '\x281', '\a', '\x5', '\x2', '\x2', '\x281', 
		'\x286', '\x5', 'H', '%', '\x2', '\x282', '\x283', '\a', '\a', '\x2', 
		'\x2', '\x283', '\x285', '\x5', 'H', '%', '\x2', '\x284', '\x282', '\x3', 
		'\x2', '\x2', '\x2', '\x285', '\x288', '\x3', '\x2', '\x2', '\x2', '\x286', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x286', '\x287', '\x3', '\x2', '\x2', 
		'\x2', '\x287', '\x289', '\x3', '\x2', '\x2', '\x2', '\x288', '\x286', 
		'\x3', '\x2', '\x2', '\x2', '\x289', '\x28A', '\a', '\x6', '\x2', '\x2', 
		'\x28A', 'G', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28E', '\a', '<', 
		'\x2', '\x2', '\x28C', '\x28E', '\x5', 'l', '\x37', '\x2', '\x28D', '\x28B', 
		'\x3', '\x2', '\x2', '\x2', '\x28D', '\x28C', '\x3', '\x2', '\x2', '\x2', 
		'\x28E', 'I', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x294', '\x5', 'l', 
		'\x37', '\x2', '\x290', '\x291', '\a', '\a', '\x2', '\x2', '\x291', '\x293', 
		'\x5', 'l', '\x37', '\x2', '\x292', '\x290', '\x3', '\x2', '\x2', '\x2', 
		'\x293', '\x296', '\x3', '\x2', '\x2', '\x2', '\x294', '\x292', '\x3', 
		'\x2', '\x2', '\x2', '\x294', '\x295', '\x3', '\x2', '\x2', '\x2', '\x295', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x296', '\x294', '\x3', '\x2', '\x2', 
		'\x2', '\x297', '\x298', '\b', '\'', '\x1', '\x2', '\x298', '\x2A4', '\x5', 
		'\x8A', '\x46', '\x2', '\x299', '\x2A4', '\x5', '\x38', '\x1D', '\x2', 
		'\x29A', '\x29B', '\a', '\x5', '\x2', '\x2', '\x29B', '\x29C', '\x5', 
		'L', '\'', '\x2', '\x29C', '\x2A1', '\a', '\x6', '\x2', '\x2', '\x29D', 
		'\x29F', '\a', '(', '\x2', '\x2', '\x29E', '\x29D', '\x3', '\x2', '\x2', 
		'\x2', '\x29E', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', 
		'\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A2', '\x5', '\x90', 'I', '\x2', 
		'\x2A1', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A2', '\x3', 
		'\x2', '\x2', '\x2', '\x2A2', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A3', 
		'\x297', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x299', '\x3', '\x2', '\x2', 
		'\x2', '\x2A3', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2B0', 
		'\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A6', '\f', '\x3', '\x2', '\x2', 
		'\x2A6', '\x2A7', '\a', '\a', '\x2', '\x2', '\x2A7', '\x2AF', '\x5', 'L', 
		'\'', '\x4', '\x2A8', '\x2A9', '\f', '\x5', '\x2', '\x2', '\x2A9', '\x2AA', 
		'\x5', 'P', ')', '\x2', '\x2AA', '\x2AC', '\x5', 'L', '\'', '\x2', '\x2AB', 
		'\x2AD', '\x5', 'N', '(', '\x2', '\x2AC', '\x2AB', '\x3', '\x2', '\x2', 
		'\x2', '\x2AC', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AF', 
		'\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2A5', '\x3', '\x2', '\x2', '\x2', 
		'\x2AE', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B2', '\x3', 
		'\x2', '\x2', '\x2', '\x2B0', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2B0', 
		'\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B1', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x2B2', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', 
		'\a', 'u', '\x2', '\x2', '\x2B4', '\x2B9', '\x5', 'j', '\x36', '\x2', 
		'\x2B5', '\x2B6', '\x6', '(', '\x1F', '\x2', '\x2B6', '\x2B7', '\a', '\x9E', 
		'\x2', '\x2', '\x2B7', '\x2B9', '\x5', '\x42', '\"', '\x2', '\x2B8', '\x2B3', 
		'\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2B5', '\x3', '\x2', '\x2', '\x2', 
		'\x2B9', 'O', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BB', '\x6', ')', 
		' ', '\x2', '\x2BB', '\x2BD', '\a', 'm', '\x2', '\x2', '\x2BC', '\x2BA', 
		'\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\x3', '\x2', '\x2', '\x2', 
		'\x2BD', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2C0', '\a', 
		'`', '\x2', '\x2', '\x2BF', '\x2C1', '\a', 'y', '\x2', '\x2', '\x2C0', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', '\x2', '\x2', 
		'\x2', '\x2C1', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C4', 
		'\a', '\x82', '\x2', '\x2', '\x2C3', '\x2C5', '\a', 'y', '\x2', '\x2', 
		'\x2C4', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C5', '\x3', 
		'\x2', '\x2', '\x2', '\x2C5', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\x2C8', '\a', 'N', '\x2', '\x2', '\x2C7', '\x2C9', '\a', 'y', '\x2', 
		'\x2', '\x2C8', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', 
		'\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CD', '\x3', '\x2', '\x2', '\x2', 
		'\x2CA', '\x2CD', '\a', 'X', '\x2', '\x2', '\x2CB', '\x2CD', '\a', '\x35', 
		'\x2', '\x2', '\x2CC', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2C2', 
		'\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2C6', '\x3', '\x2', '\x2', '\x2', 
		'\x2CC', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2CB', '\x3', 
		'\x2', '\x2', '\x2', '\x2CC', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CD', 
		'\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2CF', '\a', '^', '\x2', 
		'\x2', '\x2CF', 'Q', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D1', '\a', 
		'P', '\x2', '\x2', '\x2D1', '\x2D2', '\a', '-', '\x2', '\x2', '\x2D2', 
		'\x2D3', '\x5', 'J', '&', '\x2', '\x2D3', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x2D4', '\x2D5', '\a', 'x', '\x2', '\x2', '\x2D5', '\x2D6', '\a', '-', 
		'\x2', '\x2', '\x2D6', '\x2DB', '\x5', 'V', ',', '\x2', '\x2D7', '\x2D8', 
		'\a', '\a', '\x2', '\x2', '\x2D8', '\x2DA', '\x5', 'V', ',', '\x2', '\x2D9', 
		'\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DD', '\x3', '\x2', '\x2', 
		'\x2', '\x2DB', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DC', 
		'\x3', '\x2', '\x2', '\x2', '\x2DC', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x2DD', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2E1', '\x5', 
		'l', '\x37', '\x2', '\x2DF', '\x2E0', '\a', '\x31', '\x2', '\x2', '\x2E0', 
		'\x2E2', '\x5', '\x8E', 'H', '\x2', '\x2E1', '\x2DF', '\x3', '\x2', '\x2', 
		'\x2', '\x2E1', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E4', 
		'\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E5', '\t', '\x4', '\x2', '\x2', 
		'\x2E4', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E5', '\x3', 
		'\x2', '\x2', '\x2', '\x2E5', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2E6', 
		'\x2E7', '\a', 'r', '\x2', '\x2', '\x2E7', '\x2E9', '\t', '\x5', '\x2', 
		'\x2', '\x2E8', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2E9', 
		'\x3', '\x2', '\x2', '\x2', '\x2E9', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x2EA', '\x2EB', '\a', '}', '\x2', '\x2', '\x2EB', '\x2EC', '\a', '-', 
		'\x2', '\x2', '\x2EC', '\x2F1', '\x5', 'Z', '.', '\x2', '\x2ED', '\x2EE', 
		'\a', '\a', '\x2', '\x2', '\x2EE', '\x2F0', '\x5', 'Z', '.', '\x2', '\x2EF', 
		'\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2F3', '\x3', '\x2', '\x2', 
		'\x2', '\x2F1', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2F1', '\x2F2', 
		'\x3', '\x2', '\x2', '\x2', '\x2F2', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x2F3', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F7', '\x5', 
		'l', '\x37', '\x2', '\x2F5', '\x2F6', '\a', '\x31', '\x2', '\x2', '\x2F6', 
		'\x2F8', '\x5', '\x8E', 'H', '\x2', '\x2F7', '\x2F5', '\x3', '\x2', '\x2', 
		'\x2', '\x2F7', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2F8', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x2F9', '\x2FD', '\a', ';', '\x2', '\x2', '\x2FA', 
		'\x2FB', '\x6', '/', '!', '\x2', '\x2FB', '\x2FE', '\a', '\xA9', '\x2', 
		'\x2', '\x2FC', '\x2FE', '\x5', '\x84', '\x43', '\x2', '\x2FD', '\x2FA', 
		'\x3', '\x2', '\x2', '\x2', '\x2FD', '\x2FC', '\x3', '\x2', '\x2', '\x2', 
		'\x2FE', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x300', '\x5', 
		'\x8C', 'G', '\x2', '\x300', ']', '\x3', '\x2', '\x2', '\x2', '\x301', 
		'\x304', '\x5', '`', '\x31', '\x2', '\x302', '\x304', '\x5', '\x62', '\x32', 
		'\x2', '\x303', '\x301', '\x3', '\x2', '\x2', '\x2', '\x303', '\x302', 
		'\x3', '\x2', '\x2', '\x2', '\x304', '\x30C', '\x3', '\x2', '\x2', '\x2', 
		'\x305', '\x308', '\a', '\a', '\x2', '\x2', '\x306', '\x309', '\x5', '`', 
		'\x31', '\x2', '\x307', '\x309', '\x5', '\x62', '\x32', '\x2', '\x308', 
		'\x306', '\x3', '\x2', '\x2', '\x2', '\x308', '\x307', '\x3', '\x2', '\x2', 
		'\x2', '\x309', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x305', 
		'\x3', '\x2', '\x2', '\x2', '\x30B', '\x30E', '\x3', '\x2', '\x2', '\x2', 
		'\x30C', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x30D', '\x3', 
		'\x2', '\x2', '\x2', '\x30D', '_', '\x3', '\x2', '\x2', '\x2', '\x30E', 
		'\x30C', '\x3', '\x2', '\x2', '\x2', '\x30F', '\x310', '\a', '\xA9', '\x2', 
		'\x2', '\x310', '\x312', '\a', '\b', '\x2', '\x2', '\x311', '\x30F', '\x3', 
		'\x2', '\x2', '\x2', '\x311', '\x312', '\x3', '\x2', '\x2', '\x2', '\x312', 
		'\x313', '\x3', '\x2', '\x2', '\x2', '\x313', '\x314', '\x5', '\x98', 
		'M', '\x2', '\x314', '\x61', '\x3', '\x2', '\x2', '\x2', '\x315', '\x316', 
		'\a', '\xA9', '\x2', '\x2', '\x316', '\x318', '\a', '\b', '\x2', '\x2', 
		'\x317', '\x315', '\x3', '\x2', '\x2', '\x2', '\x317', '\x318', '\x3', 
		'\x2', '\x2', '\x2', '\x318', '\x319', '\x3', '\x2', '\x2', '\x2', '\x319', 
		'\x31A', '\a', '\xA9', '\x2', '\x2', '\x31A', '\x31B', '\a', 'z', '\x2', 
		'\x2', '\x31B', '\x63', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31D', 
		'\x6', '\x33', '\"', '\x2', '\x31D', '\x31E', '\a', '\x62', '\x2', '\x2', 
		'\x31E', '\x321', '\x5', 'l', '\x37', '\x2', '\x31F', '\x320', '\t', '\x6', 
		'\x2', '\x2', '\x320', '\x322', '\x5', 'l', '\x37', '\x2', '\x321', '\x31F', 
		'\x3', '\x2', '\x2', '\x2', '\x321', '\x322', '\x3', '\x2', '\x2', '\x2', 
		'\x322', '\x344', '\x3', '\x2', '\x2', '\x2', '\x323', '\x324', '\x6', 
		'\x33', '#', '\x2', '\x324', '\x325', '\a', 't', '\x2', '\x2', '\x325', 
		'\x326', '\a', '\x1C', '\x2', '\x2', '\x326', '\x334', '\t', '\a', '\x2', 
		'\x2', '\x327', '\x328', '\a', 'J', '\x2', '\x2', '\x328', '\x329', '\t', 
		'\b', '\x2', '\x2', '\x329', '\x32B', '\a', '\x1C', '\x2', '\x2', '\x32A', 
		'\x32C', '\a', '\x81', '\x2', '\x2', '\x32B', '\x32A', '\x3', '\x2', '\x2', 
		'\x2', '\x32B', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x32C', '\x32D', 
		'\x3', '\x2', '\x2', '\x2', '\x32D', '\x332', '\t', '\a', '\x2', '\x2', 
		'\x32E', '\x333', '\a', 'v', '\x2', '\x2', '\x32F', '\x330', '\x6', '\x33', 
		'$', '\x2', '\x330', '\x331', '\a', '\xA7', '\x2', '\x2', '\x331', '\x333', 
		'\a', '\x95', '\x2', '\x2', '\x332', '\x32E', '\x3', '\x2', '\x2', '\x2', 
		'\x332', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x333', '\x335', '\x3', 
		'\x2', '\x2', '\x2', '\x334', '\x327', '\x3', '\x2', '\x2', '\x2', '\x334', 
		'\x335', '\x3', '\x2', '\x2', '\x2', '\x335', '\x344', '\x3', '\x2', '\x2', 
		'\x2', '\x336', '\x337', '\x6', '\x33', '%', '\x2', '\x337', '\x338', 
		'\a', 'J', '\x2', '\x2', '\x338', '\x339', '\t', '\b', '\x2', '\x2', '\x339', 
		'\x33B', '\a', '\x1C', '\x2', '\x2', '\x33A', '\x33C', '\a', '\x81', '\x2', 
		'\x2', '\x33B', '\x33A', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33C', 
		'\x3', '\x2', '\x2', '\x2', '\x33C', '\x33D', '\x3', '\x2', '\x2', '\x2', 
		'\x33D', '\x341', '\t', '\a', '\x2', '\x2', '\x33E', '\x342', '\a', 'v', 
		'\x2', '\x2', '\x33F', '\x340', '\a', '\xA7', '\x2', '\x2', '\x340', '\x342', 
		'\a', '\x95', '\x2', '\x2', '\x341', '\x33E', '\x3', '\x2', '\x2', '\x2', 
		'\x341', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x342', '\x344', '\x3', 
		'\x2', '\x2', '\x2', '\x343', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x343', 
		'\x323', '\x3', '\x2', '\x2', '\x2', '\x343', '\x336', '\x3', '\x2', '\x2', 
		'\x2', '\x344', '\x65', '\x3', '\x2', '\x2', '\x2', '\x345', '\x346', 
		'\x6', '\x34', '&', '\x2', '\x346', '\x347', '\a', 'L', '\x2', '\x2', 
		'\x347', '\x349', '\a', '\x9D', '\x2', '\x2', '\x348', '\x34A', '\x5', 
		'h', '\x35', '\x2', '\x349', '\x348', '\x3', '\x2', '\x2', '\x2', '\x349', 
		'\x34A', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x352', '\x3', '\x2', '\x2', 
		'\x2', '\x34B', '\x353', '\a', 'p', '\x2', '\x2', '\x34C', '\x34E', '\a', 
		'\xA4', '\x2', '\x2', '\x34D', '\x34F', '\a', '\x1C', '\x2', '\x2', '\x34E', 
		'\x34D', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x34F', '\x3', '\x2', '\x2', 
		'\x2', '\x34F', '\x353', '\x3', '\x2', '\x2', '\x2', '\x350', '\x351', 
		'\a', '\x89', '\x2', '\x2', '\x351', '\x353', '\a', '\x63', '\x2', '\x2', 
		'\x352', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x352', '\x34C', '\x3', 
		'\x2', '\x2', '\x2', '\x352', '\x350', '\x3', '\x2', '\x2', '\x2', '\x352', 
		'\x353', '\x3', '\x2', '\x2', '\x2', '\x353', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x354', '\x355', '\a', 's', '\x2', '\x2', '\x355', '\x35A', '\x5', 
		'\x82', '\x42', '\x2', '\x356', '\x357', '\a', '\a', '\x2', '\x2', '\x357', 
		'\x359', '\x5', '\x82', '\x42', '\x2', '\x358', '\x356', '\x3', '\x2', 
		'\x2', '\x2', '\x359', '\x35C', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x358', 
		'\x3', '\x2', '\x2', '\x2', '\x35A', '\x35B', '\x3', '\x2', '\x2', '\x2', 
		'\x35B', 'i', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x35A', '\x3', '\x2', 
		'\x2', '\x2', '\x35D', '\x35E', '\b', '\x36', '\x1', '\x2', '\x35E', '\x3A8', 
		'\a', '\xA9', '\x2', '\x2', '\x35F', '\x3A8', '\a', '\xAA', '\x2', '\x2', 
		'\x360', '\x361', '\x5', 'l', '\x37', '\x2', '\x361', '\x362', '\t', '\t', 
		'\x2', '\x2', '\x362', '\x363', '\x5', 'l', '\x37', '\x2', '\x363', '\x3A8', 
		'\x3', '\x2', '\x2', '\x2', '\x364', '\x365', '\x5', 'l', '\x37', '\x2', 
		'\x365', '\x366', '\t', '\n', '\x2', '\x2', '\x366', '\x367', '\x5', 'l', 
		'\x37', '\x2', '\x367', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x368', 
		'\x36A', '\x5', 'l', '\x37', '\x2', '\x369', '\x36B', '\a', 'o', '\x2', 
		'\x2', '\x36A', '\x369', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x36B', 
		'\x3', '\x2', '\x2', '\x2', '\x36B', '\x36C', '\x3', '\x2', '\x2', '\x2', 
		'\x36C', '\x36D', '\t', '\v', '\x2', '\x2', '\x36D', '\x370', '\x5', 'l', 
		'\x37', '\x2', '\x36E', '\x36F', '\a', '\x43', '\x2', '\x2', '\x36F', 
		'\x371', '\x5', 'l', '\x37', '\x2', '\x370', '\x36E', '\x3', '\x2', '\x2', 
		'\x2', '\x370', '\x371', '\x3', '\x2', '\x2', '\x2', '\x371', '\x3A8', 
		'\x3', '\x2', '\x2', '\x2', '\x372', '\x373', '\x5', 'l', '\x37', '\x2', 
		'\x373', '\x375', '\a', ']', '\x2', '\x2', '\x374', '\x376', '\a', 'o', 
		'\x2', '\x2', '\x375', '\x374', '\x3', '\x2', '\x2', '\x2', '\x375', '\x376', 
		'\x3', '\x2', '\x2', '\x2', '\x376', '\x377', '\x3', '\x2', '\x2', '\x2', 
		'\x377', '\x378', '\a', 'q', '\x2', '\x2', '\x378', '\x3A8', '\x3', '\x2', 
		'\x2', '\x2', '\x379', '\x37A', '\x5', 'l', '\x37', '\x2', '\x37A', '\x37C', 
		'\a', ']', '\x2', '\x2', '\x37B', '\x37D', '\a', 'o', '\x2', '\x2', '\x37C', 
		'\x37B', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x37D', '\x3', '\x2', '\x2', 
		'\x2', '\x37D', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x37F', 
		'\x5', 'l', '\x37', '\x2', '\x37F', '\x3A8', '\x3', '\x2', '\x2', '\x2', 
		'\x380', '\x382', '\x5', 'l', '\x37', '\x2', '\x381', '\x383', '\a', 'o', 
		'\x2', '\x2', '\x382', '\x381', '\x3', '\x2', '\x2', '\x2', '\x382', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\x383', '\x384', '\x3', '\x2', '\x2', '\x2', 
		'\x384', '\x385', '\a', ',', '\x2', '\x2', '\x385', '\x386', '\x5', 'l', 
		'\x37', '\x2', '\x386', '\x387', '\a', '&', '\x2', '\x2', '\x387', '\x388', 
		'\x5', 'l', '\x37', '\x2', '\x388', '\x3A8', '\x3', '\x2', '\x2', '\x2', 
		'\x389', '\x38B', '\x5', 'l', '\x37', '\x2', '\x38A', '\x38C', '\a', 'o', 
		'\x2', '\x2', '\x38B', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x38C', 
		'\x3', '\x2', '\x2', '\x2', '\x38C', '\x38D', '\x3', '\x2', '\x2', '\x2', 
		'\x38D', '\x38E', '\a', 'V', '\x2', '\x2', '\x38E', '\x391', '\a', '\x5', 
		'\x2', '\x2', '\x38F', '\x392', '\x5', 'J', '&', '\x2', '\x390', '\x392', 
		'\x5', '\x34', '\x1B', '\x2', '\x391', '\x38F', '\x3', '\x2', '\x2', '\x2', 
		'\x391', '\x390', '\x3', '\x2', '\x2', '\x2', '\x391', '\x392', '\x3', 
		'\x2', '\x2', '\x2', '\x392', '\x393', '\x3', '\x2', '\x2', '\x2', '\x393', 
		'\x394', '\a', '\x6', '\x2', '\x2', '\x394', '\x3A8', '\x3', '\x2', '\x2', 
		'\x2', '\x395', '\x396', '\x5', 'l', '\x37', '\x2', '\x396', '\x397', 
		'\t', '\f', '\x2', '\x2', '\x397', '\x398', '\t', '\r', '\x2', '\x2', 
		'\x398', '\x399', '\a', '\x5', '\x2', '\x2', '\x399', '\x39A', '\x5', 
		'\x34', '\x1B', '\x2', '\x39A', '\x39B', '\a', '\x6', '\x2', '\x2', '\x39B', 
		'\x3A8', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39D', '\a', 'G', '\x2', 
		'\x2', '\x39D', '\x39E', '\a', '\x5', '\x2', '\x2', '\x39E', '\x39F', 
		'\x5', '\x34', '\x1B', '\x2', '\x39F', '\x3A0', '\a', '\x6', '\x2', '\x2', 
		'\x3A0', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A2', '\a', 
		'o', '\x2', '\x2', '\x3A2', '\x3A8', '\x5', 'j', '\x36', '\x6', '\x3A3', 
		'\x3A4', '\a', '\x5', '\x2', '\x2', '\x3A4', '\x3A5', '\x5', 'j', '\x36', 
		'\x2', '\x3A5', '\x3A6', '\a', '\x6', '\x2', '\x2', '\x3A6', '\x3A8', 
		'\x3', '\x2', '\x2', '\x2', '\x3A7', '\x35D', '\x3', '\x2', '\x2', '\x2', 
		'\x3A7', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x360', '\x3', 
		'\x2', '\x2', '\x2', '\x3A7', '\x364', '\x3', '\x2', '\x2', '\x2', '\x3A7', 
		'\x368', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x372', '\x3', '\x2', '\x2', 
		'\x2', '\x3A7', '\x379', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x380', 
		'\x3', '\x2', '\x2', '\x2', '\x3A7', '\x389', '\x3', '\x2', '\x2', '\x2', 
		'\x3A7', '\x395', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x39C', '\x3', 
		'\x2', '\x2', '\x2', '\x3A7', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3A7', 
		'\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3B4', '\x3', '\x2', '\x2', 
		'\x2', '\x3A9', '\x3AA', '\f', '\x5', '\x2', '\x2', '\x3AA', '\x3AB', 
		'\a', '&', '\x2', '\x2', '\x3AB', '\x3B3', '\x5', 'j', '\x36', '\x6', 
		'\x3AC', '\x3AD', '\f', '\x4', '\x2', '\x2', '\x3AD', '\x3AE', '\a', 'w', 
		'\x2', '\x2', '\x3AE', '\x3B3', '\x5', 'j', '\x36', '\x5', '\x3AF', '\x3B0', 
		'\f', '\a', '\x2', '\x2', '\x3B0', '\x3B1', '\a', '\x31', '\x2', '\x2', 
		'\x3B1', '\x3B3', '\x5', '\x8E', 'H', '\x2', '\x3B2', '\x3A9', '\x3', 
		'\x2', '\x2', '\x2', '\x3B2', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3B2', 
		'\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B6', '\x3', '\x2', '\x2', 
		'\x2', '\x3B4', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', 
		'\x3', '\x2', '\x2', '\x2', '\x3B5', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x3B6', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B7', '\x3B8', '\b', 
		'\x37', '\x1', '\x2', '\x3B8', '\x3B9', '\t', '\xE', '\x2', '\x2', '\x3B9', 
		'\x3FB', '\t', '\xF', '\x2', '\x2', '\x3BA', '\x3FB', '\x5', '\x98', 'M', 
		'\x2', '\x3BB', '\x3FB', '\a', '\xA9', '\x2', '\x2', '\x3BC', '\x3FB', 
		'\a', '\xAA', '\x2', '\x2', '\x3BD', '\x3C0', '\x5', '\x82', '\x42', '\x2', 
		'\x3BE', '\x3BF', '\x6', '\x37', '*', '\x2', '\x3BF', '\x3C1', '\a', '\x1B', 
		'\x2', '\x2', '\x3C0', '\x3BE', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3C1', 
		'\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3FB', '\x3', '\x2', '\x2', '\x2', 
		'\x3C2', '\x3C3', '\a', '\x5', '\x2', '\x2', '\x3C3', '\x3C4', '\x5', 
		'\x34', '\x1B', '\x2', '\x3C4', '\x3C5', '\a', '\x6', '\x2', '\x2', '\x3C5', 
		'\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C7', '\a', '\f', '\x2', 
		'\x2', '\x3C7', '\x3FB', '\x5', 'l', '\x37', '\x11', '\x3C8', '\x3FB', 
		'\x5', 'n', '\x38', '\x2', '\x3C9', '\x3FB', '\x5', 'p', '\x39', '\x2', 
		'\x3CA', '\x3FB', '\x5', 'r', ':', '\x2', '\x3CB', '\x3FB', '\x5', 't', 
		';', '\x2', '\x3CC', '\x3FB', '\x5', 'v', '<', '\x2', '\x3CD', '\x3FB', 
		'\x5', 'x', '=', '\x2', '\x3CE', '\x3CF', '\a', '\x5', '\x2', '\x2', '\x3CF', 
		'\x3D0', '\x5', 'l', '\x37', '\x2', '\x3D0', '\x3D1', '\a', '\x6', '\x2', 
		'\x2', '\x3D1', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D3', 
		'\a', '\x30', '\x2', '\x2', '\x3D3', '\x3D4', '\a', '\x5', '\x2', '\x2', 
		'\x3D4', '\x3D5', '\x5', 'l', '\x37', '\x2', '\x3D5', '\x3D6', '\a', '(', 
		'\x2', '\x2', '\x3D6', '\x3D7', '\x5', '\x8C', 'G', '\x2', '\x3D7', '\x3D8', 
		'\a', '\x6', '\x2', '\x2', '\x3D8', '\x3FB', '\x3', '\x2', '\x2', '\x2', 
		'\x3D9', '\x3DA', '\a', '/', '\x2', '\x2', '\x3DA', '\x3E0', '\x5', 'l', 
		'\x37', '\x2', '\x3DB', '\x3DC', '\a', '\xA5', '\x2', '\x2', '\x3DC', 
		'\x3DD', '\x5', 'l', '\x37', '\x2', '\x3DD', '\x3DE', '\a', '\x94', '\x2', 
		'\x2', '\x3DE', '\x3DF', '\x5', 'l', '\x37', '\x2', '\x3DF', '\x3E1', 
		'\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3DB', '\x3', '\x2', '\x2', '\x2', 
		'\x3E1', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E2', '\x3E0', '\x3', 
		'\x2', '\x2', '\x2', '\x3E2', '\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3E3', 
		'\x3E6', '\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3E5', '\a', '@', '\x2', 
		'\x2', '\x3E5', '\x3E7', '\x5', 'l', '\x37', '\x2', '\x3E6', '\x3E4', 
		'\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3E7', '\x3', '\x2', '\x2', '\x2', 
		'\x3E7', '\x3E8', '\x3', '\x2', '\x2', '\x2', '\x3E8', '\x3E9', '\a', 
		'\x42', '\x2', '\x2', '\x3E9', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3EA', 
		'\x3F0', '\a', '/', '\x2', '\x2', '\x3EB', '\x3EC', '\a', '\xA5', '\x2', 
		'\x2', '\x3EC', '\x3ED', '\x5', 'j', '\x36', '\x2', '\x3ED', '\x3EE', 
		'\a', '\x94', '\x2', '\x2', '\x3EE', '\x3EF', '\x5', 'l', '\x37', '\x2', 
		'\x3EF', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3EB', '\x3', 
		'\x2', '\x2', '\x2', '\x3F1', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3F2', 
		'\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3F2', '\x3F3', '\x3', '\x2', '\x2', 
		'\x2', '\x3F3', '\x3F6', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3F5', 
		'\a', '@', '\x2', '\x2', '\x3F5', '\x3F7', '\x5', 'l', '\x37', '\x2', 
		'\x3F6', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F7', '\x3', 
		'\x2', '\x2', '\x2', '\x3F7', '\x3F8', '\x3', '\x2', '\x2', '\x2', '\x3F8', 
		'\x3F9', '\a', '\x42', '\x2', '\x2', '\x3F9', '\x3FB', '\x3', '\x2', '\x2', 
		'\x2', '\x3FA', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3BA', 
		'\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3BB', '\x3', '\x2', '\x2', '\x2', 
		'\x3FA', '\x3BC', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3BD', '\x3', 
		'\x2', '\x2', '\x2', '\x3FA', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3FA', 
		'\x3C6', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3C8', '\x3', '\x2', '\x2', 
		'\x2', '\x3FA', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3CA', 
		'\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3CB', '\x3', '\x2', '\x2', '\x2', 
		'\x3FA', '\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3CD', '\x3', 
		'\x2', '\x2', '\x2', '\x3FA', '\x3CE', '\x3', '\x2', '\x2', '\x2', '\x3FA', 
		'\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3D9', '\x3', '\x2', '\x2', 
		'\x2', '\x3FA', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\x3FB', '\x40B', 
		'\x3', '\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\f', '\x10', '\x2', '\x2', 
		'\x3FD', '\x3FE', '\x6', '\x37', ',', '\x2', '\x3FE', '\x3FF', '\a', '\r', 
		'\x2', '\x2', '\x3FF', '\x40A', '\x5', 'l', '\x37', '\x11', '\x400', '\x401', 
		'\f', '\xF', '\x2', '\x2', '\x401', '\x402', '\t', '\x10', '\x2', '\x2', 
		'\x402', '\x40A', '\x5', 'l', '\x37', '\x10', '\x403', '\x404', '\f', 
		'\xE', '\x2', '\x2', '\x404', '\x405', '\t', '\xE', '\x2', '\x2', '\x405', 
		'\x40A', '\x5', 'l', '\x37', '\xF', '\x406', '\x407', '\f', '\r', '\x2', 
		'\x2', '\x407', '\x408', '\t', '\x11', '\x2', '\x2', '\x408', '\x40A', 
		'\x5', 'l', '\x37', '\xE', '\x409', '\x3FC', '\x3', '\x2', '\x2', '\x2', 
		'\x409', '\x400', '\x3', '\x2', '\x2', '\x2', '\x409', '\x403', '\x3', 
		'\x2', '\x2', '\x2', '\x409', '\x406', '\x3', '\x2', '\x2', '\x2', '\x40A', 
		'\x40D', '\x3', '\x2', '\x2', '\x2', '\x40B', '\x409', '\x3', '\x2', '\x2', 
		'\x2', '\x40B', '\x40C', '\x3', '\x2', '\x2', '\x2', '\x40C', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x40D', '\x40B', '\x3', '\x2', '\x2', '\x2', '\x40E', 
		'\x40F', '\t', '\x12', '\x2', '\x2', '\x40F', '\x410', '\a', '\x5', '\x2', 
		'\x2', '\x410', '\x411', '\x5', 'l', '\x37', '\x2', '\x411', '\x412', 
		'\t', '\x13', '\x2', '\x2', '\x412', '\x415', '\x5', 'l', '\x37', '\x2', 
		'\x413', '\x414', '\t', '\x14', '\x2', '\x2', '\x414', '\x416', '\x5', 
		'l', '\x37', '\x2', '\x415', '\x413', '\x3', '\x2', '\x2', '\x2', '\x415', 
		'\x416', '\x3', '\x2', '\x2', '\x2', '\x416', '\x417', '\x3', '\x2', '\x2', 
		'\x2', '\x417', '\x418', '\a', '\x6', '\x2', '\x2', '\x418', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x419', '\x41A', '\a', 'H', '\x2', '\x2', '\x41A', 
		'\x41B', '\a', '\x5', '\x2', '\x2', '\x41B', '\x41C', '\x5', '\x9A', 'N', 
		'\x2', '\x41C', '\x41D', '\t', '\x13', '\x2', '\x2', '\x41D', '\x41E', 
		'\x5', 'l', '\x37', '\x2', '\x41E', '\x41F', '\a', '\x6', '\x2', '\x2', 
		'\x41F', 'q', '\x3', '\x2', '\x2', '\x2', '\x420', '\x428', '\a', '\x33', 
		'\x2', '\x2', '\x421', '\x428', '\a', '\x8B', '\x2', '\x2', '\x422', '\x428', 
		'\a', '*', '\x2', '\x2', '\x423', '\x424', '\x6', ':', '\x30', '\x2', 
		'\x424', '\x428', '\a', '\x9A', '\x2', '\x2', '\x425', '\x426', '\x6', 
		':', '\x31', '\x2', '\x426', '\x428', '\a', '\x34', '\x2', '\x2', '\x427', 
		'\x420', '\x3', '\x2', '\x2', '\x2', '\x427', '\x421', '\x3', '\x2', '\x2', 
		'\x2', '\x427', '\x422', '\x3', '\x2', '\x2', '\x2', '\x427', '\x423', 
		'\x3', '\x2', '\x2', '\x2', '\x427', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x428', '\x429', '\x3', '\x2', '\x2', '\x2', '\x429', '\x42B', '\a', 
		'\x5', '\x2', '\x2', '\x42A', '\x42C', '\t', '\x3', '\x2', '\x2', '\x42B', 
		'\x42A', '\x3', '\x2', '\x2', '\x2', '\x42B', '\x42C', '\x3', '\x2', '\x2', 
		'\x2', '\x42C', '\x42F', '\x3', '\x2', '\x2', '\x2', '\x42D', '\x430', 
		'\x5', 'l', '\x37', '\x2', '\x42E', '\x430', '\a', '\t', '\x2', '\x2', 
		'\x42F', '\x42D', '\x3', '\x2', '\x2', '\x2', '\x42F', '\x42E', '\x3', 
		'\x2', '\x2', '\x2', '\x430', '\x431', '\x3', '\x2', '\x2', '\x2', '\x431', 
		'\x432', '\a', '\x6', '\x2', '\x2', '\x432', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x433', '\x434', '\t', '\x15', '\x2', '\x2', '\x434', '\x435', 
		'\a', '\x5', '\x2', '\x2', '\x435', '\x436', '\x5', 'l', '\x37', '\x2', 
		'\x436', '\x437', '\a', '\x6', '\x2', '\x2', '\x437', '\x46F', '\x3', 
		'\x2', '\x2', '\x2', '\x438', '\x439', '\x6', ';', '\x32', '\x2', '\x439', 
		'\x43A', '\a', '\x32', '\x2', '\x2', '\x43A', '\x43B', '\a', '\x5', '\x2', 
		'\x2', '\x43B', '\x43C', '\x5', 'l', '\x37', '\x2', '\x43C', '\x43D', 
		'\a', '\a', '\x2', '\x2', '\x43D', '\x43E', '\x5', 'l', '\x37', '\x2', 
		'\x43E', '\x43F', '\a', '\x6', '\x2', '\x2', '\x43F', '\x46F', '\x3', 
		'\x2', '\x2', '\x2', '\x440', '\x441', '\x6', ';', '\x33', '\x2', '\x441', 
		'\x442', '\a', 'Q', '\x2', '\x2', '\x442', '\x443', '\a', '\x5', '\x2', 
		'\x2', '\x443', '\x446', '\x5', 'l', '\x37', '\x2', '\x444', '\x445', 
		'\a', '\a', '\x2', '\x2', '\x445', '\x447', '\x5', 'l', '\x37', '\x2', 
		'\x446', '\x444', '\x3', '\x2', '\x2', '\x2', '\x446', '\x447', '\x3', 
		'\x2', '\x2', '\x2', '\x447', '\x448', '\x3', '\x2', '\x2', '\x2', '\x448', 
		'\x449', '\a', '\x6', '\x2', '\x2', '\x449', '\x46F', '\x3', '\x2', '\x2', 
		'\x2', '\x44A', '\x44B', '\x6', ';', '\x34', '\x2', '\x44B', '\x44C', 
		'\t', '\x16', '\x2', '\x2', '\x44C', '\x44D', '\a', '\x5', '\x2', '\x2', 
		'\x44D', '\x44E', '\x5', 'l', '\x37', '\x2', '\x44E', '\x44F', '\a', '\x6', 
		'\x2', '\x2', '\x44F', '\x46F', '\x3', '\x2', '\x2', '\x2', '\x450', '\x451', 
		'\x6', ';', '\x35', '\x2', '\x451', '\x452', '\t', '\x17', '\x2', '\x2', 
		'\x452', '\x453', '\a', '\x5', '\x2', '\x2', '\x453', '\x454', '\x5', 
		'l', '\x37', '\x2', '\x454', '\x455', '\a', '\x6', '\x2', '\x2', '\x455', 
		'\x46F', '\x3', '\x2', '\x2', '\x2', '\x456', '\x457', '\x6', ';', '\x36', 
		'\x2', '\x457', '\x458', '\a', '\x8F', '\x2', '\x2', '\x458', '\x459', 
		'\a', '\x5', '\x2', '\x2', '\x459', '\x45A', '\x5', 'l', '\x37', '\x2', 
		'\x45A', '\x45B', '\a', '\x6', '\x2', '\x2', '\x45B', '\x46F', '\x3', 
		'\x2', '\x2', '\x2', '\x45C', '\x45D', '\x6', ';', '\x37', '\x2', '\x45D', 
		'\x45E', '\a', '\xA1', '\x2', '\x2', '\x45E', '\x45F', '\a', '\x5', '\x2', 
		'\x2', '\x45F', '\x460', '\x5', 'l', '\x37', '\x2', '\x460', '\x461', 
		'\a', '\x6', '\x2', '\x2', '\x461', '\x46F', '\x3', '\x2', '\x2', '\x2', 
		'\x462', '\x463', '\x6', ';', '\x38', '\x2', '\x463', '\x464', '\a', '\x8D', 
		'\x2', '\x2', '\x464', '\x465', '\a', '\x5', '\x2', '\x2', '\x465', '\x466', 
		'\x5', 'l', '\x37', '\x2', '\x466', '\x467', '\a', '\x6', '\x2', '\x2', 
		'\x467', '\x46F', '\x3', '\x2', '\x2', '\x2', '\x468', '\x469', '\x6', 
		';', '\x39', '\x2', '\x469', '\x46A', '\a', 'g', '\x2', '\x2', '\x46A', 
		'\x46B', '\a', '\x5', '\x2', '\x2', '\x46B', '\x46C', '\x5', 'l', '\x37', 
		'\x2', '\x46C', '\x46D', '\a', '\x6', '\x2', '\x2', '\x46D', '\x46F', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x433', '\x3', '\x2', '\x2', '\x2', 
		'\x46E', '\x438', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x440', '\x3', 
		'\x2', '\x2', '\x2', '\x46E', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x46E', 
		'\x450', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x456', '\x3', '\x2', '\x2', 
		'\x2', '\x46E', '\x45C', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x462', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x468', '\x3', '\x2', '\x2', '\x2', 
		'\x46F', 'u', '\x3', '\x2', '\x2', '\x2', '\x470', '\x471', '\x5', '|', 
		'?', '\x2', '\x471', '\x473', '\a', '\x5', '\x2', '\x2', '\x472', '\x474', 
		'\t', '\x3', '\x2', '\x2', '\x473', '\x472', '\x3', '\x2', '\x2', '\x2', 
		'\x473', '\x474', '\x3', '\x2', '\x2', '\x2', '\x474', '\x477', '\x3', 
		'\x2', '\x2', '\x2', '\x475', '\x478', '\x5', 'J', '&', '\x2', '\x476', 
		'\x478', '\a', '\t', '\x2', '\x2', '\x477', '\x475', '\x3', '\x2', '\x2', 
		'\x2', '\x477', '\x476', '\x3', '\x2', '\x2', '\x2', '\x477', '\x478', 
		'\x3', '\x2', '\x2', '\x2', '\x478', '\x479', '\x3', '\x2', '\x2', '\x2', 
		'\x479', '\x47A', '\a', '\x6', '\x2', '\x2', '\x47A', '\x47B', '\a', '{', 
		'\x2', '\x2', '\x47B', '\x47D', '\a', '\x5', '\x2', '\x2', '\x47C', '\x47E', 
		'\x5', 'X', '-', '\x2', '\x47D', '\x47C', '\x3', '\x2', '\x2', '\x2', 
		'\x47D', '\x47E', '\x3', '\x2', '\x2', '\x2', '\x47E', '\x47F', '\x3', 
		'\x2', '\x2', '\x2', '\x47F', '\x480', '\x5', 'T', '+', '\x2', '\x480', 
		'\x481', '\a', '\x6', '\x2', '\x2', '\x481', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x482', '\x483', '\x5', '|', '?', '\x2', '\x483', '\x485', '\a', 
		'\x5', '\x2', '\x2', '\x484', '\x486', '\x5', 'J', '&', '\x2', '\x485', 
		'\x484', '\x3', '\x2', '\x2', '\x2', '\x485', '\x486', '\x3', '\x2', '\x2', 
		'\x2', '\x486', '\x487', '\x3', '\x2', '\x2', '\x2', '\x487', '\x488', 
		'\a', '\x6', '\x2', '\x2', '\x488', 'y', '\x3', '\x2', '\x2', '\x2', '\x489', 
		'\x48A', '\x5', '\x94', 'K', '\x2', '\x48A', '\x48B', '\a', '\x4', '\x2', 
		'\x2', '\x48B', '\x48D', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x489', 
		'\x3', '\x2', '\x2', '\x2', '\x48C', '\x48D', '\x3', '\x2', '\x2', '\x2', 
		'\x48D', '\x48E', '\x3', '\x2', '\x2', '\x2', '\x48E', '\x48F', '\x5', 
		'\x94', 'K', '\x2', '\x48F', '\x490', '\a', '\x4', '\x2', '\x2', '\x490', 
		'\x492', '\x3', '\x2', '\x2', '\x2', '\x491', '\x48C', '\x3', '\x2', '\x2', 
		'\x2', '\x491', '\x492', '\x3', '\x2', '\x2', '\x2', '\x492', '\x493', 
		'\x3', '\x2', '\x2', '\x2', '\x493', '\x494', '\x5', '\x94', 'K', '\x2', 
		'\x494', '{', '\x3', '\x2', '\x2', '\x2', '\x495', '\x496', '\x5', 'z', 
		'>', '\x2', '\x496', '\x497', '\a', '\x4', '\x2', '\x2', '\x497', '\x499', 
		'\x3', '\x2', '\x2', '\x2', '\x498', '\x495', '\x3', '\x2', '\x2', '\x2', 
		'\x498', '\x499', '\x3', '\x2', '\x2', '\x2', '\x499', '\x49A', '\x3', 
		'\x2', '\x2', '\x2', '\x49A', '\x49B', '\x5', '\x94', 'K', '\x2', '\x49B', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x49D', '\x5', 'z', '>', '\x2', 
		'\x49D', '\x49E', '\a', '\x4', '\x2', '\x2', '\x49E', '\x4A0', '\x3', 
		'\x2', '\x2', '\x2', '\x49F', '\x49C', '\x3', '\x2', '\x2', '\x2', '\x49F', 
		'\x4A0', '\x3', '\x2', '\x2', '\x2', '\x4A0', '\x4A1', '\x3', '\x2', '\x2', 
		'\x2', '\x4A1', '\x4A2', '\x5', '\x94', 'K', '\x2', '\x4A2', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x4A3', '\x4A4', '\x5', 'z', '>', '\x2', '\x4A4', 
		'\x4A5', '\a', '\x4', '\x2', '\x2', '\x4A5', '\x4A7', '\x3', '\x2', '\x2', 
		'\x2', '\x4A6', '\x4A3', '\x3', '\x2', '\x2', '\x2', '\x4A6', '\x4A7', 
		'\x3', '\x2', '\x2', '\x2', '\x4A7', '\x4A8', '\x3', '\x2', '\x2', '\x2', 
		'\x4A8', '\x4A9', '\x5', '\x94', 'K', '\x2', '\x4A9', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x4AA', '\x4AB', '\x5', '\x80', '\x41', '\x2', '\x4AB', 
		'\x4AC', '\a', '\x4', '\x2', '\x2', '\x4AC', '\x4AE', '\x3', '\x2', '\x2', 
		'\x2', '\x4AD', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4AD', '\x4AE', 
		'\x3', '\x2', '\x2', '\x2', '\x4AE', '\x4AF', '\x3', '\x2', '\x2', '\x2', 
		'\x4AF', '\x4B0', '\x5', '\x94', 'K', '\x2', '\x4B0', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x4B1', '\x4B2', '\x5', '\x94', 'K', '\x2', '\x4B2', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x4B3', '\x4B8', '\x5', '\x80', '\x41', '\x2', 
		'\x4B4', '\x4B6', '\a', '(', '\x2', '\x2', '\x4B5', '\x4B4', '\x3', '\x2', 
		'\x2', '\x2', '\x4B5', '\x4B6', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x4B7', 
		'\x3', '\x2', '\x2', '\x2', '\x4B7', '\x4B9', '\x5', '\x90', 'I', '\x2', 
		'\x4B8', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4B9', '\x3', 
		'\x2', '\x2', '\x2', '\x4B9', '\x87', '\x3', '\x2', '\x2', '\x2', '\x4BA', 
		'\x4C3', '\x5', '\x80', '\x41', '\x2', '\x4BB', '\x4C1', '\x6', '\x45', 
		':', '\x2', '\x4BC', '\x4BD', '\a', 'W', '\x2', '\x2', '\x4BD', '\x4BE', 
		'\a', '-', '\x2', '\x2', '\x4BE', '\x4C2', '\x5', '~', '@', '\x2', '\x4BF', 
		'\x4C0', '\a', 'o', '\x2', '\x2', '\x4C0', '\x4C2', '\a', 'W', '\x2', 
		'\x2', '\x4C1', '\x4BC', '\x3', '\x2', '\x2', '\x2', '\x4C1', '\x4BF', 
		'\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C4', '\x3', '\x2', '\x2', '\x2', 
		'\x4C3', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4C3', '\x4C4', '\x3', 
		'\x2', '\x2', '\x2', '\x4C4', '\x89', '\x3', '\x2', '\x2', '\x2', '\x4C5', 
		'\x4CE', '\x5', '\x86', '\x44', '\x2', '\x4C6', '\x4CC', '\x6', '\x46', 
		';', '\x2', '\x4C7', '\x4C8', '\a', 'W', '\x2', '\x2', '\x4C8', '\x4C9', 
		'\a', '-', '\x2', '\x2', '\x4C9', '\x4CD', '\x5', '~', '@', '\x2', '\x4CA', 
		'\x4CB', '\a', 'o', '\x2', '\x2', '\x4CB', '\x4CD', '\a', 'W', '\x2', 
		'\x2', '\x4CC', '\x4C7', '\x3', '\x2', '\x2', '\x2', '\x4CC', '\x4CA', 
		'\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4CF', '\x3', '\x2', '\x2', '\x2', 
		'\x4CE', '\x4C6', '\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4CF', '\x3', 
		'\x2', '\x2', '\x2', '\x4CF', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x4D0', 
		'\x4D9', '\x5', '\x94', 'K', '\x2', '\x4D1', '\x4D2', '\a', '\x5', '\x2', 
		'\x2', '\x4D2', '\x4D3', '\a', '\x1C', '\x2', '\x2', '\x4D3', '\x4DA', 
		'\a', '\x6', '\x2', '\x2', '\x4D4', '\x4D5', '\a', '\x5', '\x2', '\x2', 
		'\x4D5', '\x4D6', '\a', '\x1C', '\x2', '\x2', '\x4D6', '\x4D7', '\a', 
		'\a', '\x2', '\x2', '\x4D7', '\x4D8', '\a', '\x1C', '\x2', '\x2', '\x4D8', 
		'\x4DA', '\a', '\x6', '\x2', '\x2', '\x4D9', '\x4D1', '\x3', '\x2', '\x2', 
		'\x2', '\x4D9', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4D9', '\x4DA', 
		'\x3', '\x2', '\x2', '\x2', '\x4DA', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x4DB', '\x4DC', '\x5', '\x94', 'K', '\x2', '\x4DC', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x4DD', '\x4DE', '\a', '\xAB', '\x2', '\x2', '\x4DE', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x4DF', '\x4E0', '\a', '\xAB', '\x2', '\x2', 
		'\x4E0', '\x93', '\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4E4', '\a', '\xAB', 
		'\x2', '\x2', '\x4E2', '\x4E4', '\x5', '\x96', 'L', '\x2', '\x4E3', '\x4E1', 
		'\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4E2', '\x3', '\x2', '\x2', '\x2', 
		'\x4E4', '\x95', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\x4E6', '\t', '\x18', 
		'\x2', '\x2', '\x4E6', '\x97', '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E8', 
		'\t', '\x19', '\x2', '\x2', '\x4E8', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x4E9', '\x4EA', '\t', '\x1A', '\x2', '\x2', '\x4EA', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\xAD', '\xB9', '\xBD', '\xC2', '\xCA', '\xD9', 
		'\xDC', '\xE0', '\xE3', '\xF5', '\xFB', '\x102', '\x106', '\x109', '\x10D', 
		'\x112', '\x12D', '\x131', '\x136', '\x139', '\x13D', '\x143', '\x148', 
		'\x14C', '\x14F', '\x157', '\x15F', '\x163', '\x165', '\x174', '\x17D', 
		'\x183', '\x18A', '\x190', '\x196', '\x19D', '\x1A5', '\x1AB', '\x1AD', 
		'\x1BE', '\x1C3', '\x1CE', '\x1D6', '\x1DD', '\x1E2', '\x1EB', '\x1EE', 
		'\x1F3', '\x1FC', '\x1FE', '\x202', '\x206', '\x20A', '\x20F', '\x211', 
		'\x222', '\x225', '\x22A', '\x22F', '\x234', '\x23B', '\x23E', '\x245', 
		'\x24E', '\x251', '\x253', '\x25F', '\x268', '\x273', '\x27D', '\x286', 
		'\x28D', '\x294', '\x29E', '\x2A1', '\x2A3', '\x2AC', '\x2AE', '\x2B0', 
		'\x2B8', '\x2BC', '\x2C0', '\x2C4', '\x2C8', '\x2CC', '\x2DB', '\x2E1', 
		'\x2E4', '\x2E8', '\x2F1', '\x2F7', '\x2FD', '\x303', '\x308', '\x30C', 
		'\x311', '\x317', '\x321', '\x32B', '\x332', '\x334', '\x33B', '\x341', 
		'\x343', '\x349', '\x34E', '\x352', '\x35A', '\x36A', '\x370', '\x375', 
		'\x37C', '\x382', '\x38B', '\x391', '\x3A7', '\x3B2', '\x3B4', '\x3C0', 
		'\x3E2', '\x3E6', '\x3F2', '\x3F6', '\x3FA', '\x409', '\x40B', '\x415', 
		'\x427', '\x42B', '\x42F', '\x446', '\x46E', '\x473', '\x477', '\x47D', 
		'\x485', '\x48C', '\x491', '\x498', '\x49F', '\x4A6', '\x4AD', '\x4B5', 
		'\x4B8', '\x4C1', '\x4C3', '\x4CC', '\x4CE', '\x4D9', '\x4E3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
