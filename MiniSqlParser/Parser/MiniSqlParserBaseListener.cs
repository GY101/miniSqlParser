//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:\gy101\miniSqlParser\MiniSqlParser\Parser\MiniSqlParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiniSqlParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MiniSqlParserBaseListener : IMiniSqlParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.stmts_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmts_root([NotNull] MiniSqlParserParser.Stmts_rootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.stmts_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmts_root([NotNull] MiniSqlParserParser.Stmts_rootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.stmt_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmt_root([NotNull] MiniSqlParserParser.Stmt_rootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.stmt_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmt_root([NotNull] MiniSqlParserParser.Stmt_rootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.query_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuery_root([NotNull] MiniSqlParserParser.Query_rootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.query_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuery_root([NotNull] MiniSqlParserParser.Query_rootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.predicate_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPredicate_root([NotNull] MiniSqlParserParser.Predicate_rootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.predicate_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPredicate_root([NotNull] MiniSqlParserParser.Predicate_rootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.expr_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr_root([NotNull] MiniSqlParserParser.Expr_rootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.expr_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr_root([NotNull] MiniSqlParserParser.Expr_rootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.placeholder_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPlaceholder_root([NotNull] MiniSqlParserParser.Placeholder_rootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.placeholder_root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPlaceholder_root([NotNull] MiniSqlParserParser.Placeholder_rootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.stmts"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmts([NotNull] MiniSqlParserParser.StmtsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.stmts"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmts([NotNull] MiniSqlParserParser.StmtsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.scols"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScols([NotNull] MiniSqlParserParser.ScolsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.scols"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScols([NotNull] MiniSqlParserParser.ScolsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.error"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterError([NotNull] MiniSqlParserParser.ErrorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.error"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitError([NotNull] MiniSqlParserParser.ErrorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmt([NotNull] MiniSqlParserParser.StmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmt([NotNull] MiniSqlParserParser.StmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.stmt_sub"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmt_sub([NotNull] MiniSqlParserParser.Stmt_subContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.stmt_sub"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmt_sub([NotNull] MiniSqlParserParser.Stmt_subContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.select_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSelect_stmt([NotNull] MiniSqlParserParser.Select_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.select_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSelect_stmt([NotNull] MiniSqlParserParser.Select_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.update_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUpdate_stmt([NotNull] MiniSqlParserParser.Update_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.update_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUpdate_stmt([NotNull] MiniSqlParserParser.Update_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.insert_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInsert_stmt([NotNull] MiniSqlParserParser.Insert_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.insert_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInsert_stmt([NotNull] MiniSqlParserParser.Insert_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.replace_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReplace_stmt([NotNull] MiniSqlParserParser.Replace_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.replace_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReplace_stmt([NotNull] MiniSqlParserParser.Replace_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.delete_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDelete_stmt([NotNull] MiniSqlParserParser.Delete_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.delete_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDelete_stmt([NotNull] MiniSqlParserParser.Delete_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.merge_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMerge_stmt([NotNull] MiniSqlParserParser.Merge_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.merge_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMerge_stmt([NotNull] MiniSqlParserParser.Merge_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.merge_update_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMerge_update_clause([NotNull] MiniSqlParserParser.Merge_update_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.merge_update_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMerge_update_clause([NotNull] MiniSqlParserParser.Merge_update_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.merge_insert_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMerge_insert_clause([NotNull] MiniSqlParserParser.Merge_insert_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.merge_insert_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMerge_insert_clause([NotNull] MiniSqlParserParser.Merge_insert_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.call_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall_stmt([NotNull] MiniSqlParserParser.Call_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.call_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall_stmt([NotNull] MiniSqlParserParser.Call_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.truncate_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTruncate_stmt([NotNull] MiniSqlParserParser.Truncate_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.truncate_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTruncate_stmt([NotNull] MiniSqlParserParser.Truncate_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.if_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf_stmt([NotNull] MiniSqlParserParser.If_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.if_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf_stmt([NotNull] MiniSqlParserParser.If_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.sqlite_pragma_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSqlite_pragma_stmt([NotNull] MiniSqlParserParser.Sqlite_pragma_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.sqlite_pragma_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSqlite_pragma_stmt([NotNull] MiniSqlParserParser.Sqlite_pragma_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.null_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNull_stmt([NotNull] MiniSqlParserParser.Null_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.null_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNull_stmt([NotNull] MiniSqlParserParser.Null_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.with_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWith_clause([NotNull] MiniSqlParserParser.With_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.with_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWith_clause([NotNull] MiniSqlParserParser.With_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.with_definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWith_definition([NotNull] MiniSqlParserParser.With_definitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.with_definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWith_definition([NotNull] MiniSqlParserParser.With_definitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuery([NotNull] MiniSqlParserParser.QueryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuery([NotNull] MiniSqlParserParser.QueryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ValueQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValueQueryClause([NotNull] MiniSqlParserParser.ValueQueryClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ValueQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValueQueryClause([NotNull] MiniSqlParserParser.ValueQueryClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CompoundQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompoundQueryClause([NotNull] MiniSqlParserParser.CompoundQueryClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CompoundQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompoundQueryClause([NotNull] MiniSqlParserParser.CompoundQueryClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BracketedQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBracketedQueryClause([NotNull] MiniSqlParserParser.BracketedQueryClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BracketedQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBracketedQueryClause([NotNull] MiniSqlParserParser.BracketedQueryClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SingleQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSingleQueryClause([NotNull] MiniSqlParserParser.SingleQueryClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SingleQueryClause</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.query_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSingleQueryClause([NotNull] MiniSqlParserParser.SingleQueryClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.aliased_query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAliased_query([NotNull] MiniSqlParserParser.Aliased_queryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.aliased_query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAliased_query([NotNull] MiniSqlParserParser.Aliased_queryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.result_columns"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterResult_columns([NotNull] MiniSqlParserParser.Result_columnsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.result_columns"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitResult_columns([NotNull] MiniSqlParserParser.Result_columnsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.result_column"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterResult_column([NotNull] MiniSqlParserParser.Result_columnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.result_column"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitResult_column([NotNull] MiniSqlParserParser.Result_columnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.assignments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignments([NotNull] MiniSqlParserParser.AssignmentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.assignments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignments([NotNull] MiniSqlParserParser.AssignmentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.column_names"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColumn_names([NotNull] MiniSqlParserParser.Column_namesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.column_names"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColumn_names([NotNull] MiniSqlParserParser.Column_namesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.unqualified_column_names"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnqualified_column_names([NotNull] MiniSqlParserParser.Unqualified_column_namesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.unqualified_column_names"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnqualified_column_names([NotNull] MiniSqlParserParser.Unqualified_column_namesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.values_clauses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValues_clauses([NotNull] MiniSqlParserParser.Values_clausesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.values_clauses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValues_clauses([NotNull] MiniSqlParserParser.Values_clausesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.value_columns"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValue_columns([NotNull] MiniSqlParserParser.Value_columnsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.value_columns"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValue_columns([NotNull] MiniSqlParserParser.Value_columnsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.value_column"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValue_column([NotNull] MiniSqlParserParser.Value_columnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.value_column"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValue_column([NotNull] MiniSqlParserParser.Value_columnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.exprs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprs([NotNull] MiniSqlParserParser.ExprsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.exprs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprs([NotNull] MiniSqlParserParser.ExprsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>JoinSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterJoinSource([NotNull] MiniSqlParserParser.JoinSourceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>JoinSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitJoinSource([NotNull] MiniSqlParserParser.JoinSourceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TableSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTableSource([NotNull] MiniSqlParserParser.TableSourceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TableSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTableSource([NotNull] MiniSqlParserParser.TableSourceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubQuerySource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubQuerySource([NotNull] MiniSqlParserParser.SubQuerySourceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubQuerySource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubQuerySource([NotNull] MiniSqlParserParser.SubQuerySourceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BracketedSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBracketedSource([NotNull] MiniSqlParserParser.BracketedSourceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BracketedSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBracketedSource([NotNull] MiniSqlParserParser.BracketedSourceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CommaJoinSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCommaJoinSource([NotNull] MiniSqlParserParser.CommaJoinSourceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CommaJoinSource</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.join_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCommaJoinSource([NotNull] MiniSqlParserParser.CommaJoinSourceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.join_constraint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterJoin_constraint([NotNull] MiniSqlParserParser.Join_constraintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.join_constraint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitJoin_constraint([NotNull] MiniSqlParserParser.Join_constraintContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.join_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterJoin_operator([NotNull] MiniSqlParserParser.Join_operatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.join_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitJoin_operator([NotNull] MiniSqlParserParser.Join_operatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.groupBy_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupBy_clause([NotNull] MiniSqlParserParser.GroupBy_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.groupBy_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupBy_clause([NotNull] MiniSqlParserParser.GroupBy_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.orderBy_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrderBy_clause([NotNull] MiniSqlParserParser.OrderBy_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.orderBy_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrderBy_clause([NotNull] MiniSqlParserParser.OrderBy_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.ordering_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrdering_term([NotNull] MiniSqlParserParser.Ordering_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.ordering_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrdering_term([NotNull] MiniSqlParserParser.Ordering_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.partitionBy_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPartitionBy_clause([NotNull] MiniSqlParserParser.PartitionBy_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.partitionBy_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPartitionBy_clause([NotNull] MiniSqlParserParser.PartitionBy_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.partitioning_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPartitioning_term([NotNull] MiniSqlParserParser.Partitioning_termContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.partitioning_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPartitioning_term([NotNull] MiniSqlParserParser.Partitioning_termContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclare([NotNull] MiniSqlParserParser.DeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclare([NotNull] MiniSqlParserParser.DeclareContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.params"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParams([NotNull] MiniSqlParserParser.ParamsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.params"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParams([NotNull] MiniSqlParserParser.ParamsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParam([NotNull] MiniSqlParserParser.ParamContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParam([NotNull] MiniSqlParserParser.ParamContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.out_param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOut_param([NotNull] MiniSqlParserParser.Out_paramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.out_param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOut_param([NotNull] MiniSqlParserParser.Out_paramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.limit_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLimit_clause([NotNull] MiniSqlParserParser.Limit_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.limit_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLimit_clause([NotNull] MiniSqlParserParser.Limit_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.for_update_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFor_update_clause([NotNull] MiniSqlParserParser.For_update_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.for_update_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFor_update_clause([NotNull] MiniSqlParserParser.For_update_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.for_update_of_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFor_update_of_clause([NotNull] MiniSqlParserParser.For_update_of_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.for_update_of_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFor_update_of_clause([NotNull] MiniSqlParserParser.For_update_of_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IsPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIsPredicate([NotNull] MiniSqlParserParser.IsPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IsPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIsPredicate([NotNull] MiniSqlParserParser.IsPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BetweenPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBetweenPredicate([NotNull] MiniSqlParserParser.BetweenPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BetweenPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBetweenPredicate([NotNull] MiniSqlParserParser.BetweenPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ExistsPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExistsPredicate([NotNull] MiniSqlParserParser.ExistsPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ExistsPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExistsPredicate([NotNull] MiniSqlParserParser.ExistsPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubQueryPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubQueryPredicate([NotNull] MiniSqlParserParser.SubQueryPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubQueryPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubQueryPredicate([NotNull] MiniSqlParserParser.SubQueryPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AndPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndPredicate([NotNull] MiniSqlParserParser.AndPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AndPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndPredicate([NotNull] MiniSqlParserParser.AndPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LikePredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLikePredicate([NotNull] MiniSqlParserParser.LikePredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LikePredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLikePredicate([NotNull] MiniSqlParserParser.LikePredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInPredicate([NotNull] MiniSqlParserParser.InPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInPredicate([NotNull] MiniSqlParserParser.InPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NotPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotPredicate([NotNull] MiniSqlParserParser.NotPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NotPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotPredicate([NotNull] MiniSqlParserParser.NotPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OrPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrPredicate([NotNull] MiniSqlParserParser.OrPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OrPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrPredicate([NotNull] MiniSqlParserParser.OrPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BracketedPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBracketedPredicate([NotNull] MiniSqlParserParser.BracketedPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BracketedPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBracketedPredicate([NotNull] MiniSqlParserParser.BracketedPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryOpPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryOpPredicate([NotNull] MiniSqlParserParser.BinaryOpPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryOpPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryOpPredicate([NotNull] MiniSqlParserParser.BinaryOpPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PhPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPhPredicate([NotNull] MiniSqlParserParser.PhPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PhPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPhPredicate([NotNull] MiniSqlParserParser.PhPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNullPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIsNullPredicate([NotNull] MiniSqlParserParser.IsNullPredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNullPredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIsNullPredicate([NotNull] MiniSqlParserParser.IsNullPredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CollatePredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCollatePredicate([NotNull] MiniSqlParserParser.CollatePredicateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CollatePredicate</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.predicate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCollatePredicate([NotNull] MiniSqlParserParser.CollatePredicateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ExtractFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExtractFuncExpr([NotNull] MiniSqlParserParser.ExtractFuncExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ExtractFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExtractFuncExpr([NotNull] MiniSqlParserParser.ExtractFuncExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Case1Expr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCase1Expr([NotNull] MiniSqlParserParser.Case1ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Case1Expr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCase1Expr([NotNull] MiniSqlParserParser.Case1ExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ColumnExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColumnExpr([NotNull] MiniSqlParserParser.ColumnExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ColumnExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColumnExpr([NotNull] MiniSqlParserParser.ColumnExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubQueryExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubQueryExpr([NotNull] MiniSqlParserParser.SubQueryExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubQueryExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubQueryExpr([NotNull] MiniSqlParserParser.SubQueryExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>WindowFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWindowFuncExpr([NotNull] MiniSqlParserParser.WindowFuncExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>WindowFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWindowFuncExpr([NotNull] MiniSqlParserParser.WindowFuncExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BracketedExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBracketedExpr([NotNull] MiniSqlParserParser.BracketedExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BracketedExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBracketedExpr([NotNull] MiniSqlParserParser.BracketedExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GenericFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGenericFuncExpr([NotNull] MiniSqlParserParser.GenericFuncExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GenericFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGenericFuncExpr([NotNull] MiniSqlParserParser.GenericFuncExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PostgreSqlCastExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostgreSqlCastExpr([NotNull] MiniSqlParserParser.PostgreSqlCastExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PostgreSqlCastExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostgreSqlCastExpr([NotNull] MiniSqlParserParser.PostgreSqlCastExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SignedNumberExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSignedNumberExpr([NotNull] MiniSqlParserParser.SignedNumberExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SignedNumberExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSignedNumberExpr([NotNull] MiniSqlParserParser.SignedNumberExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PhExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPhExpr([NotNull] MiniSqlParserParser.PhExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PhExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPhExpr([NotNull] MiniSqlParserParser.PhExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AggregateFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAggregateFuncExpr([NotNull] MiniSqlParserParser.AggregateFuncExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AggregateFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAggregateFuncExpr([NotNull] MiniSqlParserParser.AggregateFuncExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Case2Expr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCase2Expr([NotNull] MiniSqlParserParser.Case2ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Case2Expr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCase2Expr([NotNull] MiniSqlParserParser.Case2ExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitwiseNotExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitwiseNotExpr([NotNull] MiniSqlParserParser.BitwiseNotExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitwiseNotExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitwiseNotExpr([NotNull] MiniSqlParserParser.BitwiseNotExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubstrFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubstrFuncExpr([NotNull] MiniSqlParserParser.SubstrFuncExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubstrFuncExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubstrFuncExpr([NotNull] MiniSqlParserParser.SubstrFuncExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CastExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCastExpr([NotNull] MiniSqlParserParser.CastExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CastExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCastExpr([NotNull] MiniSqlParserParser.CastExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpr([NotNull] MiniSqlParserParser.LiteralExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpr([NotNull] MiniSqlParserParser.LiteralExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryOpExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryOpExpr([NotNull] MiniSqlParserParser.BinaryOpExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryOpExpr</c>
	/// labeled alternative in <see cref="MiniSqlParserParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryOpExpr([NotNull] MiniSqlParserParser.BinaryOpExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.substring_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubstring_function([NotNull] MiniSqlParserParser.Substring_functionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.substring_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubstring_function([NotNull] MiniSqlParserParser.Substring_functionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.extract_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExtract_function([NotNull] MiniSqlParserParser.Extract_functionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.extract_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExtract_function([NotNull] MiniSqlParserParser.Extract_functionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.aggregate_function1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAggregate_function1([NotNull] MiniSqlParserParser.Aggregate_function1Context context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.aggregate_function1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAggregate_function1([NotNull] MiniSqlParserParser.Aggregate_function1Context context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.aggregate_function2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAggregate_function2([NotNull] MiniSqlParserParser.Aggregate_function2Context context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.aggregate_function2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAggregate_function2([NotNull] MiniSqlParserParser.Aggregate_function2Context context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.window_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWindow_function([NotNull] MiniSqlParserParser.Window_functionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.window_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWindow_function([NotNull] MiniSqlParserParser.Window_functionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.generic_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGeneric_function([NotNull] MiniSqlParserParser.Generic_functionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.generic_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGeneric_function([NotNull] MiniSqlParserParser.Generic_functionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.qualified_schema_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQualified_schema_name([NotNull] MiniSqlParserParser.Qualified_schema_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.qualified_schema_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQualified_schema_name([NotNull] MiniSqlParserParser.Qualified_schema_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.function_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction_name([NotNull] MiniSqlParserParser.Function_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.function_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction_name([NotNull] MiniSqlParserParser.Function_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.index_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndex_name([NotNull] MiniSqlParserParser.Index_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.index_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndex_name([NotNull] MiniSqlParserParser.Index_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.table_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTable_name([NotNull] MiniSqlParserParser.Table_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.table_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTable_name([NotNull] MiniSqlParserParser.Table_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.column_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColumn_name([NotNull] MiniSqlParserParser.Column_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.column_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColumn_name([NotNull] MiniSqlParserParser.Column_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.unqualified_column_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnqualified_column_name([NotNull] MiniSqlParserParser.Unqualified_column_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.unqualified_column_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnqualified_column_name([NotNull] MiniSqlParserParser.Unqualified_column_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.aliased_table_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAliased_table_name([NotNull] MiniSqlParserParser.Aliased_table_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.aliased_table_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAliased_table_name([NotNull] MiniSqlParserParser.Aliased_table_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.hinted_table_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHinted_table_name([NotNull] MiniSqlParserParser.Hinted_table_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.hinted_table_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHinted_table_name([NotNull] MiniSqlParserParser.Hinted_table_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.hinted_aliased_table_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHinted_aliased_table_name([NotNull] MiniSqlParserParser.Hinted_aliased_table_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.hinted_aliased_table_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHinted_aliased_table_name([NotNull] MiniSqlParserParser.Hinted_aliased_table_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.table_hint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTable_hint([NotNull] MiniSqlParserParser.Table_hintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.table_hint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTable_hint([NotNull] MiniSqlParserParser.Table_hintContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.type_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType_name([NotNull] MiniSqlParserParser.Type_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.type_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType_name([NotNull] MiniSqlParserParser.Type_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.collation_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCollation_name([NotNull] MiniSqlParserParser.Collation_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.collation_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCollation_name([NotNull] MiniSqlParserParser.Collation_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.constraint_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstraint_name([NotNull] MiniSqlParserParser.Constraint_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.constraint_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstraint_name([NotNull] MiniSqlParserParser.Constraint_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.table_alias"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTable_alias([NotNull] MiniSqlParserParser.Table_aliasContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.table_alias"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTable_alias([NotNull] MiniSqlParserParser.Table_aliasContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.column_alias"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColumn_alias([NotNull] MiniSqlParserParser.Column_aliasContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.column_alias"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColumn_alias([NotNull] MiniSqlParserParser.Column_aliasContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] MiniSqlParserParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] MiniSqlParserParser.IdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.identifiable_keyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifiable_keyword([NotNull] MiniSqlParserParser.Identifiable_keywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.identifiable_keyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifiable_keyword([NotNull] MiniSqlParserParser.Identifiable_keywordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.literal_value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral_value([NotNull] MiniSqlParserParser.Literal_valueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.literal_value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral_value([NotNull] MiniSqlParserParser.Literal_valueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSqlParserParser.datetimeField"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatetimeField([NotNull] MiniSqlParserParser.DatetimeFieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSqlParserParser.datetimeField"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatetimeField([NotNull] MiniSqlParserParser.DatetimeFieldContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
